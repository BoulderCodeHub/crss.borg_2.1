# RiverWare_Ruleset 8.5.6 Patch
# Created 16:45 April 6, 2023
# 
RULESET
NAME "CRSS.Baseline.2027IGDCP.v4.4.0.9004 (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run)";
AGENDA_ORDER ASCENDING;
DESCRIPTION "Ruleset that assumes the IG and the DCP are in effect through 2060.";
PRECISION   2;
NOTES "";
BEGIN

  POLICY_GROUP   "Computation Rules";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Compute Compact Annual Volume";
    DESCRIPTION          "This rule fires once a year and computes both Powell's water year release and the Compact Point volume. The Compact Point volume is a sum of the gains from the Paria River and Powell's release over the water year.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 December 31, Current Year";
    NOTES                "";
    BEGIN

      $ "PowellOperation.Compact Point Volume" [] := "SumFlowsToVolume"( $ "LeeFerryCompactPoint.Gage Outflow", @"24:00:00 October 31, Previous Year", @"24:00:00 September 30, Current Year" );

      $ "PowellOperation.PowellWYRelease" [] := "SumFlowsToVolume"( $ "Powell.Outflow", @"24:00:00 October 31, Previous Year", @"24:00:00 September 30, Current Year" );

    END
    UUID "{184659cc-54d0-4ce6-bed1-5a46ef822e46}";;

  END
  UUID "{c45459bf-edb3-412d-9c61-ec1c5b488783}";;

  POLICY_GROUP   "Havasu Rules";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Compute Parker Energy";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "Lower Basin Energy.Computed Parker Head using Turbine Release" [] := "Compute Head as a Function of Turbine Release"( $ "Havasu.Turbine Release" [] );

      $ "Lower Basin Energy.Computed Parker Energy Using Input Eff" [] := $ "Lower Basin Energy.Parker Efficiency" [0.00000000, 0.00000000] * "FlowToVolume"( $ "Havasu.Turbine Release" [], @"t" ) * $ "Havasu.Operating Head" [] * ( 9789.00000000 "newton" / ( 1.00000000 "m" * 1.00000000 "m" * 1.00000000 "m" ) );

    END
    UUID "{263f862e-e053-4ad3-9989-a8b61dea83ec}";;

    RULE                 "Havasu Rule Curve";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "Havasu.Outflow" [];
    NOTES                "";
    BEGIN

      $ "Havasu.Outflow" [] := "SolveOutflow"( % "Havasu", $ "Havasu.Inflow" [], "ComputeStorageAtGivenOutflow"( % "Havasu", "ComputeOutflowAtRuleCurveStorage"( % "Havasu" ) ), $ "Havasu.Storage" [@"t - 1"], @"t" );

    END
    UUID "{38e0e119-87f0-4b22-b7e5-81fec861b0e1}";;

  END
  UUID "{a8aff71e-1561-417b-acbc-a60204780846}";;

  POLICY_GROUP   "Mohave Rules";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Mohave Rule Curve";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN "Mohave.Outflow" [];
    NOTES                "";
    BEGIN

      $ "Mohave.Outflow" [] := "SolveOutflow"( % "Mohave", $ "Mohave.Inflow" [], "ComputeStorageAtGivenOutflow"( % "Mohave", "ComputeOutflowAtRuleCurveStorage"( % "Mohave" ) ), $ "Mohave.Storage" [@"t - 1"], @"t" );

    END
    UUID "{a1f373a3-0925-4ce2-9f0d-ac07b1fc75f8}";;

  END
  UUID "{ccf2a324-ec90-48c8-b61a-ce660b8863fb}";;

  POLICY_GROUP   "Mead Rules";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Set Mead Outflow During Extreme Low Stochastic";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "ComputeMeadStoragePlusInflowBeforeRelease"(  ) <= "FlowToVolume"( "CurrentDemandBelowMead"(  ), @"t" );
    NOTES                "";
    BEGIN

      PRINT $ "Mead.Inflow" [];

      PRINT $ "SNWPDiversion.Total Depletion Requested" [];

      PRINT $ "Mead.Storage" [@"t - 1"];

      PRINT "CurrentDemandBelowMead"(  );

      $ "Mead.Outflow" [] := "Min"( "Min"( $ "Mead.Inflow" [], "ComputeOutflowAtGivenStorage"( % "Mead", "ComputeStorageAtGivenOutflow"( % "Mead", "CurrentDemandBelowMead"(  ) ) ) COMMENTED_BY "Added in to ensure that the release is not increased beyond the total downstream demands" ), "ComputeOutflowAtGivenStorage_Critical"( % "Mead", 0.00000000 "acre-feet" ) - 1.00000000 "acre-feet/month" );

    END
    UUID "{ec860ed3-03ff-46e6-a0fe-620703d806df}";;

    RULE                 "Mead Flood Control";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "Mead.Outflow" [] := IF ( @"t" <= @"24:00:00 July 31, Current Year" AND $ "Mead.Outflow" [] < "RunoffSeasonRelease"(  ) )
 THEN
  "ComputeMeadSpringReleaseConstrained"(  )
 ELSE
  IF ( @"t" > @"24:00:00 July 31, Current Year" AND $ "Mead.Outflow" [] < "ComputeOutflowAtGivenStorage"( % "Mead", "ComputeTargetStorage"(  ) ) )
  THEN
   "ComputeMeadFallReleaseConstrained"(  )
  ENDIF
 ENDIF;

      $ "MeadFloodControlData.MeadFloodControlFlag" [] := IF ( "MeadInFloodControl"(  ) )
 THEN
  1.00000000
 ENDIF;

      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "Surplus.SurplusFlag" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  1.00000000
 ENDIF;

      ENDFOREACH;

      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "Surplus.Flood Control Surplus Flag" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  1.00000000
 ENDIF COMMENTED_BY "Need to set this flag for banking";

            $ "Shortage.ShortageFlag" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  0.00000000
 ENDIF;

          DESCRIPTION          "----------------------<br>Nevada <br>";
      IF_STATEMENT ("MeadInFloodControl"(  )) THEN
            $ "Nevada ICS.GroundwaterActualMonthlyTake" [date] := 0.00000000 "acre-ft";

            $ "Nevada ICS.GroundwaterActualMonthlyPut" [date] := 0.00000000 "acre-ft";

            $ "Nevada ICS.BrockActualMonthlyTake" [date] := 0.00000000 "acre-ft";

            $ "Nevada ICS.TributaryConsActualMonthlyTake" [date] := 0.00000000 "acre-ft";

            $ "Nevada ICS.SNGWBankPut" [date] := 0.00000000 "acre-ft";

            $ "NevadaDesalination.Inflow" [date] := 0.00000000 "acre-ft/month";

            $ "Nevada ICS.ECActualMonthlyPutFromUnused" [date] := 0.00000000 "acre-ft";

            $ "Nevada ICS.ECActualMonthlyTake" [date] := 0.00000000 "acre-ft";

            $ "Nevada ICS.DCPActualMonthlyPut" [date] := 0.00000000 "acre-ft";

            $ "Nevada ICS.DCPActualMonthlyTake" [date] := 0.00000000 "acre-ft";

      END_IF_STATEMENT;

          DESCRIPTION          "----------------------<br>Arizona <br>";
      $ "Arizona ICS.ActualMonthlyPut" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  0.00000000 "acre-ft"
 ENDIF;

            $ "Arizona ICS.ActualMonthlyTake" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  0.00000000 "acre-ft"
 ENDIF;

            $ "Arizona ICS.BrockActualMonthlyTake" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  0.00000000 "acre-ft"
 ENDIF;

            $ "Arizona ICS.BICSActualMonthlyTake" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  0.00000000 "acre-ft"
 ENDIF;

            $ "Arizona ICS.CRITActualMonthlyPut" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  0.00000000 "acre-ft"
 ENDIF;

            $ "Arizona ICS.CRITActualMonthlyTake" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  0.00000000 "acre-ft"
 ENDIF;

            $ "Arizona ICS.GRICActualMonthlyPut" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  0.00000000 "acre-ft"
 ENDIF;

            $ "Arizona ICS.GRICActualMonthlyTake" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  0.00000000 "acre-ft"
 ENDIF;

            $ "Arizona ICS.GRICAZActualMonthlyTake" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  0.00000000 "acre-ft"
 ENDIF;

            $ "Arizona ICS.GRICFedActualMonthlyTake" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  0.00000000 "acre-ft"
 ENDIF;

            $ "Arizona ICS.YDPActualMonthlyTake" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  0.00000000 "acre-ft"
 ENDIF;

            $ "GilaGravityMainCanalPriority1:YumaCountyWUA.Diversion Requested" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  $ "GilaGravityMainCanalPriority1:YumaCountyWUA.Diversion Schedule" [date]
 ENDIF;

            $ "GilaGravityMainCanalPriority1:YumaCountyWUA.Depletion Requested" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  $ "GilaGravityMainCanalPriority1:YumaCountyWUA.Depletion Schedule" [date]
 ENDIF;

          DESCRIPTION          "----------------------<br>California <br>";
      $ "MWD ICS.ActualMonthlyPut" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  0.00000000 "acre-ft"
 ENDIF;

            $ "MWD ICS.ActualMonthlyTake" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  0.00000000 "acre-ft"
 ENDIF;

            $ "MWD ICS.BrockActualMonthlyTake" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  0.00000000 "acre-ft"
 ENDIF;

      ENDFOREACH;

      $ "IID ICS.ECActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := IF ( "MeadInFloodControl"(  ) )
 THEN
  0.00000000 "acre-ft"
 ENDIF;

      IF_STATEMENT ("MeadInFloodControl"(  )) THEN
          DESCRIPTION          "set ICMA to zero in Flood Control";
      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "ICMA.ActualMonthlyPut" [date] := 0.00000000 "acre-ft";

            $ "ICMA.ActualMonthlyTake" [date] := 0.00000000 "acre-ft";

      ENDFOREACH;

      END_IF_STATEMENT;

      FOREACH (STRING diversion IN { "MWD" , "SNWP" , "CAP" , "IID" , "Coachella" , "Mexico" }) DO
            FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            FOREACH (STRING user IN "ListLBNormalWaterUsersByProvider"( diversion )) DO
            "GetObject"( diversion CONCAT "Diversion:" CONCAT user ) & "Depletion Requested" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  IF ( diversion == "CAP" )
  THEN
   ( "ComputeSurplusDepletion"( diversion, date ) - $ "CAPMinDiversion.Total Depletion Requested" [date] ) * "LBUserToAggRatio"( diversion, user, "Depletion", date )
  ELSE
   IF ( diversion == "Mexico" )
   THEN
    ( ( "ComputeSurplusDepletion"( diversion, date ) - $ "OverDeliveryToMexico.Total Depletion Requested" [date] ) * "LBUserToAggRatio"( diversion, user, "Depletion", date ) ) COMMENTED_BY "Adjust Mexico for OverDelivery object (already set), but during FC, over-delivery counts as Mexico depletion"
   ELSE
    "ComputeSurplusDepletion"( diversion, date ) * "LBUserToAggRatio"( diversion, user, "Depletion", date )
   ENDIF
  ENDIF COMMENTED_BY "CAP minus min diversion b/c min diversion in different object"
 ENDIF;

            "GetObject"( diversion CONCAT "Diversion:" CONCAT user ) & "Diversion Requested" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  IF ( diversion == "CAP" )
  THEN
   ( "ComputeSurplusDiversion"( diversion, date ) - $ "CAPMinDiversion.Total Diversion Requested" [date] ) * "LBUserToAggRatio"( diversion, user, "Diversion", date )
  ELSE
   IF ( diversion == "Mexico" )
   THEN
    ( ( "ComputeSurplusDiversion"( diversion, date ) - $ "OverDeliveryToMexico.Total Diversion Requested" [date] ) * "LBUserToAggRatio"( diversion, user, "Diversion", date ) ) COMMENTED_BY "Adjust Mexico for OverDelivery object (already set), but during FC, over-delivery counts as Mexico depletion"
   ELSE
    ( "ComputeSurplusDiversion"( diversion, date ) + IF ( diversion == "MWD" )
    THEN
     $ "MWDSchedule.AnnualReturnFlow" []
    ELSE
     0.00000000 "acre-ft/month"
    ENDIF ) * "LBUserToAggRatio"( diversion, user, "Diversion", date )
   ENDIF
  ENDIF COMMENTED_BY "CAP minus min diversion b/c min diversion in different object"
 ENDIF;

      ENDFOREACH;

            diversion CONCAT "Schedule.FCSurplusFlag" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  1.00000000
 ENDIF;

            IF_STATEMENT ("MeadInFloodControl"(  )) THEN
            "LBSurplus." CONCAT diversion [date] := "ComputeSurplusDepletion"( diversion, date ) - IF ( diversion == "MWD" )
 THEN
  diversion CONCAT "Diversion:MWDDiversion.Depletion Schedule" [date]
 ELSE
  IF ( diversion == "Mexico" )
  THEN
   diversion CONCAT "Diversion:MexicoDiversion.Depletion Schedule" [date]
  ELSE
   IF ( diversion == "CAP" )
   THEN
    diversion CONCAT "Schedule.Depletion Schedule" [date] + $ "CAPMinDiversion.Total Depletion Requested" [date]
   ELSE
    IF ( diversion == "IID" OR diversion == "Coachella" )
    THEN
     diversion CONCAT "Schedule.Total Depletion Schedule" [date]
    ELSE
     diversion CONCAT "Diversion:SNWPDiversion.Depletion Schedule" [date]
    ENDIF
   ENDIF
  ENDIF
 ENDIF;

      END_IF_STATEMENT;

      ENDFOREACH;

      ENDFOREACH;

      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "MWDSchedule.Diversion Schedule" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  $ "MWDSchedule.Input Diversion Schedule" [date] + "RemainingMonthlyFallow"( "MWD", date )
 ENDIF COMMENTED_BY "Reset MWD and PVID fallowing to surplus minimum, adjusting for amount of fallowing credits already created by PVID";

            $ "MWDSchedule.Depletion Schedule" [date] := IF ( "MeadInFloodControl"(  ) )
 THEN
  $ "MWDSchedule.Input Depletion Schedule" [date] + "RemainingMonthlyFallow"( "MWD", date )
 ENDIF;

      ENDFOREACH;

    END
    UUID "{f6d133a5-11f6-4c23-816f-6edfbe5179b4}";;

    RULE                 "Set Mead Outflow For Demands";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      BREAKPOINT BEFORE_EXEC FALSE;
      $ "Mead.Outflow" [] := "ComputeOutflowAtGivenStorage"( % "Mead", "ComputeStorageAtGivenOutflow"( % "Mead", "CurrentDemandBelowMead"(  ) ) );

    END
    UUID "{e08dd70b-0c74-418c-82ea-ff1c9332a601}";;

  END
  UUID "{0151a669-b740-4a55-a7fc-d3e0c7301290}";;

  POLICY_GROUP   "LB DCP and MX BWSCP";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Implement Fed DCP Water_TURN ON FOR DCP COMPARISON RUN";
    DESCRIPTION          "This sets the reduction to WM bypass flows to the cienega. Annual reduction volume is determined by &quot;Determine Fed Water Vol&quot; and sets slot on &quot;DCP&quot; data object. This rule takes that volume and sets monthly values by taking the annual total (112 kaf) and multiplying by the monthly coefficients and then subtracting the Fed protection volume as multplied by the same coefficients. This should keep the distribution somewhat intact and avoid negative flows. Rule fires once a year at January.  ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
  NAMES_COLOR  "#5500ff";
    NOTES                "2019-06-19 - RAB: copied from DCP model and updated to account for well field 242 injection";
    BEGIN

      FOREACH (DATETIME date IN "ListJanuaryToDecemberTimesteps"(  )) DO
            WITH_STATEMENT (NUMERIC monthly_depletion = "ComputeReducedBypassFromFedDCP"( date )) DO
            $ "YumaOperations:WelltonMohawkBypassFlows.Depletion Requested" [date] := monthly_depletion;

            $ "YumaOperations:WelltonMohawkBypassFlows.Diversion Requested" [date] := monthly_depletion;

      END_WITH_STATEMENT;

      ENDFOREACH;

    END
    UUID "{ac492e3f-75c5-4526-926a-b4df3e6abe24}";;

    RULE                 "Reduce Mexico by Computed BWSCP Savings and Create BWSCP Savings_OLD";
    DESCRIPTION          "EXECUTION CONSTRAINT: <br>Only in January, and only once<br><br><br>DESCRIPTION:<br>Reduces MX's delivery by their required BWSCP Savings volume. For now, assume this is only made in the year it is required based on a reduction in delivery. Also assume this same volume (less the system assessment), is created as BWSCP Savings (analagous to US DCP-ICS). <br><br><br>SLOTS SET:<br>- `MexicoDiversion:MexicoDiversion.Depletion Requested[]`<br>- `MexicoDiversion:MexicoDiversion.Diversion Requested[]`<br>- `ICMA.DCPActualAnnualPut[]`";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "2019-05-24 - RAB: updated to assign newly named BWSCP creation slot.<br><br>~ 2017 - RAB: Created";
    BEGIN

      IF_STATEMENT (NaNToZero ( $ "DCP.MXBWSCPSavingsVolume" [@"24:00:00 December Max DayOfMonth, Current Year"] ) > 0.00000000 "acre-ft") THEN
            WITH_STATEMENT (NUMERIC monthlyReduction = $ "DCP.MXBWSCPSavingsVolume" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000) DO
            FOREACH (DATETIME date IN @"24:00:00 January Max DayOfMonth, Current Year" TO @"24:00:00 December Max DayOfMonth, Current Year") DO
            $ "MexicoDiversion:MexicoDiversion.Depletion Requested" [date] := $ "MexicoDiversion:MexicoDiversion.Depletion Requested" [date] - "VolumeToFlow"( monthlyReduction, date );

            $ "MexicoDiversion:MexicoDiversion.Diversion Requested" [date] := $ "MexicoDiversion:MexicoDiversion.Diversion Requested" [date] - "VolumeToFlow"( monthlyReduction, date ) * ( $ "MexicoDiversion:MexicoDiversion.Diversion Requested" [date] / $ "MexicoDiversion:MexicoDiversion.Depletion Requested" [date] );

      ENDFOREACH;

      END_WITH_STATEMENT;

          DESCRIPTION          "--------------------------------------------------------------<br>Create BWSCP Savings (analagous to US DCP-ICS)<br>-------------------------------------------------------------- <br>";
      $ "ICMA.BWSCPActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineMXAnnualBWSCPPut"(  );

            $ "ICMA.BWSCPAdditionalAnnualContribution" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineBWSCPAdditionalContribution"( $ "ICMA.ConvertMWRToBWSCP" [@"24:00:00 December Max DayOfMonth, Current Year"], "DetermineMXAnnualBWSCPPut"(  ) );

      END_IF_STATEMENT;

    END
    UUID "{449143db-302e-40ab-ba59-088c74fe8ad2}";;

    RULE                 "Reduce Mexico by Computed BWSCP Savings and Create BWSCP Savings";
    DESCRIPTION          "EXECUTION CONSTRAINT: <br>Only in January, and only once<br><br><br>DESCRIPTION:<br>Reduces MX's delivery by their required BWSCP Savings volume. For now, assume this is only made in the year it is required based on a reduction in delivery. Also assume this same volume (less the system assessment), is created as BWSCP Savings (analagous to US DCP-ICS). <br><br><br>SLOTS SET:<br>- `MexicoDiversion:MexicoDiversion.Depletion Requested[]`<br>- `MexicoDiversion:MexicoDiversion.Diversion Requested[]`<br>- `ICMA.DCPActualAnnualPut[]`";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
  NAMES_COLOR  "#5500ff";
    NOTES                "2019-05-24 - RAB: updated to assign newly named BWSCP creation slot.<br><br>~ 2017 - RAB: Created";
    BEGIN

      IF_STATEMENT (NaNToZero ( $ "DCP.MXBWSCPSavingsVolume" [@"24:00:00 December Max DayOfMonth, Current Year"] ) > 0.00000000 "acre-ft") THEN
            WITH_STATEMENT (NUMERIC monthlyReduction = $ "DCP.MXBWSCPSavingsVolume" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000) DO
            FOREACH (DATETIME date IN @"24:00:00 January Max DayOfMonth, Current Year" TO @"24:00:00 December Max DayOfMonth, Current Year") DO
            $ "MexicoDiversion:MexicoDiversion.Depletion Requested" [date] := $ "MexicoDiversion:MexicoDiversion.Depletion Requested" [date] - "VolumeToFlow"( monthlyReduction, date );

            $ "MexicoDiversion:MexicoDiversion.Diversion Requested" [date] := $ "MexicoDiversion:MexicoDiversion.Diversion Requested" [date] - "VolumeToFlow"( monthlyReduction, date ) * ( $ "MexicoDiversion:MexicoDiversion.Diversion Requested" [date] / $ "MexicoDiversion:MexicoDiversion.Depletion Requested" [date] );

      ENDFOREACH;

      END_WITH_STATEMENT;

          DESCRIPTION          "--------------------------------------------------------------<br>Create BWSCP Savings (analagous to US DCP-ICS)<br>-------------------------------------------------------------- <br>";
      $ "ICMA.BWSCPActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "ICMA.BWSCPAdditionalAnnualContribution" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      END_IF_STATEMENT;

    END
    UUID "{9b7df617-fbe0-4379-b4a3-7273bf7450ec}";;

    RULE                 "Reduce AZ Demands by DCP Contribution System Water";
    DESCRIPTION          "Execution Constraint: January, rule has not successfully solvedl <br>  <br>Description: Rule adjust CAP delivery for DCP contribution volumes.  Currently all DCP contributions made by AZ are assumed to be system water (no EC-ICS converted to DCP-ICS).  Annual contribution volume is divided equally among all months.<br>  <br>Slots Set: CAPDiversion:CAPDiversionMandI.Depletion Requested, CAPDiversion:CAPDiversionMandI.Diversion Requested";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      WITH_STATEMENT (NUMERIC totalAZReducs = NaNToZero ( $ "DCP.AZContributionVolume" [@"24:00:00 December Max DayOfMonth, Current Year"] ) - ( $ "Arizona ICS.ConvertECToDCP" [@"24:00:00 December Max DayOfMonth, Current Year"] * "SystemTaxAdjustment"(  ) )) DO
            IF_STATEMENT (totalAZReducs > 0.00000000 "acre-ft") THEN
            WITH_STATEMENT (NUMERIC monthlyReduction = totalAZReducs / 12.00000000) DO
            FOREACH (DATETIME date IN @"t" TO @"t + 11") DO
            $ "CAPDiversion:CAPDiversionMandI.Depletion Requested" [date] := $ "CAPDiversion:CAPDiversionMandI.Depletion Requested" [date] - "VolumeToFlow"( monthlyReduction, date );

            $ "CAPDiversion:CAPDiversionMandI.Diversion Requested" [date] := $ "CAPDiversion:CAPDiversionMandI.Diversion Requested" [date] - "VolumeToFlow"( monthlyReduction, date ) * ( $ "CAPDiversion:CAPDiversionMandI.Diversion Requested" [date] / $ "CAPDiversion:CAPDiversionMandI.Depletion Requested" [date] );

      ENDFOREACH;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{dbe73d50-ab4c-4c4b-a8ff-1948fa104cc6}";;

    RULE                 "Adjust CA Users for ICS during DCP";
    DESCRIPTION          "Adjusts MWD's and Coachella's demands during DCP for ICS puts/takes and DCP puts";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "AreCADCPContributions"(  );
    NOTES                "2019-06-14 - RAB: updated to use `GetMWDDeliveryAdjustment()` and include Coachella<br><br>~2016/2017 - RAB: Created";
    BEGIN

      FOREACH (DATETIME date IN "ListJanuaryToDecemberTimesteps"(  )) DO
          DESCRIPTION          "----------------------<br>MWD<br>---------------------- <br>";
      WITH_STATEMENT (NUMERIC annualDeliveryAdj = "GetMWDDeliveryAdjustment"( date, "Depletion" ) COMMENTED_BY "will adjust both diversion and depletion by the depletion amount of ICS<br>can do this b/c we are adding to existing diverion amount, so the return flow portion should <br>already be included <br>") DO
            $ "MWDDiversion:MWDDiversion.Diversion Requested" [date] := $ "MWDSchedule.Diversion Schedule" [date] + annualDeliveryAdj;

            $ "MWDDiversion:MWDDiversion.Depletion Requested" [date] := $ "MWDSchedule.Depletion Schedule" [date] + annualDeliveryAdj;

      END_WITH_STATEMENT;

          DESCRIPTION          "----------------------<br>Coachella<br>---------------------- <br>";
      WITH_STATEMENT (NUMERIC delivery_adjustment = "DetermineCoachellaDCPDeliveryAdjustment"( date )) DO
            $ "CoachellaDiversion:CoachellaDiversionAG.Depletion Requested" [date] := $ "CoachellaDiversion:CoachellaDiversionAG.Depletion Requested" [date] + delivery_adjustment;

            $ "CoachellaDiversion:CoachellaDiversionAG.Diversion Requested" [date] := $ "CoachellaDiversion:CoachellaDiversionAG.Diversion Requested" [date] + delivery_adjustment;

      END_WITH_STATEMENT;

      ENDFOREACH;

    END
    UUID "{979c5fae-231b-42ae-ab17-f6f5010d7dbf}";;

    RULE                 "MWD ICS Annual to Monthly During DCP_OLD";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "AreCADCPContributions"(  ) COMMENTED_BY "there are CA dcp savings this year";
    NOTES                "2019-06-14 - RAB: Created";
    BEGIN

      FOREACH (DATETIME date IN "ListJanuaryToDecemberTimesteps"(  )) DO
            $ "MWD ICS.ActualMonthlyTake" [date] := $ "MWD ICS.ECActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "MWD ICS.DCPActualMonthlyTake" [date] := $ "MWD ICS.DCPActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "MWD ICS.BrockActualMonthlyTake" [date] := $ "MWD ICS.BrockActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "MWD ICS.YDPActualMonthlyTake" [date] := $ "MWD ICS.YDPActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "MWD ICS.BICSActualMonthlyTake" [date] := $ "MWD ICS.BICSActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "MWD ICS.ActualMonthlyPut" [date] := $ "MWD ICS.ECActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "MWD ICS.DCPActualMonthlyPut" [date] := $ "MWD ICS.DCPActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "MWD ICS.DCPAdditionalMonthlyContribution" [date] := $ "MWD ICS.DCPAdditionalAnnualContribution" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

      ENDFOREACH;

    END
    UUID "{ae6288d7-c49b-4170-b4fe-3dceb555965b}";;

    RULE                 "MWD ICS Annual to Monthly During DCP";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "AreCADCPContributions"(  ) COMMENTED_BY "there are CA dcp savings this year";
  NAMES_COLOR  "#5500ff";
    NOTES                "2019-06-14 - RAB: Created";
    BEGIN

      FOREACH (DATETIME date IN "ListJanuaryToDecemberTimesteps"(  )) DO
            $ "MWD ICS.ActualMonthlyTake" [date] := 0.00000000 "acre-ft";

            $ "MWD ICS.DCPActualMonthlyTake" [date] := 0.00000000 "acre-ft";

            $ "MWD ICS.BrockActualMonthlyTake" [date] := 0.00000000 "acre-ft";

            $ "MWD ICS.YDPActualMonthlyTake" [date] := 0.00000000 "acre-ft";

            $ "MWD ICS.BICSActualMonthlyTake" [date] := 0.00000000 "acre-ft";

            $ "MWD ICS.ActualMonthlyPut" [date] := 0.00000000 "acre-ft";

            $ "MWD ICS.DCPActualMonthlyPut" [date] := 0.00000000 "acre-ft";

            $ "MWD ICS.DCPAdditionalMonthlyContribution" [date] := 0.00000000 "acre-ft";

      ENDFOREACH;

    END
    UUID "{702737c0-6796-4c24-9a00-d339ef3a61d9}";;

    RULE                 "Compute California Available ICS During DCP_OLD";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "AreCADCPContributions"(  ) COMMENTED_BY "there are CA dcp savings this year";
    NOTES                "2019-06-14 - RAB: Updated to only set annaul slots and use new take determining algorithm.<br><br>~2016/2017 - RAB: created";
    BEGIN

    DESCRIPTION          "------------------------------------------<br>MWD<br>------------------------------------------  <br>";
      $ "MWD ICS.DesiredAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineMWDAnnualTakeDuringDCP"(  );

      $ "MWD ICS.ECActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineMWDAnnualPutDuringDCP"(  );

      WITH_STATEMENT (LIST mwd_takes = "ComputeMWDTakesInPriority"( "ConstrainMWDDesiredTakeDuringDCP"( "DetermineMWDAnnualTakeDuringDCP"(  ) ), "MWDICSDeliveryPriorities"(  ) )) DO
            $ "MWD ICS.DCPActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX "GetMWDICSPriorityIndex"( "DCP" ) FROM mwd_takes;

            $ "MWD ICS.ECActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX "GetMWDICSPriorityIndex"( "EC" ) FROM mwd_takes;

            $ "MWD ICS.BrockActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX "GetMWDICSPriorityIndex"( "Brock" ) FROM mwd_takes;

            $ "MWD ICS.YDPActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX "GetMWDICSPriorityIndex"( "YDP" ) FROM mwd_takes;

            $ "MWD ICS.BICSActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX "GetMWDICSPriorityIndex"( "BICS" ) FROM mwd_takes;

      END_WITH_STATEMENT;

    DESCRIPTION          "------------------------------------------<br>IID<br>------------------------------------------    <br>";
      $ "IID ICS.ECActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineIIDECICSPut"(  );

    END
    UUID "{c0566b52-8ce5-4e31-9ec5-591fd7fd0a7d}";;

    RULE                 "Compute California Available ICS During DCP";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND "AreCADCPContributions"(  ) COMMENTED_BY "there are CA dcp savings this year";
  NAMES_COLOR  "#5500ff";
    NOTES                "2019-06-14 - RAB: Updated to only set annaul slots and use new take determining algorithm.<br><br>~2016/2017 - RAB: created";
    BEGIN

    DESCRIPTION          "------------------------------------------<br>MWD<br>------------------------------------------  <br>";
      $ "MWD ICS.DesiredAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      $ "MWD ICS.ECActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      WITH_STATEMENT (LIST mwd_takes = "ComputeMWDTakesInPriority"( "ConstrainMWDDesiredTakeDuringDCP"( "DetermineMWDAnnualTakeDuringDCP"(  ) ), "MWDICSDeliveryPriorities"(  ) )) DO
            $ "MWD ICS.DCPActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "MWD ICS.ECActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "MWD ICS.BrockActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "MWD ICS.YDPActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "MWD ICS.BICSActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      END_WITH_STATEMENT;

    DESCRIPTION          "------------------------------------------<br>IID<br>------------------------------------------    <br>";
      $ "IID ICS.ECActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

    END
    UUID "{494f8643-0564-428c-9bd7-79c8c5ba5ca9}";;

    RULE                 "Compute CA DCP Contributions_OLD";
    DESCRIPTION          "Computes the additional puts from IID and MWD necesary to make the entire DCP savings, if there is not enough EC-ICS to convert.";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      $ "MWD ICS.DCPActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineMWDDCPPut"(  );

      $ "MWD ICS.DCPAdditionalAnnualContribution" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineDCPAdditionalContribution"( "MWD", "DetermineMWDDCPPut"(  ), $ "MWD ICS.ConvertECToDCP" [@"24:00:00 December Max DayOfMonth, Current Year"] );

      $ "MWD ICS.CoachellaDCPActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineCoachellaDCPPut"(  );

      $ "MWD ICS.CoachellaDCPAdditionalAnnualContribution" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineDCPAdditionalContribution"( "Coachella", "DetermineCoachellaDCPPut"(  ), 0.00000000 "acre-ft" );

    END
    UUID "{ff1df859-2216-4c55-bc85-88e563181c35}";;

    RULE                 "Compute CA DCP Contributions";
    DESCRIPTION          "Computes the additional puts from IID and MWD necesary to make the entire DCP savings, if there is not enough EC-ICS to convert.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
  NAMES_COLOR  "#5500ff";
    NOTES                "";
    BEGIN

      $ "MWD ICS.DCPActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      $ "MWD ICS.DCPAdditionalAnnualContribution" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineDCPAdditionalContribution"( "MWD", "DetermineMWDDCPPut"(  ), $ "MWD ICS.ConvertECToDCP" [@"24:00:00 December Max DayOfMonth, Current Year"] );

      $ "MWD ICS.CoachellaDCPActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      $ "MWD ICS.CoachellaDCPAdditionalAnnualContribution" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineDCPAdditionalContribution"( "Coachella", "DetermineCoachellaDCPPut"(  ), 0.00000000 "acre-ft" );

    END
    UUID "{e604257a-9328-4f62-a7ba-eb703027b5ed}";;

  END
  UUID "{592cebd8-d706-4a55-84bc-6d6e15d2c0a5}";;

  POLICY_GROUP   "Lee Ferry Deficit Rules";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Create Lee Ferry Deficit Water";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "LeeFerryDeficit.RunningMonthlyDeficit" [] > 0.00000000 "acre-ft") THEN
            $ "LeeFerryDeficitSupply.Inflow" [] := "VolumeToFlow"( $ "LeeFerryDeficit.RunningMonthlyDeficit" [], @"t" );

            $ "Powell.Outflow" [] := $ "Powell.Outflow" [] + "VolumeToFlow"( $ "LeeFerryDeficit.RunningMonthlyDeficit" [], @"t" );

      END_IF_STATEMENT;

    END
    UUID "{4676bf26-b059-498e-85ff-4a605332c630}";;

    RULE                 "Running Monthly 10 Year Deficit";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Running Monthly 10 Year Deficit" );
    NOTES                "";
    BEGIN

      IF_STATEMENT (@"t" == "RunStartDate"(  )) THEN
            $ "LeeFerryDeficit.RunningMonthlyDeficit" [] := "Max"( ( $ "LeeFerryDeficit.10YearCompactAmount" [] - "SumFlowsToVolume"( $ "LeeFerryCompactPoint.Gage Outflow", @"t - 119", @"t" ) ) COMMENTED_BY "The 10 year required amount minus the actual running 10 year amount.<br>A positive number indicates that the compact is violated.  A negative indicates the<br>required 10 year value is exceeded.  Ensure that the value is at minimum 0 to indicate<br>there is no deficit.", 0.00000000 "acre-ft" );

            FOREACH (DATETIME date IN @"t - 3" TO @"t - 1") DO
            $ "LeeFerryDeficit.RunningMonthlyDeficit" [date] := 0.00000000 "acre-ft";

      ENDFOREACH;

      ELSE
            $ "LeeFerryDeficit.RunningMonthlyDeficit" [] := "Max"( ( $ "LeeFerryDeficit.10YearCompactAmount" [] - "SumFlowsToVolume"( $ "LeeFerryCompactPoint.Gage Outflow", @"t - 119", @"t" ) ) COMMENTED_BY "The 10 year required amount minus the actual running 10 year amount.<br>A positive number indicates that the compact is violated.  A negative indicates the<br>required 10 year value is exceeded.  Ensure that the value is at minimum 0 to indicate<br>there is no deficit.", 0.00000000 "acre-ft" );

      END_IF_STATEMENT;

    END
    UUID "{1759499d-af4e-42ac-a093-fa8ac4916dd4}";;

  END
  UUID "{79b09eff-9d81-42e3-b5b8-9da4553fbfc7}";;

  POLICY_GROUP   "Powell Rules";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Check Bypass Capacity";
    DESCRIPTION          "If the reservoir is below the power pool, check if the set outflow is greater than the capacity of the bypass tubes.<br>If it is, reset it to the bypass capacity.<br><br>If the reservoir is above the power pool, then the power plant capacity is in play. This is roughly 25,000 cfs, or the maximum ROD release anyway, and the limitations of the bypass tubes do not matter.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "SpikeMadeThisMonth"(  );
    NOTES                "";
    BEGIN

      $ "Powell.Outflow" [] := IF ( $ "Powell.Storage" [] < "InactiveCapacity"( % "Powell" ) AND $ "Powell.Outflow" [] > "BypassCapacity"( $ "Powell.Pool Elevation" [] ) )
 THEN
  "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "IterateBypassCapacity"( $ "Powell.Pool Elevation" [] ) ), $ "Powell.Storage" [@"t - 1"], @"t" )
 ENDIF;

      $ "EqualizationData.BypassCapFlag" [] := IF ( IsNaN $ "EqualizationData.BypassCapFlag" [] )
 THEN
  IF ( $ "Powell.Storage" [] < "InactiveCapacity"( % "Powell" ) AND $ "Powell.Outflow" [] > "BypassCapacity"( $ "Powell.Pool Elevation" [] ) )
  THEN
   1.00000000
  ELSE
   0.00000000
  ENDIF
 ENDIF;

    END
    UUID "{d4a10707-96e5-4942-8484-f5809ee42db3}";;

    RULE                 "Add Carryover Equalization Release";
    DESCRIPTION          "As it is not always possible to completely Equalize in the water year due to maximum release constraints and errors in the forecast, this rule will add on additional releases to Powell in next water year to finish equalizing.  There carryover EQ volume will be released in 1 month if possible, up to the maximum release constraint.  If any remains, it will be released in the subsequent month, until no more carryover exists.";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "ThisRule" );
  NAMES_COLOR  "#000000";
    NOTES                "";
    BEGIN

      IF_STATEMENT (NaNToZero ( $ "EqualizationData.CarryoverEQFlag" [@"t - 1"] ) == 1.00000000) THEN
            WITH_STATEMENT (NUMERIC addRelease = "Min"( ( "GetMaxReleaseGivenInflow"( % "Powell", $ "Powell.Inflow" [], @"t" ) - $ "Powell.Outflow" [] ) COMMENTED_BY "Amount the current month's release can be increased", "VolumeToFlow"( $ "EqualizationData.CarryoverEQVolume" [@"t - 1"], @"t" ) COMMENTED_BY "Remaining EQ carryover volume" )) DO
            $ "Powell.Outflow" [] := $ "Powell.Outflow" [] + addRelease;

            $ "EqualizationData.CarryoverEQReleaseMade" [] := addRelease;

          DESCRIPTION          "If not able to release all the carryover volume in the current month, update the EQ <br>volume and Flag so this rule will execute again next month.";
      IF_STATEMENT ("FlowToVolume"( addRelease, @"t" ) < $ "EqualizationData.CarryoverEQVolume" [@"t - 1"]) THEN
            $ "EqualizationData.CarryoverEQFlag" [] := 1.00000000;

            $ "EqualizationData.CarryoverEQVolume" [] := $ "EqualizationData.CarryoverEQVolume" [@"t - 1"] - "FlowToVolume"( addRelease, @"t" );

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{0793497b-97e0-4931-8bcd-be4aa1640daf}";;

    RULE                 "Add Carryover Equalization Release_BORG";
    DESCRIPTION          "As it is not always possible to completely Equalize in the water year due to maximum release constraints and errors in the forecast, this rule will add on additional releases to Powell in next water year to finish equalizing.  There carryover EQ volume will be released in 1 month if possible, up to the maximum release constraint.  If any remains, it will be released in the subsequent month, until no more carryover exists.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "ThisRule" );
  NAMES_COLOR  "#0000ff";
    NOTES                "";
    BEGIN

      IF_STATEMENT (NaNToZero ( $ "EqualizationData.CarryoverEQFlag" [@"t - 1"] ) == 1.00000000) THEN
            WITH_STATEMENT (NUMERIC addRelease = "Min"( ( "Max"( "GetMaxReleaseGivenInflow"( % "Powell", $ "Powell.Inflow" [], @"t" ), "BypassCapacity"( $ "Powell.Pool Elevation" [] ) ) - $ "Powell.Outflow" [] ) COMMENTED_BY "Amount the current month's release can be increased", "VolumeToFlow"( $ "EqualizationData.CarryoverEQVolume" [@"t - 1"], @"t" ) COMMENTED_BY "Remaining EQ carryover volume" )) DO
            $ "Powell.Outflow" [] := $ "Powell.Outflow" [] + addRelease;

            $ "EqualizationData.CarryoverEQReleaseMade" [] := addRelease;

          DESCRIPTION          "If not able to release all the carryover volume in the current month, update the EQ <br>volume and Flag so this rule will execute again next month.";
      IF_STATEMENT ("FlowToVolume"( addRelease, @"t" ) < $ "EqualizationData.CarryoverEQVolume" [@"t - 1"]) THEN
            $ "EqualizationData.CarryoverEQFlag" [] := 1.00000000;

            $ "EqualizationData.CarryoverEQVolume" [] := $ "EqualizationData.CarryoverEQVolume" [@"t - 1"] - "FlowToVolume"( addRelease, @"t" );

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{952791df-1f4f-4af1-bbcc-8dade7a20f31}";;

    RULE                 "Equalization Tier";
    DESCRIPTION          "This rule fires monthly January through September and computes the Equalization (EQ) release from Powell, given that the conditions for EQ are met. Note that Powell's previous EOCY storage is compared to the EQ Line. This has the effect of not allowing Powell to bounce in and out of EQ. The new EQ conditions in the Guidelines (release to keep Mead above 1105 so as Powell doesn't go more than 20' below the EQ Line) are performed in the function CheckEqualizationRelease_Mead1105. ";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" <= @"24:00:00 September 30, Current Year" AND IsNaN $ "EqualizationData.EqualBasinStatesFlag" [] AND NOT IsNaN "Powell.Storage" [] AND NOT "SpikeMadeThisMonth"(  );
    NOTES                "";
    BEGIN

      "Powell.Outflow" [] := IF ( "StartYearInEqualization_BORG"(  ) COMMENTED_BY "By comparing to Powell's actual storage at beginning of year, EQ is an annual decision" )
 THEN
  "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "ComputePowellRelease"( "CheckEqualizationRelease_Mead1105_BORG"( "ConvertPowellRelease"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ) ) ) ), $ "Powell.Storage" [@"t - 1"], @"t" )
 ENDIF;

      $ "EqualizationData.EqualBasinStatesFlag" [] := IF ( "StartYearInEqualization_BORG"(  ) )
 THEN
  1.00000000
 ELSE
  0.00000000
 ENDIF;

    DESCRIPTION          "In September, if the monthly releases is less than the computed amount necessary to fully<br>equalize, then set the carryover equalization flag and volume so that the remaining EQ <br>release can be made in the subsequent month.";
      IF_STATEMENT ("StartYearInEqualization_BORG"(  ) AND @"t" == @"24:00:00 September Max DayOfMonth, Current Year") THEN
            WITH_STATEMENT (NUMERIC remainingWYRel = "CheckEqualizationRelease_Mead1105_BORG"( "ConvertPowellRelease"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ) ) + "ForecastPowellRelease"(  )) DO
            WITH_STATEMENT (NUMERIC powellRel = "FlowToVolume"( "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "ComputePowellRelease"( "CheckEqualizationRelease_Mead1105_BORG"( "ConvertPowellRelease"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ) ) ) ), $ "Powell.Storage" [@"t - 1"], @"t" ), @"t" )) DO
            IF_STATEMENT ("Floor"( remainingWYRel - powellRel, 100.00000000 "acre-ft" ) COMMENTED_BY "Round the difference down to the nearest 100 acre-ft to keep from setting this when there are only minor differences between the two volume" > 0.00000000 "acre-ft") THEN
            $ "EqualizationData.CarryoverEQFlag" [] := 1.00000000;

            $ "EqualizationData.CarryoverEQVolume" [] := remainingWYRel - powellRel;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{ca913e22-1ee2-416c-8346-65d7b5e794de}";;

    RULE                 "Equalization Tier_BORG";
    DESCRIPTION          "This rule fires monthly January through September and computes the Equalization (EQ) release from Powell, given that the conditions for EQ are met. Note that Powell's previous EOCY storage is compared to the EQ Line. This has the effect of not allowing Powell to bounce in and out of EQ. The new EQ conditions in the Guidelines (release to keep Mead above 1105 so as Powell doesn't go more than 20' below the EQ Line) are performed in the function CheckEqualizationRelease_Mead1105. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" <= @"24:00:00 September 30, Current Year" AND IsNaN $ "EqualizationData.EqualBasinStatesFlag" [] AND NOT IsNaN "Powell.Storage" [] AND NOT "SpikeMadeThisMonth"(  );
  NAMES_COLOR  "#5500ff";
    NOTES                "";
    BEGIN

      "Powell.Outflow" [] := IF ( "StartYearInEqualization_BORG"(  ) COMMENTED_BY "By comparing to Powell's actual storage at beginning of year, EQ is an annual decision" )
 THEN
  "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "ComputePowellRelease_BORG"( "CheckEqualizationRelease_Mead1105_BORG"( "ConvertPowellRelease"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ) ) ) ), $ "Powell.Storage" [@"t - 1"], @"t" )
 ENDIF;

      $ "EqualizationData.EqualBasinStatesFlag" [] := IF ( "StartYearInEqualization_BORG"(  ) )
 THEN
  1.00000000
 ELSE
  0.00000000
 ENDIF;

    DESCRIPTION          "In September, if the monthly releases is less than the computed amount necessary to fully<br>equalize, then set the carryover equalization flag and volume so that the remaining EQ <br>release can be made in the subsequent month.";
      IF_STATEMENT ("StartYearInEqualization_BORG"(  ) AND @"t" == @"24:00:00 September Max DayOfMonth, Current Year") THEN
            WITH_STATEMENT (NUMERIC remainingWYRel = "CheckEqualizationRelease_Mead1105_BORG"( "ConvertPowellRelease"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ) ) + "ForecastPowellRelease"(  )) DO
            WITH_STATEMENT (NUMERIC powellRel = "FlowToVolume"( "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "ComputePowellRelease"( "CheckEqualizationRelease_Mead1105_BORG"( "ConvertPowellRelease"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ) ) ) ), $ "Powell.Storage" [@"t - 1"], @"t" ), @"t" )) DO
            IF_STATEMENT ("Floor"( remainingWYRel - powellRel, 100.00000000 "acre-ft" ) COMMENTED_BY "Round the difference down to the nearest 100 acre-ft to keep from setting this when there are only minor differences between the two volume" > 0.00000000 "acre-ft") THEN
            $ "EqualizationData.CarryoverEQFlag" [] := 1.00000000;

            $ "EqualizationData.CarryoverEQVolume" [] := remainingWYRel - powellRel;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{2b461617-d1e1-4d10-a555-9f8cf476d069}";;

    RULE                 "Upper Elevation Balancing Tier Jan thru March";
    DESCRIPTION          "This rule fires in January through March and determines if Powell is in the Upper Elevation Balancing Tier (based on previous EOCY storage). If Powell is in this tier and Mead (again, previous EOCY storage) is below the minimum balancing elevation of 1075, Powell makes balancing releases within the min and max of 700 and 900 kaf. If Mead is above 1075, Powell releases 823 maf set in the rule Meet Powell Min Objective Release, which is lower priority and required to fire before this rule.";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" <= @"24:00:00 March 31, Current Year" AND IsNaN $ "Coordinated Operation.UpperLevelBalancingFlag" [] AND NOT IsNaN "Powell.Storage" [] AND NOT "SpikeMadeThisMonth"(  );
    NOTES                "";
    BEGIN

      $ "Powell.Outflow" [] := IF ( "InUpperElevationBalancingTier_BORG"(  ) )
 THEN
  IF ( $ "Mead.Storage" [@"24:00:00 December 31, Previous Year"] COMMENTED_BY "Use actual Jan 1 elevation" < "ElevationToStorage"( % "Mead", $ "Coordinated Operation.Hybrid_MeadMinBalancingElevation" [] ) )
  THEN
   "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "ComputePowellReleaseBalancing_OG"( "ConvertPowellReleaseBalancing"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ), "700", "900" ) ), $ "Powell.Storage" [@"t - 1"], @"t" ) COMMENTED_BY "Release for Upper Level Balancing if 1) Powell is in the correct elevation tier 2) EQ conditions are not met 3) EQ has not yet trumped 4) Mead is less than 1075 trigger"
  ENDIF
 ENDIF;

      BREAKPOINT BEFORE_EXEC FALSE;
      $ "Coordinated Operation.UpperLevelBalancingFlag" [] := IF ( "InUpperElevationBalancingTier_BORG"(  ) AND $ "Mead.Storage" [@"24:00:00 December 31, Previous Year"] COMMENTED_BY "Used actual Jan 1 elevation" < "ElevationToStorage"( % "Mead", $ "Coordinated Operation.Hybrid_MeadMinBalancingElevation" [] ) )
 THEN
  1.00000000
 ELSE
  0.00000000
 ENDIF;

    END
    UUID "{02271e82-48a3-4a36-a953-79d134e14974}";;

    RULE                 "Upper Elevation Balancing Tier Jan thru March_BORG";
    DESCRIPTION          "This rule fires in January through March and determines if Powell is in the Upper Elevation Balancing Tier (based on previous EOCY storage). If Powell is in this tier and Mead (again, previous EOCY storage) is below the minimum balancing elevation of 1075, Powell makes balancing releases within the min and max of 700 and 900 kaf. If Mead is above 1075, Powell releases 823 maf set in the rule Meet Powell Min Objective Release, which is lower priority and required to fire before this rule.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" <= @"24:00:00 March 31, Current Year" AND IsNaN $ "Coordinated Operation.UpperLevelBalancingFlag" [] AND NOT IsNaN "Powell.Storage" [] AND NOT "SpikeMadeThisMonth"(  );
  NAMES_COLOR  "#5500ff";
    NOTES                "";
    BEGIN

      $ "Powell.Outflow" [] := IF ( $ "Powell Decision Variables.PowellReleaseTier" [@"24:00:00 December 31, Current Year"] == 1.00000000 AND "CheckPowellBalancing"(  ) == 1.00000000 )
 THEN
  IF ( $ "Mead.Storage" [@"24:00:00 December 31, Previous Year"] COMMENTED_BY "Use actual Jan 1 elevation" < "ElevationToStorage"( % "Mead", "GetMeadRefElev"(  ) ) )
  THEN
   "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "ComputePowellReleaseBalancing_BORG"( "ConvertPowellReleaseBalancing"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ), $ "Powell Decision Variables.PowellReleaseTier" [@"24:00:00 December Max DayOfMonth, Current Year"] ) ), $ "Powell.Storage" [@"t - 1"], @"t" ) COMMENTED_BY "Release for Upper Level Balancing if 1) Powell is in the correct elevation tier 2) EQ conditions are not met 3) EQ has not yet trumped 4) Mead is less than 1075 trigger"
  ENDIF
 ENDIF;

      $ "Coordinated Operation.UpperLevelBalancingFlag" [] := IF ( $ "Powell Decision Variables.PowellReleaseTier" [@"24:00:00 December 31, Current Year"] == 1.00000000 AND "CheckPowellBalancing"(  ) == 1.00000000 AND $ "Mead.Storage" [@"24:00:00 December 31, Previous Year"] COMMENTED_BY "Used actual Jan 1 elevation" < "ElevationToStorage"( % "Mead", "GetMeadRefElev"(  ) ) )
 THEN
  1.00000000
 ELSE
  0.00000000
 ENDIF;

    END
    UUID "{828cc339-ad8a-4edb-a784-2cd96163bca1}";;

    RULE                 "Upper Elevation Balancing Tier April thru Sept";
    DESCRIPTION          "This rule fires in April through September and makes any required adjustments to Powell's release if Powell began the year in the Upper Elevation Balancing Tier. The decision to switch to the EQ Tier or to increase the release for balancing is based on the April EOWY forecasts. Meaning, the decision made in April stays for the rest of the water year.";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT ( @"t" <= @"24:00:00 September 30, Current Year" AND @"t" >= @"24:00:00 April 30, Current Year" ) AND IsNaN $ "Coordinated Operation.UpperLevelBalancingFlag" [] AND NOT IsNaN "Powell.Storage" [] AND NOT "SpikeMadeThisMonth"(  );
    NOTES                "";
    BEGIN

      $ "Powell.Outflow" [] := IF ( "InUpperElevationBalancingTier_BORG"(  ) )
 THEN
  IF ( ( NOT "EqualizationConditionsMet_BORG"(  ) AND IsNaN $ "Coordinated Operation.EQTrumpUpperLevelBalancingFlag" [@"t - 1"] ) COMMENTED_BY "If EQ Trumps in April, release for EQ for the rest of the water year - go to ELSE" )
  THEN
   IF ( $ "EqualizationData.ForecastEOWYSMead" [@"24:00:00 April 30, Current Year"] COMMENTED_BY "If EQ doesn't trump, check April EOWY forecasts for Mead & Powell to see if switch from 823 kaf to Balancing" < "ElevationToStorage"( % "Mead", $ "Coordinated Operation.Hybrid_MeadMinBalancingElevation" [] ) AND $ "EqualizationData.ForecastEOWYSPowell" [@"24:00:00 April 30, Current Year"] > "ElevationToStorage"( % "Powell", $ "Coordinated Operation.Hybrid_PowellUpperTierElevation" [] ) OR $ "Mead.Storage" [@"24:00:00 December 31, Previous Year"] COMMENTED_BY "Use actual Jan 1 elevation" < "ElevationToStorage"( % "Mead", $ "Coordinated Operation.Hybrid_MeadMinBalancingElevation" [] ) )
   THEN
    IF ( $ "Mead.Storage" [@"24:00:00 December 31, Previous Year"] COMMENTED_BY "Use actual Jan 1 elevation" < "ElevationToStorage"( % "Mead", $ "Coordinated Operation.Hybrid_MeadMinBalancingElevation" [] ) )
    THEN
     "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "ComputePowellReleaseBalancing_OG"( "ConvertPowellReleaseBalancing"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ), "700", "900" ) ), $ "Powell.Storage" [@"t - 1"], @"t" ) COMMENTED_BY "If Mead began the year less than 1075, release with 700 kaf minimum"
    ELSE
     "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "ComputePowellReleaseBalancing_OG"( "ConvertPowellReleaseBalancing"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ), "823", "900" ) ), $ "Powell.Storage" [@"t - 1"], @"t" ) COMMENTED_BY "If Mead is above 1075 at beginning of year but below at April EOWY forecast, release with 823 kaf minimum."
    ENDIF COMMENTED_BY "Release for Balancing if 1) Powell is in the correct elevation tier 2) EQ conditions are not met 3) EQ has not yet trumped 4) Mead is less than 1075 trigger"
   ENDIF
  ELSE
   "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "ComputePowellRelease"( "CheckEqualizationRelease_Mead1105_BORG"( "ConvertPowellRelease"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ) ) COMMENTED_BY "Constrain EQ Release to bring Mead to 1105 or Powell 20 ft below the EQ Line." ) ), $ "Powell.Storage" [@"t - 1"], @"t" ) COMMENTED_BY "If Mead below 1105 then EQ release must 1) bring Mead to 1105 2) take Powell 20 ft below the EQ Line or 3) equalize. Whatever occurs first. " COMMENTED_BY "EQ trumps Upper Elevation Balancing if EQ conditions are met OR EQ trumped last month"
  ENDIF
 ENDIF;

      $ "Coordinated Operation.UpperLevelBalancingFlag" [] := IF ( "InUpperElevationBalancingTier_BORG"(  ) AND NOT "EqualizationConditionsMet_BORG"(  ) AND IsNaN $ "Coordinated Operation.EQTrumpUpperLevelBalancingFlag" [@"t - 1"] AND ( $ "EqualizationData.ForecastEOWYSMead" [@"24:00:00 April 30, Current Year"] COMMENTED_BY "Use April EOWY forecast for Mead & Powell" < "ElevationToStorage"( % "Mead", $ "Coordinated Operation.Hybrid_MeadMinBalancingElevation" [] ) AND $ "EqualizationData.ForecastEOWYSPowell" [@"24:00:00 April 30, Current Year"] > "ElevationToStorage"( % "Powell", $ "Coordinated Operation.Hybrid_PowellUpperTierElevation" [] ) OR $ "Mead.Storage" [@"24:00:00 December 31, Previous Year"] COMMENTED_BY "Use actual Jan 1 elevation" < "ElevationToStorage"( % "Mead", $ "Coordinated Operation.Hybrid_MeadMinBalancingElevation" [] ) ) )
 THEN
  1.00000000
 ELSE
  0.00000000
 ENDIF;

      $ "Coordinated Operation.EQTrumpUpperLevelBalancingFlag" [] := IF ( "InUpperElevationBalancingTier_BORG"(  ) AND ( "EqualizationConditionsMet_BORG"(  ) OR NOT IsNaN $ "Coordinated Operation.EQTrumpUpperLevelBalancingFlag" [@"t - 1"] ) )
 THEN
  1.00000000
 ENDIF;

      $ "Coordinated Operation.EQTrumpUpperLevelBalancing1105GovFlag" [] := IF ( "InUpperElevationBalancingTier_BORG"(  ) AND ( "EqualizationConditionsMet_BORG"(  ) OR NOT IsNaN $ "Coordinated Operation.EQTrumpUpperLevelBalancingFlag" [@"t - 1"] ) AND $ "EqualizationData.ForecastEOWYSMead" [@"t"] COMMENTED_BY "Use moving EOWY forecast here for Mead" < "ElevationToStorage"( % "Mead", $ "Coordinated Operation.MeadProtectionElevation" [] ) )
 THEN
  1.00000000
 ENDIF;

    DESCRIPTION          "If in September, and it's a year that switched to EQ in April, then see if we were able to fully <br>equalize.  If not, then set the carryover equalization flag and volume.";
      IF_STATEMENT ("InUpperElevationBalancingTier_BORG"(  ) AND @"t" == @"24:00:00 September Max DayOfMonth, Current Year" AND NOT ( NOT "EqualizationConditionsMet_BORG"(  ) AND IsNaN $ "Coordinated Operation.EQTrumpUpperLevelBalancingFlag" [@"t - 1"] )) THEN
            WITH_STATEMENT (NUMERIC remainingWYRel = "CheckEqualizationRelease_Mead1105_BORG"( "ConvertPowellRelease"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ) ) + "ForecastPowellRelease"(  )) DO
            WITH_STATEMENT (NUMERIC powellRel = "FlowToVolume"( "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "ComputePowellRelease"( "CheckEqualizationRelease_Mead1105_BORG"( "ConvertPowellRelease"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ) ) ) ), $ "Powell.Storage" [@"t - 1"], @"t" ), @"t" )) DO
            IF_STATEMENT (( "Floor"( remainingWYRel - powellRel, 100.00000000 "acre-ft" ) > 0.00000000 "acre-ft" ) COMMENTED_BY "Round the difference down to the nearest 100 acre-ft to keep from setting this when there are only minor differences between the two volume") THEN
            $ "EqualizationData.CarryoverEQFlag" [] := 1.00000000;

            $ "EqualizationData.CarryoverEQVolume" [] := remainingWYRel - powellRel;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{9fda038e-62c1-47ec-9f3f-fe939ae9a440}";;

    RULE                 "Upper Elevation Balancing Tier April thru Sept_BORG";
    DESCRIPTION          "This rule fires in April through September and makes any required adjustments to Powell's release if Powell began the year in the Upper Elevation Balancing Tier. The decision to switch to the EQ Tier or to increase the release for balancing is based on the April EOWY forecasts. Meaning, the decision made in April stays for the rest of the water year.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( @"t" <= @"24:00:00 September 30, Current Year" AND @"t" >= @"24:00:00 April 30, Current Year" ) AND IsNaN $ "Coordinated Operation.UpperLevelBalancingFlag" [] AND NOT IsNaN "Powell.Storage" [] AND NOT "SpikeMadeThisMonth"(  );
  NAMES_COLOR  "#5500ff";
    NOTES                "";
    BEGIN

      BREAKPOINT BEFORE_EXEC TRUE;
      $ "Powell.Outflow" [] := IF ( $ "Powell Decision Variables.PowellReleaseTier" [@"24:00:00 December 31, Current Year"] == 1.00000000 AND "CheckPowellBalancing"(  ) == 1.00000000 )
 THEN
  IF ( ( NOT "EqualizationConditionsMet_BORG"(  ) AND IsNaN $ "Coordinated Operation.EQTrumpUpperLevelBalancingFlag" [@"t - 1"] ) COMMENTED_BY "If EQ Trumps in April, release for EQ for the rest of the water year - go to ELSE" )
  THEN
   IF ( $ "EqualizationData.ForecastEOWYSMead" [@"24:00:00 April 30, Current Year"] COMMENTED_BY "If EQ doesn't trump, check April EOWY forecasts for Mead & Powell to see if switch from primary rel <br>vol to Balancing <br>" < "ElevationToStorage"( % "Mead", "GetMeadRefElev"(  ) ) AND $ "EqualizationData.ForecastEOWYSPowell" [@"24:00:00 April 30, Current Year"] > "ElevationToStorage"( % "Powell", $ "Powell Decision Variables.PowellUpperTierElevation" [] ) OR $ "Mead.Storage" [@"24:00:00 December 31, Previous Year"] COMMENTED_BY "Use actual Jan 1 elevation" < "ElevationToStorage"( % "Mead", "GetMeadRefElev"(  ) ) )
   THEN
    IF ( $ "Mead.Storage" [@"24:00:00 December 31, Previous Year"] COMMENTED_BY "Use actual Jan 1 elevation" < "ElevationToStorage"( % "Mead", "GetMeadRefElev"(  ) ) )
    THEN
     "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "ComputePowellReleaseBalancing_BORG"( "ConvertPowellReleaseBalancing"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ), $ "Powell Decision Variables.PowellReleaseTier" [@"24:00:00 December Max DayOfMonth, Current Year"] ) ), $ "Powell.Storage" [@"t - 1"], @"t" ) COMMENTED_BY "If Mead began the year less than mead ref elev, balance w/in range associated <br>w/ range number <br>"
    ELSE
     "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "ComputePowellReleaseBalancing_BORG_UEBTAprilSwitch"( "ConvertPowellReleaseBalancing"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ), $ "Powell Decision Variables.PowellReleaseTier" [@"24:00:00 December Max DayOfMonth, Current Year"] ) ), $ "Powell.Storage" [@"t - 1"], @"t" ) COMMENTED_BY "If Mead is above ref elev at beginning of year but below at April EOWY forecast, release with primary <br>rel vol minimum. <br>"
    ENDIF COMMENTED_BY "Release for Balancing if 1) Powell is in the correct elevation tier 2) EQ conditions are not met 3) EQ has <br>not yet trumped 4) Mead is less than mead ref elev trigger <br>"
   ENDIF
  ELSE
   "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "ComputePowellRelease_BORG"( "CheckEqualizationRelease_Mead1105_BORG"( "ConvertPowellRelease"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ) ) COMMENTED_BY "Constrain EQ Release to bring Mead to 1105 or Powell 20 ft below the EQ Line." ) ), $ "Powell.Storage" [@"t - 1"], @"t" ) COMMENTED_BY "If Mead below 1105 then EQ release must 1) bring Mead to 1105 2) take Powell 20 ft below the EQ Line or 3) equalize. Whatever occurs first. " COMMENTED_BY "EQ trumps Upper Elevation Balancing if EQ conditions are met OR EQ trumped last month"
  ENDIF
 ENDIF;

      BREAKPOINT BEFORE_EXEC FALSE;
      $ "Coordinated Operation.UpperLevelBalancingFlag" [] := IF ( $ "Powell Decision Variables.PowellReleaseTier" [@"24:00:00 December 31, Current Year"] == 1.00000000 AND NOT "EqualizationConditionsMet_BORG"(  ) AND IsNaN $ "Coordinated Operation.EQTrumpUpperLevelBalancingFlag" [@"t - 1"] AND ( $ "EqualizationData.ForecastEOWYSMead" [@"24:00:00 April 30, Current Year"] COMMENTED_BY "Use April EOWY forecast for Mead & Powell" < "ElevationToStorage"( % "Mead", "GetMeadRefElev"(  ) ) AND $ "EqualizationData.ForecastEOWYSPowell" [@"24:00:00 April 30, Current Year"] > "ElevationToStorage"( % "Powell", $ "Powell Decision Variables.PowellUpperTierElevation" [] ) OR $ "Mead.Storage" [@"24:00:00 December 31, Previous Year"] COMMENTED_BY "Use actual Jan 1 elevation" < "ElevationToStorage"( % "Mead", "GetMeadRefElev"(  ) ) ) )
 THEN
  1.00000000
 ELSE
  0.00000000
 ENDIF;

      $ "Coordinated Operation.EQTrumpUpperLevelBalancingFlag" [] := IF ( $ "Powell Decision Variables.PowellReleaseTier" [@"24:00:00 December 31, Current Year"] == 1.00000000 AND ( "EqualizationConditionsMet_BORG"(  ) OR NOT IsNaN $ "Coordinated Operation.EQTrumpUpperLevelBalancingFlag" [@"t - 1"] ) )
 THEN
  1.00000000
 ENDIF;

      $ "Coordinated Operation.EQTrumpUpperLevelBalancing1105GovFlag" [] := IF ( $ "Powell Decision Variables.PowellReleaseTier" [@"24:00:00 December 31, Current Year"] == 1.00000000 AND ( "EqualizationConditionsMet_BORG"(  ) OR NOT IsNaN $ "Coordinated Operation.EQTrumpUpperLevelBalancingFlag" [@"t - 1"] ) AND $ "EqualizationData.ForecastEOWYSMead" [@"t"] COMMENTED_BY "Use moving EOWY forecast here for Mead" < "ElevationToStorage"( % "Mead", $ "Coordinated Operation.MeadProtectionElevation" [] ) )
 THEN
  1.00000000
 ENDIF;

    DESCRIPTION          "If in September, and it's a year that switched to EQ in April, then see if we were able to fully <br>equalize.  If not, then set the carryover equalization flag and volume.";
      IF_STATEMENT ($ "Powell Decision Variables.PowellReleaseTier" [@"24:00:00 December 31, Current Year"] == 1.00000000 AND @"t" == @"24:00:00 September Max DayOfMonth, Current Year" AND NOT ( NOT "EqualizationConditionsMet_BORG"(  ) AND IsNaN $ "Coordinated Operation.EQTrumpUpperLevelBalancingFlag" [@"t - 1"] )) THEN
            WITH_STATEMENT (NUMERIC remainingWYRel = "CheckEqualizationRelease_Mead1105_BORG"( "ConvertPowellRelease"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ) ) + "ForecastPowellRelease"(  )) DO
            WITH_STATEMENT (NUMERIC powellRel = "FlowToVolume"( "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "ComputePowellRelease_BORG"( "CheckEqualizationRelease_Mead1105_BORG"( "ConvertPowellRelease"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ) ) ) ), $ "Powell.Storage" [@"t - 1"], @"t" ), @"t" )) DO
            IF_STATEMENT (( "Floor"( remainingWYRel - powellRel, 100.00000000 "acre-ft" ) > 0.00000000 "acre-ft" ) COMMENTED_BY "Round the difference down to the nearest 100 acre-ft to keep from setting this when there are only minor differences between the two volume") THEN
            $ "EqualizationData.CarryoverEQFlag" [] := 1.00000000;

            $ "EqualizationData.CarryoverEQVolume" [] := remainingWYRel - powellRel;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{af0350a2-a8e1-4e07-be20-ac8ab7140aed}";;

    RULE                 "Mid Elevation Release Tier";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT IsNaN $ "Coordinated Operation.ReducedReleaseFlag" [] AND NOT IsNaN "Powell.Storage" [] AND NOT "SpikeMadeThisMonth"(  );
    NOTES                "";
    BEGIN

      $ "Powell.Outflow" [] := IF ( @"t" <= @"September" )
 THEN
  IF ( "InMidElevationReleaseTier"(  ) AND $ "Mead.Storage" [@"24:00:00 December 31, Previous Year"] >= "ElevationToStorage"( % "Mead", $ "Coordinated Operation.Hybrid_Mead823Trigger" [] ) )
  THEN
   "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "PowellReducedRelforCurrentMonth"( "748" ) ), $ "Powell.Storage" [@"t - 1"], @"t" )
  ENDIF COMMENTED_BY "Compare Powell and Mead previous EOCYS instead of forecasted EOWYS"
 ELSE
  IF ( $ "Powell.Pool Elevation" [@"24:00:00 September 30, Current Year"] < $ "Coordinated Operation.Hybrid_PowellUpperTierElevation" [] AND $ "Powell.Pool Elevation" [@"24:00:00 September 30, Current Year"] >= $ "Coordinated Operation.Hybrid_PowellLowerTierElevation" [] AND $ "Mead.Pool Elevation" [@"24:00:00 September 30, Current Year"] >= $ "Coordinated Operation.Hybrid_Mead823Trigger" [] )
  THEN
   "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "PowellReducedRelforCurrentMonth"( "748" ) ), $ "Powell.Storage" [@"t - 1"], @"t" )
  ENDIF
 ENDIF;

      $ "Coordinated Operation.ReducedReleaseFlag" [] := IF ( @"t" <= @"September" )
 THEN
  IF ( "InMidElevationReleaseTier"(  ) AND $ "Mead.Storage" [@"24:00:00 December 31, Previous Year"] >= "ElevationToStorage"( % "Mead", $ "Coordinated Operation.Hybrid_Mead823Trigger" [] ) )
  THEN
   1.00000000
  ELSE
   0.00000000
  ENDIF
 ELSE
  IF ( $ "Powell.Pool Elevation" [@"24:00:00 September 30, Current Year"] < $ "Coordinated Operation.Hybrid_PowellUpperTierElevation" [] AND $ "Powell.Pool Elevation" [@"24:00:00 September 30, Current Year"] >= $ "Coordinated Operation.Hybrid_PowellLowerTierElevation" [] AND $ "Mead.Pool Elevation" [@"24:00:00 September 30, Current Year"] >= $ "Coordinated Operation.Hybrid_Mead823Trigger" [] )
  THEN
   1.00000000
  ELSE
   0.00000000
  ENDIF
 ENDIF;

    END
    UUID "{e8371525-a3d8-4c89-af01-5d91ff2ed75b}";;

    RULE                 "Powell Limit Outflow Rule1";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" >= @"24:00:00 July Max DayOfMonth, Current Year" AND NOT "SpikeMadeThisMonth"(  );
    NOTES                "";
    BEGIN

      $ "Powell.Outflow" [] := IF ( "PowellComputeStorageAtGivenOutflow"( 25000.00000000 "cfs" ) < 23822000.00000000 "acre-feet" AND $ "Powell.Outflow" [] > 25000.00000000 "cfs" )
 THEN
  "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( 25000.00000000 "cfs" ), $ "Powell.Storage" [@"t - 1"], @"t" )
 ENDIF;

    END
    UUID "{d9dc7598-fb19-4620-b4ce-efd2e3efe3db}";;

    RULE                 "UEBT Lake Powell Release Volume";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" <= @"24:00:00 September 30, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND NOT IsNaN "Powell.Storage" [] AND NOT "SpikeMadeThisMonth"(  ) AND $ "Powell Decision Variables.PowellReleaseTier" [@"24:00:00 December Max DayOfMonth, Current Year"] == 1.00000000 AND IsNaN $ "PowellOperation.SmoothJulyOps" [];
  NAMES_COLOR  "#5500ff";
    NOTES                "";
    BEGIN

      $ "Powell.Outflow" [] := IF ( @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" AND @"t" >= @"24:00:00 January Max DayOfMonth, Current Year" )
 THEN
  "Max"( "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellRunoffSeasonStorage"(  ), $ "Powell.Storage" [@"t - 1"], @"t" ), IF ( "CheckPowellBalancing"(  ) == 0.00000000 )
  THEN
   "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "PowellReducedRelforCurrentMonth_BORG_PrimaryRel"(  ) ), $ "Powell.Storage" [@"t - 1"], @"t" )
  ENDIF
  ELSEIF_COND ( "CheckPowellBalancing"(  ) == 1.00000000 AND $ "Mead.Pool Elevation" [@"24:00:00 December 31, Previous Year"] >= "GetMeadRefElev"(  ) )
  ELSEIF_CLAUSE ( "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "PowellReducedRelforCurrentMonth_BORG_PrimaryRel"(  ) ), $ "Powell.Storage" [@"t - 1"], @"t" ) )
  END_ELSEIF
  ELSEIF_COND ( "CheckPowellBalancing"(  ) == 1.00000000 AND $ "Mead.Pool Elevation" [@"24:00:00 December 31, Previous Year"] < "GetMeadRefElev"(  ) )
  ELSEIF_CLAUSE ( "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "ComputePowellReleaseBalancing_BORG"( "ConvertPowellReleaseBalancing"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ), $ "Powell Decision Variables.PowellReleaseTier" [@"24:00:00 December Max DayOfMonth, Current Year"] ) ), $ "Powell.Storage" [@"t - 1"], @"t" ) )
  END_ELSEIF )
 ELSE
  "Max"( "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellFallSeasonStorage_BORG"(  ), $ "Powell.Storage" [@"t - 1"], @"t" ), IF ( "CheckPowellBalancing"(  ) == 0.00000000 )
  THEN
   "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "PowellReducedRelforCurrentMonth_BORG_PrimaryRel"(  ) ), $ "Powell.Storage" [@"t - 1"], @"t" )
  ENDIF
  ELSEIF_COND ( "CheckPowellBalancing"(  ) == 1.00000000 AND $ "Mead.Pool Elevation" [@"24:00:00 December 31, Previous Year"] >= "GetMeadRefElev"(  ) )
  ELSEIF_CLAUSE ( "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "PowellReducedRelforCurrentMonth_BORG_PrimaryRel"(  ) ), $ "Powell.Storage" [@"t - 1"], @"t" ) )
  END_ELSEIF
  ELSEIF_COND ( "CheckPowellBalancing"(  ) == 1.00000000 AND $ "Mead.Pool Elevation" [@"24:00:00 December 31, Previous Year"] < "GetMeadRefElev"(  ) )
  ELSEIF_CLAUSE ( "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "ComputePowellReleaseBalancing_BORG"( "ConvertPowellReleaseBalancing"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ), $ "Powell Decision Variables.PowellReleaseTier" [@"24:00:00 December Max DayOfMonth, Current Year"] ) ), $ "Powell.Storage" [@"t - 1"], @"t" ) )
  END_ELSEIF )
 ENDIF COMMENTED_BY "Compare Powell and Mead previous EOCYS instead of forecasted EOWYS";

    END
    UUID "{3c29235b-7872-4ff6-9e13-bcd1c94f6b8f}";;

    RULE                 "Generic Lake Powell Release Volume";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" <= @"24:00:00 September 30, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND NOT IsNaN "Powell.Storage" [] AND NOT "SpikeMadeThisMonth"(  ) AND $ "Powell Decision Variables.PowellReleaseTier" [@"24:00:00 December Max DayOfMonth, Current Year"] > 0.00000000 AND $ "Powell Decision Variables.PowellReleaseTier" [@"24:00:00 December Max DayOfMonth, Current Year"] < 13.00000000 AND IsNaN $ "PowellOperation.SmoothJulyOps" [];
  NAMES_COLOR  "#5500ff";
    NOTES                "";
    BEGIN

      BREAKPOINT BEFORE_EXEC TRUE;
      $ "Powell.Outflow" [] := IF ( "CheckPowellBalancing"(  ) == 0.00000000 )
 THEN
  "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "PowellReducedRelforCurrentMonth_BORG_PrimaryRel"(  ) ), $ "Powell.Storage" [@"t - 1"], @"t" )
 ENDIF
 ELSEIF_COND ( "CheckPowellBalancing"(  ) == 1.00000000 AND $ "Mead.Pool Elevation" [@"24:00:00 December 31, Previous Year"] >= "GetMeadRefElev"(  ) )
 ELSEIF_CLAUSE ( "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "PowellReducedRelforCurrentMonth_BORG_PrimaryRel"(  ) ), $ "Powell.Storage" [@"t - 1"], @"t" ) )
 END_ELSEIF
 ELSEIF_COND ( "CheckPowellBalancing"(  ) == 1.00000000 AND $ "Mead.Pool Elevation" [@"24:00:00 December 31, Previous Year"] < "GetMeadRefElev"(  ) )
 ELSEIF_CLAUSE ( "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "ComputePowellReleaseBalancing_BORG"( "ConvertPowellReleaseBalancing"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ), $ "Powell Decision Variables.PowellReleaseTier" [@"24:00:00 December Max DayOfMonth, Current Year"] ) ), $ "Powell.Storage" [@"t - 1"], @"t" ) )
 END_ELSEIF COMMENTED_BY "Compare Powell and Mead previous EOCYS instead of forecasted EOWYS";

    END
    UUID "{73440598-7c35-4d6a-906e-bb70b46ae52d}";;

    RULE                 "Bottom Tier Lake Powell Release Volume";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" <= @"24:00:00 September 30, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND NOT IsNaN "Powell.Storage" [] AND NOT "SpikeMadeThisMonth"(  ) AND $ "Powell Decision Variables.PowellReleaseTier" [@"24:00:00 December Max DayOfMonth, Current Year"] == 13.00000000;
  NAMES_COLOR  "#5500ff";
    NOTES                "";
    BEGIN

      BREAKPOINT BEFORE_EXEC FALSE;
      $ "Powell.Outflow" [] := "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "ComputePowellReleaseBalancing_BORG"( "ConvertPowellReleaseBalancing"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ), $ "Powell Decision Variables.PowellReleaseTier" [@"24:00:00 December Max DayOfMonth, Current Year"] ) ), $ "Powell.Storage" [@"t - 1"], @"t" ) COMMENTED_BY "Compare Powell and Mead previous EOCYS instead of forecasted EOWYS";

    END
    UUID "{681fcc20-6e9a-46e0-a249-84aa231d5d85}";;

    RULE                 "Lower Elevation Balancing Tier";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" <= @"24:00:00 September 30, Current Year" AND IsNaN $ "Coordinated Operation.LowerLevelBalancingFlag" [] AND NOT IsNaN "Powell.Storage" [] AND NOT "SpikeMadeThisMonth"(  );
    NOTES                "";
    BEGIN

      $ "Powell.Outflow" [] := IF ( "InLowerElevationBalancingTier"(  ) )
 THEN
  "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "ComputePowellReleaseBalancing_BORG"( "ConvertPowellReleaseBalancing"( "ComputeEqualizationReleaseList"( $ "EqualizationData.ForecastEOWYSPowell" [], $ "EqualizationData.ForecastEOWYSMead" [] ) ) COMMENTED_BY "No additional check required because balancing releases made until dead pool", "700" COMMENTED_BY "min release", "950" COMMENTED_BY "max release" ) ), $ "Powell.Storage" [@"t - 1"], @"t" )
 ENDIF COMMENTED_BY "Compare Powell and Mead previous EOCYS instead of forecasted EOWYS";

      $ "Coordinated Operation.LowerLevelBalancingFlag" [] := IF ( "InLowerElevationBalancingTier"(  ) )
 THEN
  1.00000000
 ELSE
  0.00000000
 ENDIF;

    END
    UUID "{e437b20b-edeb-42fb-a8fc-781c60b1310d}";;

    RULE                 "Meet Powell Min Objective Release_BORG";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "EqualizationData.MinObjRelFlag" [] AND NOT IsNaN $ "Powell.Outflow" [] AND NOT "SpikeMadeThisMonth"(  );
  NAMES_COLOR  "#5500ff";
    NOTES                "";
    BEGIN

      "Powell.Outflow" [] := IF ( $ "Powell.Outflow" [] < "PowellMinObjRelforCurrentMonth_BORG"(  ) )
 THEN
  "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "PowellMinObjRelforCurrentMonth_BORG"(  ) ), $ "Powell.Storage" [@"t - 1"], @"t" )
 ENDIF;

      $ "EqualizationData.MinObjRelFlag" [] := IF ( $ "Powell.Outflow" [] < "PowellMinObjRelforCurrentMonth_BORG"(  ) )
 THEN
  1.00000000
 ELSE
  0.00000000
 ENDIF;

    END
    UUID "{138d5a94-8b74-4268-87ef-0ec571a5c499}";;

    RULE                 "Meet Powell Min Objective Release";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT IsNaN $ "EqualizationData.MinObjRelFlag" [] AND NOT IsNaN $ "Powell.Outflow" [] AND NOT "SpikeMadeThisMonth"(  );
    NOTES                "";
    BEGIN

      "Powell.Outflow" [] := IF ( $ "Powell.Outflow" [] < "PowellMinObjRelforCurrentMonth_BORG"(  ) )
 THEN
  "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "PowellMinObjRelforCurrentMonth_OG"(  ) ), $ "Powell.Storage" [@"t - 1"], @"t" )
 ENDIF;

      $ "EqualizationData.MinObjRelFlag" [] := IF ( $ "Powell.Outflow" [] < "PowellMinObjRelforCurrentMonth_OG"(  ) )
 THEN
  1.00000000
 ELSE
  0.00000000
 ENDIF;

    END
    UUID "{07771a9f-defb-4c58-a66b-f2ddd732824e}";;

    RULE                 "Powell Limit Outflow Rule";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" >= @"24:00:00 July Max DayOfMonth, Current Year" AND NOT "SpikeMadeThisMonth"(  );
    NOTES                "";
    BEGIN

      $ "Powell.Outflow" [] := IF ( "PowellComputeStorageAtGivenOutflow"( 25000.00000000 "cfs" ) < 23822000.00000000 "acre-feet" AND $ "Powell.Outflow" [] > 25000.00000000 "cfs" )
 THEN
  "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( 25000.00000000 "cfs" ), $ "Powell.Storage" [@"t - 1"], @"t" )
 ENDIF;

    END
    UUID "{29cb0169-529c-4306-ad4c-c570f27b4bd6}";;

    RULE                 "Powell Smooth July Operation Rule";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 July Max DayOfMonth, Current Year" AND NOT "SpikeMadeThisMonth"(  );
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "Powell.Storage" [] > 23000000.00000000 "acre-feet" AND $ "Powell.Outflow" [] < 1000000.00000000 "acre-feet/month") THEN
            $ "Powell.Outflow" [] := "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( 1000000.00000000 "acre-feet/month" ), $ "Powell.Storage" [@"t - 1"], @"t" );

            $ "PowellOperation.SmoothJulyOps" [] := 1.00000000;

      END_IF_STATEMENT;

    END
    UUID "{50d7b9d1-c2d1-4eab-b478-2a38fc937e0a}";;

    RULE                 "Powell Spike Flow Rule";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" <= @"24:00:00 July 31, Current Year" AND IsNaN $ "Powell Spike Flow Data.Spike Flow Flag" [] AND NOT IsNaN "Powell.Storage" [] AND NOT "SpikeAlreadyMade"(  );
    NOTES                "";
    BEGIN

      $ "Powell.Bypass" [] := IF ( "CheckSpikeFlowCriteria"(  ) )
 THEN
  "VolumeToFlow"( $ "Powell Spike Flow Data.Additional Bypass Volume" [0.00000000, 0.00000000], @"t" )
 ENDIF;

      $ "Powell.Outflow" [] := IF ( "CheckSpikeFlowCriteria"(  ) )
 THEN
  IF ( $ "Powell.Spill" [] > 0.00000000 "acre-feet/month" )
  THEN
   "Max"( $ "Powell.Outflow" [], "VolumeToFlow"( $ "Powell Spike Flow Data.Additional Bypass Volume" [0.00000000, 0.00000000], @"t" ) )
  ELSE
   "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellComputeStorageAtGivenOutflow"( "PowellMinSpikeFlowOutflow"(  ) + "VolumeToFlow"( $ "Powell Spike Flow Data.Additional Bypass Volume" [0.00000000, 0.00000000], @"t" ) ), $ "Powell.Storage" [@"t - 1"], @"t" )
  ENDIF
 ENDIF;

      $ "Powell Spike Flow Data.Spike Flow Flag" [] := IF ( "CheckSpikeFlowCriteria"(  ) )
 THEN
  1.00000000
 ELSE
  0.00000000
 ENDIF;

    END
    UUID "{68b163ac-fd7a-484f-9cdc-3f72943b02ec}";;

    RULE                 "Powell Operations Rule";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "Powell.Outflow" [] := IF ( @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" AND @"t" >= @"24:00:00 January Max DayOfMonth, Current Year" )
 THEN
  "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellRunoffSeasonStorage"(  ), $ "Powell.Storage" [@"t - 1"], @"t" )
 ELSE
  "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellFallSeasonStorage"(  ), $ "Powell.Storage" [@"t - 1"], @"t" )
 ENDIF;

    END
    UUID "{8ac50cfa-21fa-4539-ac7c-32f2168cd762}";;

    RULE                 "Powell Operations Rule_BORG";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
  NAMES_COLOR  "#5500ff";
    NOTES                "";
    BEGIN

      $ "Powell.Outflow" [] := IF ( @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" AND @"t" >= @"24:00:00 January Max DayOfMonth, Current Year" )
 THEN
  "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellRunoffSeasonStorage"(  ), $ "Powell.Storage" [@"t - 1"], @"t" )
 ELSE
  "SolveOutflow"( % "Powell", $ "Powell.Inflow" [], "PowellFallSeasonStorage_BORG"(  ), $ "Powell.Storage" [@"t - 1"], @"t" )
 ENDIF;

    END
    UUID "{3ceeb3bd-40a3-496d-ba23-5b329d9ee3bf}";;

    RULE                 "Estimate Upper Basin Storage";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "EqualizationData.AvailableWater" [] AND @"t" <= @"24:00:00 September 30, Current Year";
    NOTES                "";
    BEGIN

      $ "EqualizationData.AvailableWater" [] := "SumUpperBasinStorage"(  );

    END
    UUID "{4d6d0e9a-1c69-4a5e-9dce-f062b8ecdab6}";;

    RULE                 "EOWYStorageForecasts";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "EqualizationData.ForecastEOWYSPowell" [];
    NOTES                "";
    BEGIN

      BREAKPOINT BEFORE_EXEC FALSE;
      $ "EqualizationData.ForecastEOWYSPowell" [] := IF ( @"t" >= @"October" )
 THEN
  0.00000000 "acre-ft"
 ELSE
  "EOWYStorage"( % "Powell", "ForecastPowellRelease"(  ), "ForecastMeadRelease"(  ) )
 ENDIF;

      BREAKPOINT BEFORE_EXEC FALSE;
      $ "EqualizationData.ForecastEOWYSMead" [] := IF ( @"t" >= @"October" )
 THEN
  0.00000000 "acre-ft"
 ELSE
  "EOWYStorage"( % "Mead", "ForecastPowellRelease"(  ), "ForecastMeadRelease"(  ) )
 ENDIF;

    END
    UUID "{11bbfc94-d8ca-4317-85a0-844b4f51571e}";;

    RULE                 "Powell Runoff Forecast";
    DESCRIPTION          "This rule was added to compute and store the forecasts for inflows into Lake Powell.  These computations<br>are done for Mead's inflow forecast, so we should clean that up eventually.<br><br>It assumes that the forecast error has been computed previously by the Powell Forecast Error rule <br>and stored on the data/slot  MeadFloodControlData.PowellForecastError";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" AND @"t" >= @"24:00:00 January Max DayOfMonth, Current Year";
    NOTES                "";
    BEGIN

      $ "PowellForecastData.Natural Inflow with Error" [] := $ "Qsum.Powell" [] - $ "MeadFloodControlData.PowellForecastError" [] * 1000000.00000000 "acre-feet";

      $ "PowellForecastData.Unreg Inflow with Error" [] := $ "Qsum.Powell" [] - $ "MeadFloodControlData.PowellForecastError" [] * 1000000.00000000 "acre-feet" - "UBDepletionsRange"( @"t", @"24:00:00 July Max DayOfMonth, Current Year" );

      $ "PowellForecastData.Reg Inflow with Error" [] := ( $ "Qsum.Powell" [] - $ "MeadFloodControlData.PowellForecastError" [] * 1000000.00000000 "acre-feet" ) - ( ( "UBDepletionsRange"( @"t", @"24:00:00 July Max DayOfMonth, Current Year" ) + "UBEffectiveStorage"(  ) ) * "Min"( 1.00000000, ( $ "Qsum.Powell" [] - $ "PowellForecastData.forecastError" [] COMMENTED_BY "same as MeadFloodControlData.PowellForecastError * 1 MAF" ) COMMENTED_BY "Natural Inflow w/error" / $ "HistoricalNaturalFlow.AboveLeesFerry_AvgHistMonth2JulyQSum" [] COMMENTED_BY "The historical avg. natural flow above Lees Ferry for the current month through July (Qsum)" ) );

    END
    UUID "{dda7e11d-342e-4128-8ff5-041e06ec6404}";;

    RULE                 "Powell Forecast Error";
    DESCRIPTION          "Brad Vickers, Wave Engineering Inc.<br>January, 1999<br><br>This rule checks to see if the PowellForecastError slot on the MeadFloodControlData object has been set, if it has not and the month is not June (because June has some special limits) then<br>the forecast error for Powell is computed with the ComputeForecastError function.  The first part of the IF statement in the rule limits June's computed forecast error to one half of <br>May's forecast error. This check was performed in the originall CRSS.  Ideally I believe there should be limits on every month to ensure that the forecast error is within the range of historical <br>forecast error.  This becomes a problem with the random component of how the forecast error is derived.  See the comments on the ComputeForecastError function for further information on<br>how the forecast error is computed. <br><br>NOTE the print statement in this rule.  this calls the resetRanDev function which rewinds the file of random numbers to the hydrology start date that is input<br>by the user on the MeadFloodControlData.HydrologyStartYear table slot.  This function is only called at the first of the model run.  It is used with a print statement because it has to be in a rule <br>rather than a function and there are no slots set with it.<br>";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT IsNaN $ "MeadFloodControlData.PowellForecastError" [];
    NOTES                "";
    BEGIN

      $ "MeadFloodControlData.PowellForecastError" [] := "ComputePowellForecastError"(  );

      $ "PowellForecastData.forecastError" [] := "ComputePowellForecastError"(  ) * 1000000.00000000 "acre-feet";

      $ "PowellForecastData.random" [] := "SetRandomDeviation"(  );

    END
    UUID "{5100323a-a899-4d93-b39f-099c26eb331c}";;

    RULE                 "Compute 70R Assurance Level Surplus Volume";
    DESCRIPTION          "This rule fires at the beginning of the year and sets the 70R surplus volume. This is the estimated end-of-year volume of water in excess of the system space requirement assuming a 70th percentile runoff, a 7.5 maf Lower Basin delivery, the Upper Basin scheduled use and the current Powell and Mead volumes. If this volume is greater than 0, a 70R or Quantified Surplus is declared in the Surplus Rules: 70R Assurance Level Surplus and 7 State Plan Level 1. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND IsNaN $ "Surplus.SurplusRelease" [];
    NOTES                "";
    BEGIN

      $ "Surplus.SurplusRelease" [] := ( ( $ "Powell.Storage" [@"t - 1"] + $ "Mead.Storage" [@"t - 1"] - "SurplusMaxStorage"(  ) ) - "SumPreviousYearICSCredits"(  ) COMMENTED_BY "Beginning total ICS balance is not included in 70R determination." ) * ( 1.00000000 + ( $ "Mead.Bank Storage Coefficient" [0.00000000, 0.00000000] + $ "Powell.Bank Storage Coefficient" [0.00000000, 0.00000000] ) / 2.00000000 ) + "ComputeInflowAtProbability"(  ) - "SumUBDemands"(  ) - "SumLBDemands"(  );

    END
    UUID "{9971673d-a0fb-4a78-a566-f3606f0c61a6}";;

    RULE                 "Compute 602a Storage";
    DESCRIPTION          "This rule fires once a year and sets the 602a storage. Although this solves for each year in the run duration, the value is only used after the Guidelines are in effect (after 2026 in the NA ruleset).";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND IsNaN $ "EqualizationData.value602a" [@"24:00:00 December 31, Current Year"];
    NOTES                "2019-01-15 - RAB: Edited description";
    BEGIN

      $ "EqualizationData.value602a" [@"24:00:00 December 31, Current Year"] := "602aStorage"(  );

    END
    UUID "{89af83a5-ed98-40c3-a234-2f4a380301ca}";;

    RULE                 "Set Lake Powell Release Tier";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
  NAMES_COLOR  "#5500ff";
    NOTES                "";
    BEGIN

      $ "Powell Decision Variables.PowellReleaseTier" [@"24:00:00 December Max DayOfMonth, Current Year"] := IF ( $ "Powell.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"] >= $ "Powell Decision Variables.Powell Equalization Line" [@"24:00:00 December Max DayOfMonth, Current Year"] )
 THEN
  0.00000000
 ELSE
  "TableLookupDefaultTol"( $ "Powell Decision Variables.Powell Full_End", 0.00000000, 1.00000000, $ "Powell.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"], @"24:00:00 January Max DayOfMonth, Current Year", FALSE )
 ENDIF;

    END
    UUID "{0f2bd1c0-60a4-468d-a07d-07255b58c548}";;

  END
  UUID "{a038968a-5fea-40e7-9c63-a83694aea9f8}";;

  POLICY_GROUP   "Shortage Rules";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Reduce Use for IG Shortage Conditions_OLD";
    DESCRIPTION          "EXECUTION CONSTRAINT: Only executes in January of each year, and only if it is a shortage condition, which is determined by the &quot;Set Shortage Tier&quot; rule. Will also execute only one time.<br><br>DESCRIPTION: Reduces each user that takes shortages under the Interim Guidelines depletion and diversion. The users are each &quot;water user&quot; on CAP, SNWP, and Mexico's aggregate diversion object. Reductions also account for any DSS takes, or ICS creation that might occur in the shortage year.<br><br>SLOTS SET: Depletion Requested and Diversion Requested for all water users on the SNWP, CAP, and Mexico aggregate diversion objects. Various flag slots are also set. ";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND $ "SystemConditions.LBShortageTier" [@"24:00:00 December Max DayOfMonth, Current Year"] != 0.00000000;
  NAMES_COLOR  "#000000";
    NOTES                "DEVELOPMENT NOTES<br>- 2019-07-23 - RAB: Re-wrote to only call each function once/loop. <br>- 20190620, JK: Removed the Arizona Priority 4 users from rule as per communication from Chuck which stated CAP will take all DCP Contributions/Shortage Reductions.  Associated fxns have been updated as well to no longer pro-rate CAP reductions as per priority 4 users.<br>- 20180109, RAB: Combined the three shortage rules (Step [1, 2, 3] Shortage for ICS) into this one rule. The only difference between the 3 rules was the number (1-3) passed to the `ComputeStepShortage[Diversion/Depletion]()` functions.<br>- ...<br>- ~2007, CSJ: Created rule.";
    BEGIN

      WITH_STATEMENT (NUMERIC shortageLevel = $ "SystemConditions.LBShortageTier" [@"24:00:00 December Max DayOfMonth, Current Year"]) DO
          DESCRIPTION          "Get the correct Shortage.Step X Shortage Flag slot as a string <br>";
      WITH_STATEMENT (STRING shortageSlot = "Step " CONCAT "IntegerToString"( shortageLevel ) CONCAT " Shortage Flag") DO
          DESCRIPTION          "Loop over all 12 months <br>";
      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
          DESCRIPTION          "Loop through CAP, SNWP, and Mexico <br>";
      FOREACH (STRING diversion IN { "CAP" , "SNWP" , "Mexico" }) DO
            WITH_STATEMENT (NUMERIC agg_site_depletion_shortage = "ComputeStepShortageDepletion"( diversion, shortageLevel, date )) DO
          DESCRIPTION          "CAP, SNWP, and Mexico might have multiple &quot;water user&quot; objects on them. If so, loop through all <br>them, and divy out the shortage volume proportionally <br>";
      FOREACH (STRING user IN "ListLBNormalWaterUsersByProvider"( diversion )) DO
            WITH_STATEMENT (OBJECT water_user = "GetObject"( diversion CONCAT "Diversion:" CONCAT user )) DO
            WITH_STATEMENT (NUMERIC water_user_shortage = agg_site_depletion_shortage * "LBUserToAggRatio"( diversion, user, "Depletion", date )) DO
            water_user & "Depletion Requested" [date] := water_user_shortage;

            water_user & "Diversion Requested" [date] := water_user_shortage * "CalcScheduleDepletionToDiversionRatio"( water_user, date );

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      ENDFOREACH;

      END_WITH_STATEMENT;

            diversion CONCAT "Schedule.ShortageScheduleFlag" [date] := 1.00000000;

            diversion CONCAT "Schedule.SurplusScheduleFlag" [date] := 0.00000000;

            IF_STATEMENT (date == @"24:00:00 December Max DayOfMonth, Current Year") THEN
            % "LBShort" & diversion CONCAT "SpecifiedShortage" [date] := "GetIGShortageVolume"( diversion, shortageLevel );

      END_IF_STATEMENT;

      ENDFOREACH;

            $ "Surplus.SurplusFlag" [date] := 0.00000000;

            $ "Shortage.ShortageFlag" [date] := 1.00000000;

            % "Shortage" & shortageSlot [date] := 1.00000000;

      ENDFOREACH;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{ee41a082-c9d7-4569-a4ea-cf77d4de6d20}";;

    RULE                 "Reduce Use for IG Shortage Conditions";
    DESCRIPTION          "EXECUTION CONSTRAINT: Only executes in January of each year, and only if it is a shortage condition, which is determined by the &quot;Set Shortage Tier&quot; rule. Will also execute only one time.<br><br>DESCRIPTION: Reduces each user that takes shortages under the Interim Guidelines depletion and diversion. The users are each &quot;water user&quot; on CAP, SNWP, and Mexico's aggregate diversion object. Reductions also account for any DSS takes, or ICS creation that might occur in the shortage year.<br><br>SLOTS SET: Depletion Requested and Diversion Requested for all water users on the SNWP, CAP, and Mexico aggregate diversion objects. Various flag slots are also set. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND $ "SystemConditions.LBShortageTier" [@"24:00:00 December Max DayOfMonth, Current Year"] != 0.00000000;
  NAMES_COLOR  "#5500ff";
    NOTES                "DEVELOPMENT NOTES<br>- 2019-07-23 - RAB: Re-wrote to only call each function once/loop. <br>- 20190620, JK: Removed the Arizona Priority 4 users from rule as per communication from Chuck which stated CAP will take all DCP Contributions/Shortage Reductions.  Associated fxns have been updated as well to no longer pro-rate CAP reductions as per priority 4 users.<br>- 20180109, RAB: Combined the three shortage rules (Step [1, 2, 3] Shortage for ICS) into this one rule. The only difference between the 3 rules was the number (1-3) passed to the `ComputeStepShortage[Diversion/Depletion]()` functions.<br>- ...<br>- ~2007, CSJ: Created rule.";
    BEGIN

      BREAKPOINT BEFORE_EXEC FALSE;
    DESCRIPTION          "Loop over all 12 months <br>";
      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            BREAKPOINT BEFORE_EXEC FALSE;
    DESCRIPTION          "Loop through CAP, SNWP, and Mexico <br>";
      FOREACH (STRING diversion IN { "CAP" , "SNWP" , "Mexico" , "IID" }) DO
            WITH_STATEMENT (NUMERIC agg_site_depletion_shortage = "ComputeStepShortageDepletion"( diversion, $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"], date )) DO
          DESCRIPTION          "CAP, SNWP, IID and Mexico might have multiple &quot;water user&quot; objects on them. If so, loop <br>through all them, and divy out the shortage volume proportionally  <br>";
      FOREACH (STRING user IN "ListLBNormalWaterUsersByProvider"( diversion )) DO
            WITH_STATEMENT (OBJECT water_user = "GetObject"( diversion CONCAT "Diversion:" CONCAT user )) DO
            WITH_STATEMENT (NUMERIC water_user_shortage = agg_site_depletion_shortage * "LBUserToAggRatio"( diversion, user, "Depletion", date )) DO
            water_user & "Depletion Requested" [date] := water_user_shortage;

            water_user & "Diversion Requested" [date] := water_user_shortage * "CalcScheduleDepletionToDiversionRatio"( water_user, date );

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      ENDFOREACH;

      END_WITH_STATEMENT;

            diversion CONCAT "Schedule.ShortageScheduleFlag" [date] := 1.00000000;

            diversion CONCAT "Schedule.SurplusScheduleFlag" [date] := 0.00000000;

            BREAKPOINT BEFORE_EXEC FALSE;
      IF_STATEMENT (date == @"24:00:00 December Max DayOfMonth, Current Year") THEN
            % "LBShort" & diversion CONCAT "SpecifiedShortage" [date] := "GetIGShortageVolume_BORG"( diversion, $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"], date );

      END_IF_STATEMENT;

      ENDFOREACH;

            $ "Surplus.SurplusFlag" [date] := 0.00000000;

            $ "Shortage.ShortageFlag" [date] := 1.00000000;

      ENDFOREACH;

    END
    UUID "{93931728-8add-4d4e-b5f5-1ab0d9e66f11}";;

    RULE                 "Set Shortage Tier_OLD";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND NOT "IsInput"( $ "SystemConditions.LBShortageTier", @"24:00:00 December Max DayOfMonth, Current Year" );
    NOTES                "";
    BEGIN

      $ "SystemConditions.LBShortageTier" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineShortageTier"(  );

    END
    UUID "{7d380e79-4580-440a-8d7b-85505a6d9b1f}";;

    RULE                 "Set Shortage Tier";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND NOT "IsInput"( $ "SystemConditions.LBShortageTier", @"24:00:00 December Max DayOfMonth, Current Year" );
  NAMES_COLOR  "#5500ff";
    NOTES                "";
    BEGIN

      $ "SystemConditions.LBShortageTier" [@"24:00:00 December Max DayOfMonth, Current Year"] := IF ( $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"] <= $ "Mead Decision Variables.From BorgRW_Flipped" [7.00000000, 0.00000000] )
 THEN
  "TableLookupDefaultTol"( $ "Mead Decision Variables.Full", 0.00000000, 1.00000000, $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"], @"24:00:00 January Max DayOfMonth, Current Year", FALSE )
 ELSE
  0.00000000
 ENDIF;

    END
    UUID "{aa4df8ea-79d0-43d7-badb-fb75a8593928}";;

  END
  UUID "{da3547a9-88e5-488a-a958-5f74e1d10bcb}";;

  POLICY_GROUP   "Surplus Rules";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "MWD and PVID Surplus Fallowing";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT ( NOT IsNaN $ "Surplus.SurplusRelease" [] AND ( ( ( NOT "NotSurplusYear"(  ) ) AND @"t" == @"January" ) AND $ "California ICS.PVID Fallow Amount" [@"24:00:00 December 31, Current Year"] > 0.00000000 "acre-ft" ) ) COMMENTED_BY ">:-)";
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "MWDSchedule.Diversion Schedule" [date] := $ "MWDDiversion:MWDDiversion.Diversion Schedule" [date] + "VolumeToFlow"( $ "California ICS.Minimum PVID Fallow Amount" [] * "SurplusMonthlyPercent"( "MWD", date ), date );

            $ "MWDSchedule.Depletion Schedule" [date] := $ "MWDDiversion:MWDDiversion.Depletion Schedule" [date] + "VolumeToFlow"( $ "California ICS.Minimum PVID Fallow Amount" [] * "SurplusMonthlyPercent"( "MWD", date ), date );

            $ "MWDSchedule.Input Diversion Schedule" [date] := $ "MWDDiversion:MWDDiversion.Diversion Schedule" [date];

            $ "MWDSchedule.Input Depletion Schedule" [date] := $ "MWDDiversion:MWDDiversion.Depletion Schedule" [date];

            $ "PVIDDiversion.Total Diversion Requested" [date] := $ "PVIDSchedule.Input Diversion Schedule" [date] - "VolumeToFlow"( $ "California ICS.Minimum PVID Fallow Amount" [] * "SurplusMonthlyPercent"( "PVID", date ), date ) * ( $ "PVIDSchedule.Input Diversion Schedule" [date] / $ "PVIDSchedule.Input Depletion Schedule" [date] );

            $ "PVIDSchedule.Diversion Schedule" [date] := $ "PVIDSchedule.Input Diversion Schedule" [date] - "VolumeToFlow"( $ "California ICS.Minimum PVID Fallow Amount" [] * "SurplusMonthlyPercent"( "PVID", date ), date ) * ( $ "PVIDSchedule.Input Diversion Schedule" [date] / $ "PVIDSchedule.Input Depletion Schedule" [date] );

            $ "PVIDDiversion.Total Depletion Requested" [date] := $ "PVIDSchedule.Input Depletion Schedule" [date] - "VolumeToFlow"( $ "California ICS.Minimum PVID Fallow Amount" [] * "SurplusMonthlyPercent"( "PVID", date ), date );

            $ "PVIDSchedule.Depletion Schedule" [date] := $ "PVIDSchedule.Input Depletion Schedule" [date] - "VolumeToFlow"( $ "California ICS.Minimum PVID Fallow Amount" [] * "SurplusMonthlyPercent"( "PVID", date ), date );

      ENDFOREACH;

    END
    UUID "{316b51ae-8cd1-4a5e-aaab-fe52a33e5aee}";;

    RULE                 "Quantified 7 State Plan Level 1 Surplus";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND $ "Surplus.SurplusRelease" [] > 0.00000000 "acre-feet";
    NOTES                "DEVELOPMENT NOTES:<br>- 20180108, RAB: edited the inner for loop to use the `GetICSDeliveryAdjustment()` function<br>- Unknown, Unkown: rule created";
    BEGIN

      FOREACH (DATETIME date IN "ListJanuaryToDecemberTimesteps"(  )) DO
            $ "Surplus.SurplusFlag" [date] := 1.00000000;

            $ "Shortage.ShortageFlag" [date] := 0.00000000;

            $ "Surplus.Quantified Surplus Flag" [date] := 1.00000000;

            FOREACH (STRING diversion IN { "MWD" , "CAP" , "SNWP" , "Coachella" , "IID" }) DO
            WITH_STATEMENT (NUMERIC deliveryAdjustmentFor323 = "GetMonthlyUSReductionForMXIncrease"( diversion, date )) DO
            FOREACH (STRING user IN "ListLBNormalWaterUsersByProvider"( diversion )) DO
            "GetObject"( diversion CONCAT "Diversion:" CONCAT user ) & "Depletion Requested" [date] := ( "ComputeSurplusDepl7StatePlanLevel1"( diversion, date ) + "GetICSDeliveryAdjustment"( diversion, date, "Depletion" ) COMMENTED_BY "ICS creation/delivery <br>" - deliveryAdjustmentFor323 ) * "LBUserToAggRatio"( diversion, user, "Depletion", date );

            "GetObject"( diversion CONCAT "Diversion:" CONCAT user ) & "Diversion Requested" [date] := ( "ComputeSurplusDiv7StatePlanLevel1"( diversion, date ) + "GetICSDeliveryAdjustment"( diversion, date, "Diversion" ) COMMENTED_BY "ICS creation/delivery <br>" - deliveryAdjustmentFor323 ) * "LBUserToAggRatio"( diversion, user, "Diversion", date );

      ENDFOREACH;

            % "LBSurplus" & diversion [date] := "ComputeSurplusDepl7StatePlanLevel1"( diversion, date ) - IF ( diversion == "MWD" OR diversion == "SNWP" )
 THEN
  diversion CONCAT "Diversion:" CONCAT diversion CONCAT "Diversion.Depletion Schedule" [date]
 ELSE
  IF ( diversion == "IID" OR diversion == "Coachella" )
  THEN
   "GetObject"( diversion CONCAT "Schedule" ) & "Total Depletion Schedule" [date]
  ELSE
   "GetObject"( diversion CONCAT "Schedule" ) & "Depletion Schedule" [date]
  ENDIF
 ENDIF - deliveryAdjustmentFor323;

      END_WITH_STATEMENT;

            diversion CONCAT "Schedule.ShortageScheduleFlag" [date] := 0.00000000;

            diversion CONCAT "Schedule.SurplusScheduleFlag" [date] := IF ( "ComputeSurplusDepl7StatePlanLevel1"( diversion, date ) > IF ( diversion == "SNWP" )
 THEN
  diversion CONCAT "Diversion:" CONCAT diversion CONCAT "Diversion.Depletion Schedule" [date]
 ELSE
  IF ( diversion == "IID" OR diversion == "Coachella" )
  THEN
   diversion CONCAT "Schedule.Total Depletion Schedule" [date]
  ELSE
   diversion CONCAT "Schedule.Depletion Schedule" [date]
  ENDIF
 ENDIF )
 THEN
  1.00000000
 ELSE
  0.00000000
 ENDIF;

            diversion CONCAT "Schedule.SurplusLevel1Flag" [date] := IF ( "ComputeSurplusDepl7StatePlanLevel1"( diversion, date ) > IF ( diversion == "SNWP" )
 THEN
  diversion CONCAT "Diversion:" CONCAT diversion CONCAT "Diversion.Depletion Schedule" [date]
 ELSE
  IF ( diversion == "IID" OR diversion == "Coachella" )
  THEN
   diversion CONCAT "Schedule.Total Depletion Schedule" [date]
  ELSE
   diversion CONCAT "Schedule.Depletion Schedule" [date]
  ENDIF
 ENDIF )
 THEN
  1.00000000
 ELSE
  0.00000000
 ENDIF;

      ENDFOREACH;

      ENDFOREACH;

      WITH_STATEMENT (NUMERIC monthly_gw_deposit = "ComputeSNWAGWBankPut"( "Max"( "ComputeLevel2RequestedAboveNormal"( "SNWP" ), "ComputeQuantifiedLevel1Volume"( "SNWP" ) ) ) / 12.00000000) DO
            FOREACH (DATETIME date IN "ListJanuaryToDecemberTimesteps"(  )) DO
            $ "Nevada ICS.SNGWBankPut" [date] := monthly_gw_deposit;

      ENDFOREACH;

      END_WITH_STATEMENT;

    END
    UUID "{d6f667e4-05d3-45cb-99a6-3ca9877e900c}";;

    RULE                 "Domestic 7 State Plan Level 2 Surplus";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND ( $ "Mead.Pool Elevation" [@"t - 1"] >= $ "Surplus Triggers.7 State Plan Level 2" [@"t - 1"] AND $ "Surplus.SurplusRelease" [] <= 0.00000000 "acre-feet" ) AND $ "Surplus Triggers.7 State Plan Level 2" [@"t - 1"] != 1200.00000000 "ft";
  NAMES_COLOR  "#5500ff";
    NOTES                "DEVELOPMENT NOTES:<br>- 20180108, RAB: edited the inner for loop to use the `GetICSDeliveryAdjustment()` function<br>- Unknown, Unkown: rule created";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "Surplus.SurplusFlag" [date] := 1.00000000;

            $ "Shortage.ShortageFlag" [date] := 0.00000000;

            $ "Surplus.Full Domestic Surplus Flag" [date] := 1.00000000;

            FOREACH (STRING diversion IN { "MWD" , "SNWP" , "CAP" }) DO
            WITH_STATEMENT (NUMERIC deliveryAdjustmentFor323 = "GetMonthlyUSReductionForMXIncrease"( diversion, date )) DO
            FOREACH (STRING user IN "ListLBNormalWaterUsersByProvider"( diversion )) DO
            "GetObject"( diversion CONCAT "Diversion:" CONCAT user ) & "Depletion Requested" [date] := ( "ComputeSurplusDepl7StatePlanLevel2"( diversion, date ) + "GetICSDeliveryAdjustment"( diversion, date, "Depletion" ) COMMENTED_BY "ICS creation/delivery <br>" - deliveryAdjustmentFor323 ) * "LBUserToAggRatio"( diversion, user, "Depletion", date );

            "GetObject"( diversion CONCAT "Diversion:" CONCAT user ) & "Diversion Requested" [date] := ( "ComputeSurplusDiv7StatePlanLevel2"( diversion, date ) + "GetICSDeliveryAdjustment"( diversion, date, "Diversion" ) COMMENTED_BY "ICS creation/delivery <br>" - deliveryAdjustmentFor323 ) * "LBUserToAggRatio"( diversion, user, "Diversion", date );

      ENDFOREACH;

            diversion CONCAT "Schedule.ShortageScheduleFlag" [date] := 0.00000000;

            diversion CONCAT "Schedule.SurplusScheduleFlag" [date] := 1.00000000;

            diversion CONCAT "Schedule.SurplusLevel2Flag" [date] := 1.00000000;

            % "LBSurplus" & diversion [date] := "ComputeSurplusDepl7StatePlanLevel2"( diversion, date ) - IF ( diversion == "CAP" )
 THEN
  diversion CONCAT "Schedule.Depletion Schedule" [date]
 ELSE
  diversion CONCAT "Diversion:" CONCAT diversion CONCAT "Diversion.Depletion Schedule" [date]
 ENDIF - deliveryAdjustmentFor323;

      END_WITH_STATEMENT;

      ENDFOREACH;

      ENDFOREACH;

    END
    UUID "{aa479e0d-268d-47a1-b020-da385d9ae5e8}";;

    RULE                 "Partial Domestic 7 State Plan Level 3 Surplus";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND ( $ "Mead.Pool Elevation" [@"t - 1"] < $ "Surplus Triggers.7 State Plan Level 2" [@"t - 1"] AND $ "Mead.Pool Elevation" [@"t - 1"] >= $ "Surplus Triggers.7 State Plan Level 3" [@"t - 1"] AND $ "Surplus.SurplusRelease" [] <= 0.00000000 "acre-feet" );
  NAMES_COLOR  "#5500ff";
    NOTES                "DEVELOPMENT NOTES:<br>- 20180108, RAB: edited the inner for loop to use the `GetICSDeliveryAdjustment()` function<br>- Unknown, Unkown: rule created";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "Surplus.SurplusFlag" [date] := 1.00000000;

            $ "Shortage.ShortageFlag" [date] := 0.00000000;

            $ "Surplus.Partial Domestic Surplus Flag" [date] := 1.00000000;

            FOREACH (STRING diversion IN { "MWD" , "SNWP" }) DO
            WITH_STATEMENT (NUMERIC deliveryAdjustmentFor323 = "GetMonthlyUSReductionForMXIncrease"( diversion, date )) DO
            FOREACH (STRING user IN "ListLBNormalWaterUsersByProvider"( diversion )) DO
            "GetObject"( diversion CONCAT "Diversion:" CONCAT user ) & "Depletion Requested" [date] := ( "ComputeSurplusDepl7StatePlanLevel3"( diversion, date ) + "GetICSDeliveryAdjustment"( diversion, date, "Depletion" ) COMMENTED_BY "ICS creation/delivery <br>" - deliveryAdjustmentFor323 ) * "LBUserToAggRatio"( diversion, user, "Depletion", date );

            "GetObject"( diversion CONCAT "Diversion:" CONCAT user ) & "Diversion Requested" [date] := ( "ComputeSurplusDepl7StatePlanLevel3"( diversion, date ) + "GetICSDeliveryAdjustment"( diversion, date, "Diversion" ) COMMENTED_BY "ICS creation/delivery <br>" - deliveryAdjustmentFor323 ) * "LBUserToAggRatio"( diversion, user, "Diversion", date );

      ENDFOREACH;

            diversion CONCAT "Schedule.ShortageScheduleFlag" [date] := 0.00000000;

            diversion CONCAT "Schedule.SurplusScheduleFlag" [date] := 1.00000000;

            diversion CONCAT "Schedule.SurplusLevel2Flag" [date] := 1.00000000;

            % "LBSurplus" & diversion [date] := "ComputeSurplusDepl7StatePlanLevel3"( diversion, date ) - IF ( diversion == "CAP" )
 THEN
  diversion CONCAT "Schedule.Depletion Schedule" [date]
 ELSE
  diversion CONCAT "Diversion:" CONCAT diversion CONCAT "Diversion.Depletion Schedule" [date]
 ENDIF - deliveryAdjustmentFor323;

      END_WITH_STATEMENT;

      ENDFOREACH;

      ENDFOREACH;

    END
    UUID "{96d07540-4d14-4824-a2de-cfcc57668817}";;

    RULE                 "Increase MX Delivery from Minute 32x";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND $ "MexicoSchedule.AnnualIncreaseVolume" [@"24:00:00 December Max DayOfMonth, Current Year"] > 0.00000000 "acre-ft";
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            WITH_STATEMENT (NUMERIC increaseAmount = "VolumeToFlow"( $ "MexicoSchedule.AnnualIncreaseVolume" [@"24:00:00 December Max DayOfMonth, Current Year"] COMMENTED_BY "The annual increase volume" * "SurplusMonthlyPercent"( "Mexico", date ) COMMENTED_BY "Increase each month proportionally", date )) DO
            $ "MexicoDiversion:MexicoDiversion.Diversion Requested" [date] := $ "MexicoDiversion:MexicoDiversion.Diversion Requested" [date] + increaseAmount;

            $ "MexicoDiversion:MexicoDiversion.Depletion Requested" [date] := $ "MexicoDiversion:MexicoDiversion.Depletion Requested" [date] + increaseAmount;

            $ "LBSurplus.Mexico" [date] := increaseAmount;

      END_WITH_STATEMENT;

      ENDFOREACH;

    END
    UUID "{414485f2-5b9d-4e68-ad2a-79b5529e2f15}";;

    RULE                 "Set Mexico Minute 323 Annual Increase due to High Reservoir Conditions";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      $ "MexicoSchedule.AnnualIncreaseVolume" [@"24:00:00 December Max DayOfMonth, Current Year"] := IF ( "DuringTermOfMinute"(  ) )
 THEN
  "TableLookupDefaultTol"( $ "MexicoSchedule.HighElevationAnnualIncrease", 0.00000000, 1.00000000, $ "Mead.Pool Elevation" [@"24:00:00 December Max DayOfMonth, Previous Year"], @"t", TRUE )
 ELSE
  0.00000000 "acre-ft"
 ENDIF;

    END
    UUID "{0f5b2dcd-3354-4e35-b4b2-73060de4db21}";;

  END
  UUID "{db40a454-1361-40b6-99af-a2b6a3b50b72}";;

  POLICY_GROUP   "ICS and Other Project Water Rules";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Adjust User for California ICS Put";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND ( NOT IsNaN $ "Surplus.SurplusFlag" [] OR NOT IsNaN $ "Mead Bank.Normal Year" [@"24:00:00 December 31, Current Year"] ) AND @"t" <= "NumberToDate"( $ "Mead Bank.LastYearForPuts" [@"24:00:00 December 31, Current Year"] );
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"t + 11") DO
            $ "IIDDiversion.Total Diversion Requested" [date] := $ "IIDDiversion.Total Diversion Requested" [date] - "VolumeToFlow"( "MWDExchangeWithIID"( date ), date );

            $ "IIDDiversion.Total Depletion Requested" [date] := $ "IIDDiversion.Total Depletion Requested" [date] - "VolumeToFlow"( "MWDExchangeWithIID"( date ), date );

      ENDFOREACH;

    END
    UUID "{60a05b04-73f9-4294-b976-551aa03af04a}";;

    RULE                 "Adjust User for Arizona ICS Put";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND ( NOT IsNaN $ "Surplus.SurplusFlag" [] OR NOT IsNaN $ "Shortage.ShortageFlag" [] OR NOT IsNaN $ "Mead Bank.Normal Year" [@"24:00:00 December 31, Current Year"] ) AND @"t" <= "NumberToDate"( $ "Mead Bank.LastYearForPuts" [@"24:00:00 December 31, Current Year"] );
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"t + 11") DO
            $ "GilaGravityMainCanalPriority1:YumaCountyWUA.Diversion Requested" [date] := $ "GilaGravityMainCanalPriority1:YumaCountyWUA.Diversion Schedule" [date] - "VolumeToFlow"( "CAPExchangeWithYumaCountyWUA"( date ), date );

            $ "GilaGravityMainCanalPriority1:YumaCountyWUA.Depletion Requested" [date] := $ "GilaGravityMainCanalPriority1:YumaCountyWUA.Depletion Schedule" [date] - "VolumeToFlow"( "CAPExchangeWithYumaCountyWUA"( date ), date );

      ENDFOREACH;

    END
    UUID "{2d7ecba2-b064-453d-a2a2-c9026a4b7596}";;

    RULE                 "Adjust Gains for Nevada ICS Put and Other";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN "ListJanuaryToDecemberTimesteps"(  )) DO
            $ "NevadaTributaryConservation.Inflow" [date] := "VolumeToFlow"( ( $ "Nevada ICS.TributaryConsAnnualPut" [@"24:00:00 December 31, Current Year"] / 12.00000000 ) COMMENTED_BY "Put always occurs regardless of bank balance. Use schedule and not ActualMonthly", date );

            $ "NevadaGroundwater.Inflow" [date] := "VolumeToFlow"( ( $ "Nevada ICS.GroundwaterActualMonthlyPut" [date] / "SystemTaxAdjustment"(  ) ) COMMENTED_BY "Need to add system tax back in for real water", date );

            $ "NevadaDesalination.Inflow" [date] := "VolumeToFlow"( ( $ "Nevada ICS.NonSystemExchangesActualMonthlyPut" [date] / "SystemTaxAdjustment"(  ) ) COMMENTED_BY "Need to add system tax back in for real water", date );

      ENDFOREACH;

    END
    UUID "{56d604d1-ba3a-49bd-938e-145d18edf050}";;

    RULE                 "Adjust Arizona for ICS Put/Take";
    DESCRIPTION          "EXECUTION CONSTRAINT: Current month is January<br><br>DESCRIPTION: Adjusts CAP and CRIT uses for the monthly put/take volumes as determined by the rule Compute Arizona Available ICS Water. This rule only adjusts CAP in normal years, and adjusts CRIT in shortage and normal years.<br><br>SLOTS SET: <br>- CAPDiversion:CAPdiversionMandI.[Depletion/Divrsion] Requested<br>- ColoradoRiverIndianReservation:CRIR AZ.[Depletion/Diversion] Requested";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "2019-12-18, RAB: Edited so that CAP is only set in normal years by this rule. Also removed unnecesary `with` statements.<br>~ November 2010, JK: Fixed CAP portion so shortages correctly applied<br>Creation ?";
    BEGIN

    DESCRIPTION          "Only adjust CAP in this rule if it is a normal year. Shortage/surplus rules will <br>adjust them in those years. <br>";
      IF_STATEMENT ("NotSurplusOrShortageYear"(  )) THEN
            FOREACH (DATETIME date IN "ListJanuaryToDecemberTimesteps"(  )) DO
            $ "CAPDiversion:CAPDiversionMandI.Depletion Requested" [date] := $ "CAPDiversion:CAPDiversionMandI.Depletion Requested" [date] + "GetCAWCDDeliveryAdjustment"( date, "Depletion" );

            $ "CAPDiversion:CAPDiversionMandI.Diversion Requested" [date] := $ "CAPDiversion:CAPDiversionMandI.Diversion Requested" [date] + "GetCAWCDDeliveryAdjustment"( date, "Diversion" );

      ENDFOREACH;

      END_IF_STATEMENT;

    DESCRIPTION          "Adjust CRIT in normal and shortage years in this rule <br>";
      IF_STATEMENT ("NotSurplusYear"(  )) THEN
            FOREACH (DATETIME date IN "ListJanuaryToDecemberTimesteps"(  )) DO
            $ "ColoradoRiverIndianReservation:CRIR AZ.Depletion Requested" [date] := $ "ColoradoRiverIndianReservation:CRIR AZ.Depletion Requested" COMMENTED_BY "Using requested instead of schedule slot because volume has previously been reduced in some <br>years to account for CRIT system conservation <br>" [date] + "GetCRITDeliveryAdjustment"( date, "Depletion" );

            $ "ColoradoRiverIndianReservation:CRIR AZ.Diversion Requested" [date] := $ "ColoradoRiverIndianReservation:CRIR AZ.Diversion Requested" COMMENTED_BY "Using requested instead of schedule slot because volume has previously been reduced in some <br>years to account for CRIT system conservation <br>" [date] + "GetCRITDeliveryAdjustment"( date, "Diversion" );

      ENDFOREACH;

      END_IF_STATEMENT;

    END
    UUID "{db55d08a-556d-454c-9cfb-7b2362e1d75f}";;

    RULE                 "Compute Arizona Available ICS Water_OLD";
    DESCRIPTION          "EXECUTION CONSTRAINT: January of each year.<br><br>DESCRIPTION: Rule sets ICS values for each ICS type in a given year.  For Arizona, the puts/takes are made by CAWCD.  Before 2025, takes are made as mitigation water during tier 1 and 2 shortage (take from EC-ICS, then BICS, then Brock/YDP).  After 2025 CAWCD tries to drain EC-ICS, BICS, Brock, YDP balances in 10 years.  Will divide balance by 10 and do takes until balances of all accounts are depleted.  GRIC and CRIT puts/takes are determined by input values.  GRIC AZ and GRIC Fed takes are made after 2026 to meet firming obligations during tier 2 shortages from ICS water purchased from GRIC and stored in GRIC's ICS account.  Arizona will take 15 kaf and the Feds will take 10 kaf until supplies depleted.  If the puts exceeds Arizona's annual put limit all puts will be prorated according to the size of their desired put.  If takes exceed Arizona's annual take limit the AZ/Fed GRIC ICS for firming obligations will be taken first, and then the remaining takes prorated according to the size of their desired take.  If the AZ/FED GRIC take exceeds Arizona's annual take limit these takes will be prorated according to the size of their desired take.<br><br>SLOTS SET: On Arizona ICS data object - ActualMonthlyPut, GricActualMonthlyPut, CRITActualMonthlyPut, GRICAZActualMonthlyTake, GRICFedActualMonthlyTake, ActualMonthlyTake, BICSActualMonthlyTake, GRICActualMonthlyTake, CRITActualMonthlyTake, BrockActualMonthlyTake, YDPActualMonthlyTake";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year";
    NOTES                "2020-01-23 - Edited to use the `DetermineAZECPuts()` function for CAP, CRIT, and GRIC EC creation volumes<br><br>...<br><br>creation unknown";
    BEGIN

      WITH_STATEMENT (LIST ec_puts = "DetermineAZECPuts"(  )) DO
            FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "Arizona ICS.DCPActualMonthlyPut" [date] := ( "DetermineArizonaAnnualDCPPut"(  ) / 12.00000000 ) COMMENTED_BY "Put is from CAPDiversion:CAPDiversionMandI  <br>";

            $ "Arizona ICS.ActualMonthlyPut" [date] := ( ( GET @INDEX 0.00000000 FROM ec_puts ) / 12.00000000 ) COMMENTED_BY "Put is from CAPDiversion:CAPDiversionMandI <br>";

            $ "Arizona ICS.GRICActualMonthlyPut" [date] := ( GET @INDEX 2.00000000 FROM ec_puts ) / 12.00000000;

            $ "Arizona ICS.CRITActualMonthlyPut" [date] := ( GET @INDEX 1.00000000 FROM ec_puts ) / 12.00000000;

            $ "Arizona ICS.GRICAZActualMonthlyTake" [date] := "DetermineAZGRICStateAnnualTake"(  ) / 12.00000000;

            $ "Arizona ICS.GRICFedActualMonthlyTake" [date] := "DetermineAZGRICFedAnnualTake"(  ) / 12.00000000;

            $ "Arizona ICS.DCPActualMonthlyTake" [date] := "DetermineAZDCPTake"(  ) / 12.00000000;

            $ "Arizona ICS.ActualMonthlyTake" [date] := ( "DetermineArizonaAnnualTake"(  ) / 12.00000000 ) COMMENTED_BY "Take is by CAP <br>";

            $ "Arizona ICS.BICSActualMonthlyTake" [date] := "DetermineArizonaBICSAnnualTake"(  ) / 12.00000000;

            $ "Arizona ICS.GRICActualMonthlyTake" [date] := "DetermineAZGRICAnnualTake"(  ) / 12.00000000;

            $ "Arizona ICS.CRITActualMonthlyTake" [date] := "DetermineAZCRITAnnualTake"(  ) / 12.00000000;

            $ "Arizona ICS.BrockActualMonthlyTake" [date] := ( "DetermineAZBrockTake"(  ) / 12.00000000 ) COMMENTED_BY "System Efficiency ICS - No Drop 2 put. Put always occurs through capturing of over-deliveries to Mexico. Take is by MWD";

            $ "Arizona ICS.YDPActualMonthlyTake" [date] := "DetermineAZYDPTake"(  ) / 12.00000000;

      ENDFOREACH;

      END_WITH_STATEMENT;

    END
    UUID "{81757b4c-110b-4d43-889d-226113ebbeff}";;

    RULE                 "Compute Arizona Available ICS Water";
    DESCRIPTION          "EXECUTION CONSTRAINT: January of each year.<br><br>DESCRIPTION: Rule sets ICS values for each ICS type in a given year.  For Arizona, the puts/takes are made by CAWCD.  Before 2025, takes are made as mitigation water during tier 1 and 2 shortage (take from EC-ICS, then BICS, then Brock/YDP).  After 2025 CAWCD tries to drain EC-ICS, BICS, Brock, YDP balances in 10 years.  Will divide balance by 10 and do takes until balances of all accounts are depleted.  GRIC and CRIT puts/takes are determined by input values.  GRIC AZ and GRIC Fed takes are made after 2026 to meet firming obligations during tier 2 shortages from ICS water purchased from GRIC and stored in GRIC's ICS account.  Arizona will take 15 kaf and the Feds will take 10 kaf until supplies depleted.  If the puts exceeds Arizona's annual put limit all puts will be prorated according to the size of their desired put.  If takes exceed Arizona's annual take limit the AZ/Fed GRIC ICS for firming obligations will be taken first, and then the remaining takes prorated according to the size of their desired take.  If the AZ/FED GRIC take exceeds Arizona's annual take limit these takes will be prorated according to the size of their desired take.<br><br>SLOTS SET: On Arizona ICS data object - ActualMonthlyPut, GricActualMonthlyPut, CRITActualMonthlyPut, GRICAZActualMonthlyTake, GRICFedActualMonthlyTake, ActualMonthlyTake, BICSActualMonthlyTake, GRICActualMonthlyTake, CRITActualMonthlyTake, BrockActualMonthlyTake, YDPActualMonthlyTake";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year";
  NAMES_COLOR  "#0000ff";
    NOTES                "2020-01-23 - Edited to use the `DetermineAZECPuts()` function for CAP, CRIT, and GRIC EC creation volumes<br><br>...<br><br>creation unknown";
    BEGIN

      WITH_STATEMENT (LIST ec_puts = "DetermineAZECPuts"(  )) DO
            FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "Arizona ICS.DCPActualMonthlyPut" [date] := 0.00000000 "acre-ft" COMMENTED_BY "Put is from CAPDiversion:CAPDiversionMandI  <br>";

            $ "Arizona ICS.ActualMonthlyPut" [date] := 0.00000000 "acre-ft" COMMENTED_BY "Put is from CAPDiversion:CAPDiversionMandI <br>";

            $ "Arizona ICS.GRICActualMonthlyPut" [date] := 0.00000000 "acre-ft";

            $ "Arizona ICS.CRITActualMonthlyPut" [date] := 0.00000000 "acre-ft";

            $ "Arizona ICS.GRICAZActualMonthlyTake" [date] := 0.00000000 "acre-ft";

            $ "Arizona ICS.GRICFedActualMonthlyTake" [date] := 0.00000000 "acre-ft";

            $ "Arizona ICS.DCPActualMonthlyTake" [date] := 0.00000000 "acre-ft";

            $ "Arizona ICS.ActualMonthlyTake" [date] := 0.00000000 "acre-ft" COMMENTED_BY "Take is by CAP <br>";

            $ "Arizona ICS.BICSActualMonthlyTake" [date] := 0.00000000 "acre-ft";

            $ "Arizona ICS.GRICActualMonthlyTake" [date] := 0.00000000 "acre-ft";

            $ "Arizona ICS.CRITActualMonthlyTake" [date] := 0.00000000 "acre-ft";

            $ "Arizona ICS.BrockActualMonthlyTake" [date] := 0.00000000 "acre-ft" COMMENTED_BY "System Efficiency ICS - No Drop 2 put. Put always occurs through capturing of over-deliveries to Mexico. Take is by MWD";

            $ "Arizona ICS.YDPActualMonthlyTake" [date] := 0.00000000 "acre-ft";

      ENDFOREACH;

      END_WITH_STATEMENT;

    END
    UUID "{fa736ae1-676e-4abd-b743-b6baa7a707de}";;

    RULE                 "Adjust MWD for MWD ICS Put/Take";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      IF_STATEMENT ("NotSurplusYear"(  )) THEN
            FOREACH (DATETIME date IN "ListJanuaryToDecemberTimesteps"(  )) DO
            WITH_STATEMENT (NUMERIC annualDeliveryAdj = "GetMWDDeliveryAdjustment"( date, "Depletion" ) COMMENTED_BY "will adjust both diversion and depletion by the depletion amount of ICS<br>can do this b/c we are adding to existing diverion amount, so the return flow portion should <br>already be included <br>") DO
            $ "MWDDiversion:MWDDiversion.Diversion Requested" [date] := $ "MWDSchedule.Diversion Schedule" [date] + annualDeliveryAdj;

            $ "MWDDiversion:MWDDiversion.Depletion Requested" [date] := $ "MWDSchedule.Depletion Schedule" [date] + annualDeliveryAdj;

      END_WITH_STATEMENT;

      ENDFOREACH;

      END_IF_STATEMENT;

    END
    UUID "{68971b6d-50ff-47de-bccf-730ecb86829a}";;

    RULE                 "Adjust IID for ICS Activity";
    DESCRIPTION          "For normal and shortage years, adjust IID's delivery based on ICS activity. <br><br>Only works in shortage, normal, and domestic surplus years. Otherwise, the quantified surplus or flood control surplus rules will do their jobs.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "2018-08-17; RAB: created rule";
    BEGIN

      IF_STATEMENT ("NotSurplusYear"(  ) OR "IsDomesticSurplusYear"(  )) THEN
            FOREACH (DATETIME date IN @"t" TO @"t + 11") DO
            WITH_STATEMENT (NUMERIC annualDeliveryAdj = "GetIIDDeliveryAdjustment"( date ) COMMENTED_BY "will adjust both diversion and depletion by the depletion amount of ICS<br>can do this b/c we are adding to existing diverion amount, so the return flow portion should <br>already be included <br>") DO
            $ "IIDDiversion:IIDDiversionAG.Diversion Requested" [date] := $ "IIDDiversion:IIDDiversionAG.Diversion Requested" [date] + annualDeliveryAdj;

            $ "IIDDiversion:IIDDiversionAG.Depletion Requested" [date] := $ "IIDDiversion:IIDDiversionAG.Depletion Requested" [date] + annualDeliveryAdj;

      END_WITH_STATEMENT;

      ENDFOREACH;

      END_IF_STATEMENT;

    END
    UUID "{409205cd-f92d-44e8-a42f-e93944dc860c}";;

    RULE                 "MWD ICS - Annual to Monthly";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND ( NOT "AreCADCPContributions"(  ) ) COMMENTED_BY "there are no CA dcp savings this year";
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN "ListJanuaryToDecemberTimesteps"(  )) DO
            $ "MWD ICS.ActualMonthlyTake" [date] := $ "MWD ICS.ECActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "MWD ICS.DCPActualMonthlyTake" [date] := $ "MWD ICS.DCPActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "MWD ICS.BrockActualMonthlyTake" [date] := $ "MWD ICS.BrockActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "MWD ICS.YDPActualMonthlyTake" [date] := $ "MWD ICS.YDPActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "MWD ICS.BICSActualMonthlyTake" [date] := $ "MWD ICS.BICSActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "MWD ICS.ActualMonthlyPut" [date] := $ "MWD ICS.ECActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "MWD ICS.DCPActualMonthlyPut" [date] := $ "MWD ICS.DCPActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "MWD ICS.DCPAdditionalMonthlyContribution" [date] := $ "MWD ICS.DCPAdditionalAnnualContribution" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

      ENDFOREACH;

    END
    UUID "{312e4f85-a850-4ff0-913c-20828161be53}";;

    RULE                 "Compute California Available ICS Water_OLD";
    DESCRIPTION          "EXECUTION CONSTRAINT: <br>Only once in January and when CA is not making DCP contributions<br><br>DESCRIPTION:<br>Computes the ICS creation and delivery volumes for MWD and IID.<br><br>SLOTS SET:<br>- `MWD ICS.DesiredAnnualTake[]`<br>- `MWD ICS.DCPActualAnnualTake[]`<br>- `MWD ICS.ECActualAnnualTake[]`<br>- `MWD ICS.BrockActualAnnualTake[]`<br>- `MWD ICS.YDPActualAnnualTake[]`<br>- `MWD ICS.BICSActualAnnualTake[]`<br>- `MWD ICS.ECActualAnnualPut[]`<br>- `IIC ICS.ActualAnnualPut[]`";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND NOT "AreCADCPContributions"(  );
    NOTES                "2019-06-14 - RAB: Updated to set annual slots. <br><br>Creation unkown.";
    BEGIN

    DESCRIPTION          "------------------------------------------<br>MWD<br>------------------------------------------  <br>";
      $ "MWD ICS.DesiredAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineMWDDesiredTake"(  );

      $ "MWD ICS.ECActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineMWDAnnualPut"(  );

      WITH_STATEMENT (LIST mwd_takes = "ComputeMWDTakesInPriority"( "ConstrainMWDDesiredTake"( "DetermineMWDDesiredTake"(  ) ), "MWDICSDeliveryPriorities"(  ) )) DO
            $ "MWD ICS.DCPActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX "GetMWDICSPriorityIndex"( "DCP" ) FROM mwd_takes;

            $ "MWD ICS.ECActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX "GetMWDICSPriorityIndex"( "EC" ) FROM mwd_takes;

            $ "MWD ICS.BrockActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX "GetMWDICSPriorityIndex"( "Brock" ) FROM mwd_takes;

            $ "MWD ICS.YDPActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX "GetMWDICSPriorityIndex"( "YDP" ) FROM mwd_takes;

            $ "MWD ICS.BICSActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := GET @INDEX "GetMWDICSPriorityIndex"( "BICS" ) FROM mwd_takes;

      END_WITH_STATEMENT;

    DESCRIPTION          "Not making contributions, so these are 0. <br>";
      $ "MWD ICS.DCPAdditionalAnnualContribution" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      $ "MWD ICS.DCPActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

    DESCRIPTION          "------------------------------------------<br>IID<br>------------------------------------------   <br>";
      $ "IID ICS.ECActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineIIDECICSPut"(  );

    END
    UUID "{573173e1-b39e-4836-a1fe-f47f544d377a}";;

    RULE                 "Compute California Available ICS Water";
    DESCRIPTION          "EXECUTION CONSTRAINT: <br>Only once in January and when CA is not making DCP contributions<br><br>DESCRIPTION:<br>Computes the ICS creation and delivery volumes for MWD and IID.<br><br>SLOTS SET:<br>- `MWD ICS.DesiredAnnualTake[]`<br>- `MWD ICS.DCPActualAnnualTake[]`<br>- `MWD ICS.ECActualAnnualTake[]`<br>- `MWD ICS.BrockActualAnnualTake[]`<br>- `MWD ICS.YDPActualAnnualTake[]`<br>- `MWD ICS.BICSActualAnnualTake[]`<br>- `MWD ICS.ECActualAnnualPut[]`<br>- `IIC ICS.ActualAnnualPut[]`";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND NOT "AreCADCPContributions"(  );
  NAMES_COLOR  "#5500ff";
    NOTES                "2019-06-14 - RAB: Updated to set annual slots. <br><br>Creation unkown.";
    BEGIN

    DESCRIPTION          "------------------------------------------<br>MWD<br>------------------------------------------  <br>";
      $ "MWD ICS.DesiredAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      $ "MWD ICS.ECActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      WITH_STATEMENT (LIST mwd_takes = "ComputeMWDTakesInPriority"( "ConstrainMWDDesiredTake"( "DetermineMWDDesiredTake"(  ) ), "MWDICSDeliveryPriorities"(  ) )) DO
            $ "MWD ICS.DCPActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "MWD ICS.ECActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "MWD ICS.BrockActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "MWD ICS.YDPActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

            $ "MWD ICS.BICSActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      END_WITH_STATEMENT;

    DESCRIPTION          "Not making contributions, so these are 0. <br>";
      $ "MWD ICS.DCPAdditionalAnnualContribution" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      $ "MWD ICS.DCPActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

    DESCRIPTION          "------------------------------------------<br>IID<br>------------------------------------------   <br>";
      $ "IID ICS.ECActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

    END
    UUID "{6b063c09-b2f1-4473-a817-aead24974a67}";;

    RULE                 "Adjust SNWP for Nevada ICS Take and Other";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND ( "NotSurplusOrShortageYear"(  ) OR NOT IsNaN $ "Mead Bank.Normal Year" [@"24:00:00 December 31, Current Year"] );
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"t + 11") DO
            $ "SNWPDiversion:SNWPDiversion.Diversion Requested" [date] := IF ( NOT IsNaN $ "Mead Bank.Normal Year" [@"24:00:00 December 31, Current Year"] )
 THEN
  $ "SNWPDiversion:SNWPDiversion.Diversion Schedule" [date]
 ELSE
  $ "SNWPDiversion:SNWPDiversion.Diversion Requested" [date]
 ENDIF + "VolumeToFlow"( "DetermineSNWPAdditionalProjectWater"( date ), date ) * ( $ "SNWPDiversion:SNWPDiversion.Diversion Schedule" [date] / $ "SNWPDiversion:SNWPDiversion.Depletion Schedule" [date] );

            $ "SNWPDiversion:SNWPDiversion.Depletion Requested" [date] := IF ( NOT IsNaN $ "Mead Bank.Normal Year" [@"24:00:00 December 31, Current Year"] )
 THEN
  $ "SNWPDiversion:SNWPDiversion.Depletion Schedule" [date]
 ELSE
  $ "SNWPDiversion:SNWPDiversion.Depletion Requested" [date]
 ENDIF + "VolumeToFlow"( "DetermineSNWPAdditionalProjectWater"( date ), date );

      ENDFOREACH;

    END
    UUID "{b7a9d966-bb9d-4fc0-be47-0c8fdb8b7bb8}";;

    RULE                 "SNWP ICS - Annual to Monthly_OLD";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN "ListJanuaryToDecemberTimesteps"(  )) DO
            BREAKPOINT BEFORE_EXEC FALSE;
      $ "Nevada ICS.DCPActualMonthlyTake" [date] := $ "Nevada ICS.DCPActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "Nevada ICS.DCPActualMonthlyPut" [date] := $ "Nevada ICS.DCPActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "Nevada ICS.DCPAdditionalMonthlyContribution" [date] := $ "Nevada ICS.DCPAdditionalAnnualContribution" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "Nevada ICS.ECActualMonthlyPutFromUnused" [date] := $ "Nevada ICS.ECActualAnnualPutFromUnused" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "Nevada ICS.TributaryConsActualMonthlyPut" [date] := $ "Nevada ICS.TributaryConsActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "Nevada ICS.TributaryConsActualMonthlyTake" [date] := $ "Nevada ICS.TributaryConsActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "Nevada ICS.GroundwaterActualMonthlyPut" [date] := $ "Nevada ICS.GroundwaterActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "Nevada ICS.GroundwaterActualMonthlyTake" [date] := $ "Nevada ICS.GroundwaterActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "Nevada ICS.ECActualMonthlyTake" [date] := $ "Nevada ICS.ECActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

            $ "Nevada ICS.BrockActualMonthlyTake" [date] := $ "Nevada ICS.BrockActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] / 12.00000000;

      ENDFOREACH;

    END
    UUID "{260cad83-eb1e-4355-b1c6-a0207e057c07}";;

    RULE                 "SNWP ICS - Annual to Monthly";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
  NAMES_COLOR  "#5500ff";
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN "ListJanuaryToDecemberTimesteps"(  )) DO
            $ "Nevada ICS.DCPActualMonthlyTake" [date] := 0.00000000 "acre-ft";

            $ "Nevada ICS.DCPActualMonthlyPut" [date] := 0.00000000 "acre-ft";

            $ "Nevada ICS.DCPAdditionalMonthlyContribution" [date] := 0.00000000 "acre-ft";

            $ "Nevada ICS.ECActualMonthlyPutFromUnused" [date] := 0.00000000 "acre-ft";

            $ "Nevada ICS.TributaryConsActualMonthlyPut" [date] := 0.00000000 "acre-ft";

            $ "Nevada ICS.TributaryConsActualMonthlyTake" [date] := 0.00000000 "acre-ft";

            $ "Nevada ICS.GroundwaterActualMonthlyPut" [date] := 0.00000000 "acre-ft";

            $ "Nevada ICS.GroundwaterActualMonthlyTake" [date] := 0.00000000 "acre-ft";

            $ "Nevada ICS.ECActualMonthlyTake" [date] := 0.00000000 "acre-ft";

            $ "Nevada ICS.BrockActualMonthlyTake" [date] := 0.00000000 "acre-ft";

      ENDFOREACH;

    END
    UUID "{72a7f102-e91a-4503-9c15-b67f04bd9958}";;

    RULE                 "Compute NV Brock Take_OLD";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      $ "Nevada ICS.BrockActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineNVBrockTake"(  );

    END
    UUID "{da65d18d-91b5-44db-8bd2-32a720ca3a9a}";;

    RULE                 "Compute NV Brock Take";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
  NAMES_COLOR  "#5500ff";
    NOTES                "";
    BEGIN

      $ "Nevada ICS.BrockActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

    END
    UUID "{28e670f7-2bff-43df-a17b-ec70e8e756cc}";;

    RULE                 "Compute Nevada EC Take_OLD";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      $ "Nevada ICS.ECActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineNVMeadBankTake"(  );

    END
    UUID "{727c1642-684d-4fcf-b73e-b13897abe60c}";;

    RULE                 "Compute Nevada EC Take";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
  NAMES_COLOR  "#5500ff";
    NOTES                "";
    BEGIN

      $ "Nevada ICS.ECActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

    END
    UUID "{fdd60978-ad79-45fd-8e0c-0f4864f9370e}";;

    RULE                 "Compute Nevada Tributary and Imported ICS Puts/Takes_OLD";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      $ "Nevada ICS.TributaryConsActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineNevadaAnnualPut"(  );

      $ "Nevada ICS.TributaryConsActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineNevadaAnnualTake"(  );

      $ "Nevada ICS.GroundwaterActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineNVGroundwaterPut"(  );

      $ "Nevada ICS.GroundwaterActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineNVGroundwaterTake"(  );

    END
    UUID "{a63b8eb7-0a99-4c14-91e2-7e684b5fc102}";;

    RULE                 "Compute Nevada Tributary and Imported ICS Puts/Takes";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
  NAMES_COLOR  "#5500ff";
    NOTES                "";
    BEGIN

      $ "Nevada ICS.TributaryConsActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      $ "Nevada ICS.TributaryConsActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      $ "Nevada ICS.GroundwaterActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      $ "Nevada ICS.GroundwaterActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

    END
    UUID "{361184e3-1921-4195-8180-2f63aeed42f0}";;

    RULE                 "Compute NV EC-ICS Creation_OLD";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "2019-06-18 - RAB: Changed slot names and set annual slot (in addition to monthly slot<br><br>~2017 - RAB: created";
    BEGIN

    DESCRIPTION          "Create EC ICS if NV has unused apportionment<br>";
      $ "Nevada ICS.ECActualAnnualPutFromUnused" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineNVECCreationFromUnusedApportionment"(  );

    END
    UUID "{5abf71ef-2570-4536-8e32-352159d8dbd7}";;

    RULE                 "Compute NV EC-ICS Creation";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
  NAMES_COLOR  "#5500ff";
    NOTES                "2019-06-18 - RAB: Changed slot names and set annual slot (in addition to monthly slot<br><br>~2017 - RAB: created";
    BEGIN

    DESCRIPTION          "Create EC ICS if NV has unused apportionment<br>";
      $ "Nevada ICS.ECActualAnnualPutFromUnused" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

    END
    UUID "{3f6bfdd1-c78e-4c9d-a4a3-d39b4519a0d2}";;

    RULE                 "Compute NV DCP-ICS Put and Take_OLD";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      $ "Nevada ICS.DCPActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineNVAnnualDCPTake"(  );

    DESCRIPTION          "If there is not enough EC credits for NV to covert to DCP, then there will need to be a reduction in <br>that year's delivery. That is modeled as the DCP-Put";
      $ "Nevada ICS.DCPActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineNVAnnualDCPPut"(  );

      $ "Nevada ICS.DCPAdditionalAnnualContribution" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineDCPAdditionalContribution"( "NV", "DetermineNVAnnualDCPPut"(  ), $ "Nevada ICS.ConvertECToDCP" [@"24:00:00 December Max DayOfMonth, Current Year"] );

    END
    UUID "{2fb868c1-b9f8-4ea9-a9ab-e2111bd6df99}";;

    RULE                 "Compute NV DCP-ICS Put and Take";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
  NAMES_COLOR  "#5500ff";
    NOTES                "";
    BEGIN

      $ "Nevada ICS.DCPActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

    DESCRIPTION          "If there is not enough EC credits for NV to covert to DCP, then there will need to be a reduction in <br>that year's delivery. That is modeled as the DCP-Put";
      $ "Nevada ICS.DCPActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      $ "Nevada ICS.DCPAdditionalAnnualContribution" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

    END
    UUID "{c8985f5e-26da-467f-bb94-1d081504efab}";;

    RULE                 "Compute CA AZ and NV EC to DCP Conversion";
    DESCRIPTION          "Converts ICS to DCP for CA (IID and MWS) to meet DCP Savings volumes";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "2019-06-13 - RAB - Copied from DCP model<br><br>~2016/2017 - RAB Created";
    BEGIN

      $ "MWD ICS.ConvertECToDCP" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineICSToDCPConversion"( "MWD" );

      $ "Nevada ICS.ConvertECToDCP" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineICSToDCPConversion"( "Nevada" );

      $ "Arizona ICS.ConvertECToDCP" [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineICSToDCPConversion"( "Arizona" );

    END
    UUID "{54ab32da-81af-4459-93ba-9a98fda1f5d4}";;

  END
  UUID "{166b53ba-1249-4baf-a437-8526c7a52c05}";;

  POLICY_GROUP   "Mexico Water Reserve Rules";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Set ICMA slots for No ICMA";
    DESCRIPTION          "EXECUTION CONSTRAINT: <br>Only January and only once<br><br>DESCRIPTION:<br>Set MX's BWSCP creation/delivery slots to 0. <br><br>SLOTS SET:<br>- `ICMA.DCPActualAnnualPut[]`<br>- `ICMA.DCPActualAnnualTake[]`";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "2019-05-24 - RAB - Updated based on DCP model. <br><br>~ 2007-2012 - ???: Created";
    BEGIN

      $ "ICMA.BWSCPActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      $ "ICMA.BWSCPActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      $ "ICMA.ActualAnnualTake" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      $ "ICMA.ActualAnnualPut" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

      $ "ICMA.BWSCPAdditionalAnnualContribution" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000 "acre-ft";

    DESCRIPTION          "assume no Mexico Water Reserve activity <br>";
      FOREACH (DATETIME date IN "ListJanuaryToDecemberTimesteps"(  )) DO
            $ "ICMA.ActualMonthlyPut" [date] := 0.00000000 "acre-ft";

            $ "ICMA.ActualMonthlyTake" [date] := 0.00000000 "acre-ft";

      ENDFOREACH;

    END
    UUID "{0fbf97e8-d8c1-4bd1-94ed-c4f76e7a1229}";;

  END
  UUID "{780a7fda-9bce-4b93-b25b-452d1f05fb59}";;

  POLICY_GROUP   "Navajo Rules";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Extreme Drought per Water Sharing Agreement";
    DESCRIPTION          "Execution Constraint: <br><br>Description: <br><br>Slots Set: Navajo.Outflow";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "Navajo.Pool Elevation" [] <= $ "SanJuanNMWaterSharing.ProtectedPE" []) THEN
            $ "Navajo.Outflow" [] := $ "NavajoData.BaseRelease" [];

            $ "NavajoResults.ExtremeDroughtFlag" [] := 1.00000000;

            FOREACH (OBJECT obj IN "ListSubbasin"( "Water Sharing Agreement Users" ) SET_INTERSECTION "ListSubbasin"( "WaterUser" )) DO
            obj & "Depletion Requested" [] := 0.00000000 "acre-ft/month";

            obj & "Diversion Requested" [] := 0.00000000 "acre-ft/month";

      ENDFOREACH;

      END_IF_STATEMENT;

    END
    UUID "{6fcfbabf-4672-4dff-9924-c09f51181285}";;

    RULE                 "Dam Protection Flood Control";
    DESCRIPTION          "Execution Constraint: <br><br>Description: <br><br>Slots Set: Navajo.Outflow";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "Navajo.Pool Elevation" [] > $ "NavajoData.MaxPE" []) THEN
            $ "Navajo.Outflow" [] := $ "Navajo.Outflow" [] + "VolumeToFlow"( "ElevationToStorage"( % "Navajo", $ "Navajo.Pool Elevation" [] ) - "ElevationToStorage"( % "Navajo", $ "NavajoData.PostDamProtectionPE" [] ), @"t" );

            $ "NavajoResults.DamProtectionFlag" [] := 1.00000000;

            $ "NavajoResults.VolumeReleasedForDamProtection" [] := "ElevationToStorage"( % "Navajo", $ "Navajo.Pool Elevation" [] ) - "ElevationToStorage"( % "Navajo", $ "NavajoData.PostDamProtectionPE" [] );

      END_IF_STATEMENT;

    END
    UUID "{2d25577e-f39a-464f-9f5a-3cd811e64b4b}";;

    RULE                 "Flow Recommendation Covered Flood Control";
    DESCRIPTION          "Execution Constraint: <br><br>Description: <br><br>Slots Set: Navajo.Outflow";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" >= @"24:00:00 September 30, Current Year" AND @"t" <= @"24:00:00 December 31, Current Year";
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "Navajo.Pool Elevation" [] > $ "NavajoData.MaxDesiredPE" []) THEN
            $ "Navajo.Outflow" [] := "Min"( $ "Navajo.Outflow" [] + "VolumeToFlow"( "ElevationToStorage"( % "Navajo", $ "Navajo.Pool Elevation" [] ) - "ElevationToStorage"( % "Navajo", $ "NavajoData.PostFloodControlPE" [] ), @"t" ), $ "NavajoData.SpringPeakRelease" [] ) COMMENTED_BY "The new outflow should either be the necesary outlfow to get the PE<br>to the desired height, or the full release of 5000 cfs all month- whichever<br>is less, since it can't spill at elevation 6,082'.  If this outflow is not enough <br>to keep it below 6,085' then the dam protection rule will allow for spill.";

            $ "NavajoResults.FloodControlFlag" [] := 1.00000000;

            $ "NavajoResults.FloodControlVolume" [] := "Min"( "ElevationToStorage"( % "Navajo", $ "Navajo.Pool Elevation" [] ) - "ElevationToStorage"( % "Navajo", $ "NavajoData.PostFloodControlPE" [] ), "FlowToVolume"( $ "NavajoData.SpringPeakRelease" [] - $ "Navajo.Outflow" [], @"t" ) );

      END_IF_STATEMENT;

    END
    UUID "{92cd0ccb-bff4-4f91-8c05-401ca36ddbce}";;

    RULE                 "Makeup for Shorted Diversion per Water Sharing Agreement";
    DESCRIPTION          "Execution Constraint: <br><br>Description: <br><br>Slots Set: Navajo.Outflow";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 November Max DayOfMonth, Current Year" OR @"t" == @"24:00:00 December Max DayOfMonth, Current Year" AND NOT "HasRuleFiredSuccessfully"( "Makeup for Shorted Diversion per Water Sharing Agreement" );
    NOTES                "";
    BEGIN

      IF_STATEMENT (( ( "IsWSAYear"(  ) AND $ "Navajo.Outflow" [] == $ "NavajoData.BaseRelease" [] AND $ "SanJuanNearBluff.Gage Inflow" [] > $ "NavajoData.MinTargetBaseflow" [] ) AND "SubbasinShortage"( "WSA Energy Farmington Jicarilla" COMMENTED_BY "Subbasin containing the four users", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) > 0.00000000 "acre-ft" ) COMMENTED_BY "If there was a WSA for the year and if Navajo is at base release while the min target <br>at Bluff is exceeded then, the San Juan Generating Station, Four Corners Power Plant, <br>City of Farmington and the minor Jicarilla Apache Nation subcontractors are allowed<br>to divert excess water to make up for the water they were shorted in the year") THEN
            FOREACH (OBJECT obj IN "ListSubbasin"( "WSA Energy Farmington Jicarilla" )) DO
            obj & "Depletion Requested" [] := "VolumeToFlow"( "Min"( "FlowToVolume"( $ "SanJuanNearBluff.Gage Inflow" [] - $ "NavajoData.MinTargetBaseflow" [], @"t" ) COMMENTED_BY "Water above 500 cfs available- must maintain min baseflow target at Bluff", "SubbasinShortage"( "WSA Energy Farmington Jicarilla" COMMENTED_BY "Subbasin containing the four users", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) COMMENTED_BY "The total shortage that all 4 above users incurred for the year" ) COMMENTED_BY "The water available to all four users" * ( WITH LIST objAndUser = { obj } DO
  ( "SumFlowsToVolume"( obj & "Depletion Schedule", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) - "SumFlowsToVolume"( obj & "Depletion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) )
 ENDWITH / "SubbasinShortage"( "WSA Energy Farmington Jicarilla" COMMENTED_BY "Subbasin containing the four users", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) ) COMMENTED_BY "The percentage of the current object compared with all other users", @"t" ) + obj & "Depletion Requested" [];

            obj & "Diversion Requested" [] := "VolumeToFlow"( "Min"( "FlowToVolume"( $ "SanJuanNearBluff.Gage Inflow" [] - $ "NavajoData.MinTargetBaseflow" [], @"t" ) COMMENTED_BY "Water above 500 cfs available- must maintain min baseflow target at Bluff", "SubbasinShortage"( "WSA Energy Farmington Jicarilla" COMMENTED_BY "Subbasin containing the four users", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) COMMENTED_BY "The total shortage that all 4 above users incurred for the year" ) COMMENTED_BY "The water available to all four users" * ( WITH LIST objAndUser = { obj } DO
  ( "SumFlowsToVolume"( obj & "Depletion Schedule", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) - "SumFlowsToVolume"( obj & "Depletion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) )
 ENDWITH / "SubbasinShortage"( "WSA Energy Farmington Jicarilla" COMMENTED_BY "Subbasin containing the four users", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) ) COMMENTED_BY "The percentage of the current object compared with all other users", @"t" ) * "DepletionToDiversionRatio"( ( STRINGIFY obj ) CONCAT ".Depletion Requested", ( STRINGIFY obj ) CONCAT ".Diversion Requested", @"t" ) + obj & "Diversion Requested" [];

      ENDFOREACH;

      END_IF_STATEMENT;

    END
    UUID "{af6c1eff-5dc1-4903-9947-ae011b405532}";;

    RULE                 "Reduce Minimum Target Base Flow per Water Sharing Agreement";
    DESCRIPTION          "Execution Constraint: <br><br>Description: <br><br>Slots Set: Navajo.Outflow";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" >= @"24:00:00 March Max DayOfMonth, Current Year" AND @"t" <= @"24:00:00 June Max DayOfMonth, Current Year";
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "NavajoResults.ProjectedPE" [@"24:00:00 July Max DayOfMonth, Current Year"] < "StorageToElevation"( % "Navajo", $ "SanJuanNMWaterSharing.BaseflowReductionStorage" [] ) AND NOT "IsWSAYear"(  )) THEN
            FOREACH (DATETIME date IN @"t" TO @"24:00:00 October Max DayOfMonth, Current Year") DO
            $ "NavajoResults.CurrentTargetBaseflow" [date] := $ "SanJuanNMWaterSharing.ReducedTargetBaseflow" [];

      ENDFOREACH;

      END_IF_STATEMENT;

    END
    UUID "{edbe9af1-0de9-4a14-a6d5-65a619ae72f1}";;

    RULE                 "Protect Elevation 5990 per Water Sharing Agreement";
    DESCRIPTION          "Execution Constraint: <br><br>Description: <br><br>Slots Set: Navajo.Outflow";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( NOT "HasRuleFiredSuccessfully"( "Protect Elevation 5990 per Water Sharing Agreement" ) ) COMMENTED_BY "Only allow this rule to fire once, since it has dependencies on slots it sets.  If it fires more <br>than once, it will short users too much";
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "NavajoResults.WSAShortage" [] > 0.00000000 "acre-ft") THEN
            FOREACH (DATETIME date IN @"t" TO @"24:00:00 December Max DayOfMonth, Current Year") DO
            FOREACH (OBJECT obj IN "ListSubbasin"( "Water Sharing Agreement Users" ) SET_INTERSECTION "ListSubbasin"( "WaterUser" )) DO
            obj & "Depletion Requested" [date] := "VolumeToFlow"( "ModifyDepletionSchedulesPerWSA"( obj, date ), date );

            obj & "Diversion Requested" [date] := WITH LIST aggAndWU = "Split"( STRINGIFY obj, ":" ) DO
  "VolumeToFlow"( "ModifyDepletionSchedulesPerWSA"( obj, date ), date ) * "NMSJDepletionToDiversionRatio"( ( GET @INDEX 0.00000000 FROM aggAndWU ) CONCAT ":" CONCAT GET @INDEX 1.00000000 FROM aggAndWU, date )
 ENDWITH;

      ENDFOREACH;

            IF_STATEMENT (date >= @"24:00:00 March Max DayOfMonth, Current Year" AND date <= @"24:00:00 October Max DayOfMonth, Current Year") THEN
            $ "NavajoResults.CurrentTargetBaseflow" [date] := "Max"( $ "NavajoResults.CurrentTargetBaseflow" [] * ( 1.00000000 - $ "NavajoResults.WSAPercentageReduction" [] ), $ "SanJuanNMWaterSharing.MinReducedBaseflow" [] );

      END_IF_STATEMENT;

      ENDFOREACH;

      END_IF_STATEMENT;

    END
    UUID "{ae50e961-4c0c-45d0-9445-bd34058e20f6}";;

    RULE                 "Determine Water Sharing Agreement Percentage Reduction";
    DESCRIPTION          "Execution Constraint: <br><br>Description: <br><br>Slots Set: Navajo.Outflow";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Determine Water Sharing Agreement Percentage Reduction" );
    NOTES                "";
    BEGIN

      $ "NavajoResults.WSAPercentageReduction" [] := "Min"( "Ceiling"( $ "NavajoResults.WSAShortage" [] / ( "SumFlowsToVolume"( $ "AgUsesArchToFarm.Total Depletion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) + "SumFlowsToVolume"( $ "MiscUsesFarmToFourCorners.Total Depletion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) + "SumFlowsToVolume"( $ "AgUsesNavajoIndianIrrigationProject.Total Depletion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) + ( "Max"( ( "SumFlowsToVolume"( $ "EnergyUsesFarmToShip.Total Depletion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) + "SumFlowsToVolume"( $ "MandIUsesFarmToShip.Total Depletion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) ) - $ "SanJuanNMWaterSharing.EnergyVoluntaryReduction" [@"24:00:00 December Max DayOfMonth, Current Year"], 0.00000000 "acre-ft" ) + ( "SumFlowsToVolume"( $ "MiscUsesArchToFarm.Total Depletion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) + "SumFlowsToVolume"( $ "ExportUsesArchToFarm.Total Depletion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" ) ) ) + "CalcFutureSupplementalReleaseVolume"( $ "NavajoResults.PeakReleaseLevel" [IF ( @"t" > @"24:00:00 June Max DayOfMonth, Current Year" )
 THEN
  @"24:00:00 June Max DayOfMonth, Current Year"
 ELSE
  @"t"
 ENDIF], @"24:00:00 October 31, Current Year" ) COMMENTED_BY "Volume of fish flow from March 1 to October 31 <br>" ), 0.01000000 ), 1.00000000 COMMENTED_BY "Can only reduce up to 100 % of the use so contrain this calculation" );

    END
    UUID "{389c8067-32ee-4b37-9922-24e26fca7ce8}";;

    RULE                 "Determine Water Sharing Agreement Shortage";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "NavajoResults.WSAShortage" [];
    NOTES                "";
    BEGIN

      IF_STATEMENT (( $ "Navajo.Pool Elevation" [] < $ "SanJuanNMWaterSharing.ProtectedPE" [] OR "IsFuturePELessThanProtectedPE"(  ) ) COMMENTED_BY "The current PE has this months PE after 'normal' operations.  If this PE<br>or any future PE is less than the protected PE then we must protect this<br>PE by reducing depletions.") THEN
            $ "NavajoResults.WSAShortage" [] := "ElevationToStorage"( % "Navajo", $ "SanJuanNMWaterSharing.ProtectedPE" [] ) - "ElevationToStorage"( % "Navajo", IF ( @"t" == @"24:00:00 December Max DayOfMonth, Current Year" )
 THEN
  $ "Navajo.Pool Elevation" [] COMMENTED_BY "If it is December, no other projected elevations exist"
 ELSE
  "MinItem"( INSERT $ "Navajo.Pool Elevation" [] INTO "GetSlotValsByCol"( $ "NavajoResults.ProjectedPE", @"t + 1", @"24:00:00 December Max DayOfMonth, Current Year", 0.00000000 ) ) COMMENTED_BY "Find the minPE from the current PE based on normal operations <br>and all projected PE's through October"
 ENDIF );

      ELSE
            $ "NavajoResults.WSAShortage" [] := 0.00000000 "acre-ft";

      END_IF_STATEMENT;

    END
    UUID "{5cc5debd-166b-47a9-8e87-673a4ce5c365}";;

    RULE                 "Project Elevations for the Water Sharing Agreement";
    DESCRIPTION          "Execution Constraint: <br><br>Description: <br><br>Slots Set: Navajo.Outflow";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( ( @"t" >= @"24:00:00 January Max DayOfMonth, Current Year" AND @"t" <= @"24:00:00 October Max DayOfMonth, Current Year" ) AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) ) COMMENTED_BY "While we need to monitor the PE through October, this rule will only execute through September<br>since in October we won't have to 'project' the PE.  We will know it from base operations and<br>can check it in the Protect Elevation 5990 rule";
    NOTES                "2019-08-02 - RAB: Updated to compute the future supplemental release only once, and pass that value to ProjectedNavajoPE.";
    BEGIN

      WITH_STATEMENT (NUMERIC peak_release_level = IF ( ( @"t" > @"24:00:00 June Max DayOfMonth, Current Year" ) COMMENTED_BY "Peak release level is only set up until June, so we must access <br>that slot if we are after June" )
 THEN
  $ "NavajoResults.PeakReleaseLevel" [@"24:00:00 June Max DayOfMonth, Current Year"]
 ELSE
  $ "NavajoResults.PeakReleaseLevel" [@"t"]
 ENDIF) DO
            WITH_STATEMENT (LIST cumlative_supplemental_rel_list = "CalcNavajoFutureSupplementalRelaseVolumes"( peak_release_level, @"24:00:00 December Max DayOfMonth, Current Year" )) DO
            FOREACH (DATETIME date IN @"t + 1" COMMENTED_BY "t+1 because we do not need to project the PE of the current timestep,<br>we already know what it is from base operations" TO @"24:00:00 December Max DayOfMonth, Current Year") DO
            WITH_STATEMENT (NUMERIC monthly_supplemental_release = GET @INDEX FIND date WITHIN @"t + 1" TO @"24:00:00 December Max DayOfMonth, Current Year" FROM cumlative_supplemental_rel_list) DO
            $ "NavajoResults.ProjectedPE" [date] := "ProjectedNavajoPE"( peak_release_level, date, monthly_supplemental_release );

      END_WITH_STATEMENT;

      ENDFOREACH;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{dd1d4eeb-4116-4c93-928e-d63878a078a9}";;

    RULE                 "Extend Spring Peak Release for PE Control";
    DESCRIPTION          "Execution Constraint: $ &quot;NavajoResults.TotalSpringPeakExtensionDays&quot; Is Not NaN<br><br>Description: Update releases based on ExtendedSpringPeakRelease(). <br><br>Slots Set: Navajo.Outflow";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT IsNaN $ "NavajoResults.TotalSpringPeakExtensionDays" [];
    NOTES                "";
    BEGIN

      IF_STATEMENT (( @"t" == @"24:00:00 March Max DayOfMonth, Current Year" AND $ "NavajoResults.TotalSpringPeakExtensionDays" [] + $ "NavajoData.ExtendedMaxHydrographData" [$ "NavajoResults.ExtendedSpringFlowIndex" [], 7.00000000] COMMENTED_BY "Days ramping up for extended bench" - $ "NavajoData.ExtendedMaxHydrographData" [$ "NavajoResults.ExtendedSpringFlowIndex" [], 5.00000000] COMMENTED_BY "Available days in April" - $ "NavajoData.ExtendedMaxHydrographData" [$ "NavajoResults.ExtendedSpringFlowIndex" [], 6.00000000] COMMENTED_BY "Available days in May" > 0.00000000 "day" ) COMMENTED_BY "If we are in March and the total number of extended days is greater than the<br>number of days in April then update March's release. <br>") THEN
            $ "Navajo.Outflow" [] := "ExtendedSpringPeakRelease"(  );

      END_IF_STATEMENT;

      IF_STATEMENT (( @"t" == @"24:00:00 April Max DayOfMonth, Current Year" AND $ "NavajoResults.TotalSpringPeakExtensionDays" [] + $ "NavajoData.ExtendedMaxHydrographData" [$ "NavajoResults.ExtendedSpringFlowIndex" [], 7.00000000] COMMENTED_BY "Days ramping up for extended bench" - $ "NavajoData.ExtendedMaxHydrographData" [$ "NavajoResults.ExtendedSpringFlowIndex" [], 6.00000000] COMMENTED_BY "Available days in May" > 0.00000000 "day" ) COMMENTED_BY "If we are in April and the total number of extended days is greater than the<br>number of days in May then update April's release. <br>") THEN
            $ "Navajo.Outflow" [] := "ExtendedSpringPeakRelease"(  );

      END_IF_STATEMENT;

      IF_STATEMENT (( @"t" == @"24:00:00 May Max DayOfMonth, Current Year" AND $ "NavajoResults.TotalSpringPeakExtensionDays" [] > 0.00000000 "day" ) COMMENTED_BY "If we are in May and total extension days is > 0 then update release.") THEN
            $ "Navajo.Outflow" [] := "ExtendedSpringPeakRelease"(  );

      END_IF_STATEMENT;

      IF_STATEMENT (@"t" == @"24:00:00 June Max DayOfMonth, Current Year") THEN
            $ "Navajo.Outflow" [] := "VolumeToFlow"( "JuneJulyModifiedReleaseVolume"(  ), @"t" );

      END_IF_STATEMENT;

      IF_STATEMENT (@"t" == @"24:00:00 July Max DayOfMonth, Current Year" AND $ "NavajoData.SpringPeakJuneJulyExtData" [$ "NavajoResults.PeakReleaseLevel" [@"24:00:00 June Max DayOfMonth, Current Year"] - 1.00000000, 4.00000000] COMMENTED_BY "Days at normal peak in June" + $ "NavajoResults.TotalSpringPeakExtensionDays" [@"24:00:00 June Max DayOfMonth, Current Year"] COMMENTED_BY "Total extended peak days " + $ "NavajoData.SpringPeakJuneJulyExtData" [$ "NavajoResults.PeakReleaseLevel" [@"24:00:00 June Max DayOfMonth, Current Year"] - 1.00000000, 3.00000000] COMMENTED_BY "days ramping down" > "GetDaysInMonth"( @"24:00:00 June Max DayOfMonth, Current Year" )) THEN
            $ "Navajo.Outflow" [] := "VolumeToFlow"( "JuneJulyModifiedReleaseVolume"(  ), @"t" );

      END_IF_STATEMENT;

    END
    UUID "{8bed9b1b-3674-4292-a748-10b99cccf541}";;

    RULE                 "Determine if Spring Peak Extension is Required";
    DESCRIPTION          "EO Difference: Sets ExtendedOperations.Navajo_NormalTotalSpringPeakExtensionDays, Navajo_NormalExtendedSpringFlow & Navajo_NormalExtendedSpringFlowIndex for computing non EO operations.<br><br>Execution Constraint: Mar-Jul<br><br>Description: If March, if its max peak release level (4), &  the ProjectedEOWYPE exceeds the EOWYTargetPE we must extend the spring peak release into March. The volume  needed relaesed for the new extended peak hydrograph in March through May is the additional volume to reach EOWY PE + April and May volume from Max hydrograph (peakreleaselevel = 4). <br><br>In April and May, set the days and extended bench release equal to that calculated in March.<br><br>If June, if no peak release (0), &  the ProjectedEOWYPE exceeds the EOWYTargetPE we must extend the spring peak release into June & July. Set July to equal June. <br><br>Slots Set: $ &quot;NavajoResults.TotalSpringPeakExtensionDays&quot; & $ &quot;NavajoResults.ExtendedSpringFlow&quot;";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" >= @"24:00:00 March Max DayOfMonth, Current Year" AND @"t" <= @"24:00:00 July Max DayOfMonth, Current Year";
    NOTES                "";
    BEGIN

      IF_STATEMENT (@"t" == @"24:00:00 March Max DayOfMonth, Current Year" AND $ "ExtendedOperations.Navajo_NormalPeakReleaseLevel" [] == 4.00000000 AND $ "ExtendedOperations.Navajo_NormalProjectedEOWYPE" [] > $ "NavajoData.EOWYTargetPE" []) THEN
            $ "ExtendedOperations.Navajo_NormalTotalSpringPeakExtensionDays" [] := "Floor"( GET @INDEX 1.00000000 FROM "ExtendedSpringPeakDaysAndRate"( ( "AdditionalPeakVolume"(  ) + $ "NavajoData.SpringPeakReleaseData" [4.00000000, 5.00000000] + $ "NavajoData.SpringPeakReleaseData" [4.00000000, 6.00000000] ) COMMENTED_BY "Additional volume to reach EOWY PE + April and May<br>Volume from Max hydrograph is the total volume we<br>need to release with the new extended peak hydrograph<br>in March through May" ), 1.00000000 "day" ) COMMENTED_BY "Returns the total days needed.  This could be greater than available days at the <br>given rate, if the rate is the max of 5000 cfs.  Check for this in the subsequent rule.";

            $ "ExtendedOperations.Navajo_NormalExtendedSpringFlow" [] := GET @INDEX 0.00000000 FROM "ExtendedSpringPeakDaysAndRate"( "AdditionalPeakVolume"(  ) + $ "NavajoData.SpringPeakReleaseData" [4.00000000, 5.00000000] + $ "NavajoData.SpringPeakReleaseData" [4.00000000, 6.00000000] );

            $ "ExtendedOperations.Navajo_NormalExtendedSpringFlowIndex" [] := GET @INDEX 2.00000000 FROM "ExtendedSpringPeakDaysAndRate"( "AdditionalPeakVolume"(  ) + $ "NavajoData.SpringPeakReleaseData" [4.00000000, 5.00000000] + $ "NavajoData.SpringPeakReleaseData" [4.00000000, 6.00000000] );

      END_IF_STATEMENT;

      IF_STATEMENT (( @"t" == @"24:00:00 April Max DayOfMonth, Current Year" OR @"t" == @"24:00:00 May Max DayOfMonth, Current Year" ) COMMENTED_BY "In April and May, set the days and extended bench release equal to that calculated in March.<br>Since we have 'perfect' knowledge of the inflow and anticipated release, there should be little<br>difference in the calculations from March to April/May.  However, the method of determining <br>the additional volume necessary to release would need to be changed if the calculation <br>were to be perfromed in April and/or May." AND NOT IsNaN $ "ExtendedOperations.Navajo_NormalTotalSpringPeakExtensionDays" [@"24:00:00 March Max DayOfMonth, Current Year"]) THEN
            $ "ExtendedOperations.Navajo_NormalTotalSpringPeakExtensionDays" [] := $ "ExtendedOperations.Navajo_NormalTotalSpringPeakExtensionDays" [@"24:00:00 March Max DayOfMonth, Current Year"];

            $ "ExtendedOperations.Navajo_NormalExtendedSpringFlow" [] := $ "ExtendedOperations.Navajo_NormalExtendedSpringFlow" [@"24:00:00 March Max DayOfMonth, Current Year"];

            $ "ExtendedOperations.Navajo_NormalExtendedSpringFlowIndex" [] := $ "ExtendedOperations.Navajo_NormalExtendedSpringFlowIndex" [@"24:00:00 March Max DayOfMonth, Current Year"];

      END_IF_STATEMENT;

      IF_STATEMENT (@"t" == @"24:00:00 June Max DayOfMonth, Current Year" AND $ "ExtendedOperations.Navajo_NormalPeakReleaseLevel" [] > 0.00000000 AND $ "ExtendedOperations.Navajo_NormalProjectedEOWYPE" [] > $ "NavajoData.EOWYTargetPE" []) THEN
            IF_STATEMENT (( "AdditionalPeakVolume"(  ) > ( $ "NavajoData.SpringPeakRelease" [] * 1.00000000 "day" ) COMMENTED_BY "1 day at 5000 cfs" ) COMMENTED_BY "Only want to extend 5000 cfs if the necessary additional volume to <br>meet the EOWY target elevation is greater than the volume released<br>for one day at 5000 cfs") THEN
            $ "ExtendedOperations.Navajo_NormalTotalSpringPeakExtensionDays" [] := "Floor"( "ExtraJuneJulyDaysAtPeak"( "AdditionalPeakVolume"(  ) ), 1.00000000 "day" ) COMMENTED_BY "The total days necessary to release additional volume.  Could be more<br>than the available days";

            $ "ExtendedOperations.Navajo_NormalExtendedSpringFlow" [] := $ "NavajoData.SpringPeakRelease" [] COMMENTED_BY "Always equal to 5000 cfs, since we are not trying to extend different benches";

      END_IF_STATEMENT;

      END_IF_STATEMENT;

      IF_STATEMENT (@"t" == @"24:00:00 July Max DayOfMonth, Current Year" AND NOT IsNaN $ "ExtendedOperations.Navajo_NormalTotalSpringPeakExtensionDays" [@"24:00:00 June Max DayOfMonth, Current Year"]) THEN
            $ "ExtendedOperations.Navajo_NormalTotalSpringPeakExtensionDays" [] := $ "ExtendedOperations.Navajo_NormalTotalSpringPeakExtensionDays" [@"24:00:00 June Max DayOfMonth, Current Year"];

            $ "ExtendedOperations.Navajo_NormalExtendedSpringFlow" [] := $ "ExtendedOperations.Navajo_NormalExtendedSpringFlow" [@"24:00:00 June Max DayOfMonth, Current Year"];

      END_IF_STATEMENT;

    END
    UUID "{5761eeee-3732-4dba-95cd-f5f4b6ca93f6}";;

    RULE                 "Determine if Spring Peak Extension is Required_EO";
    DESCRIPTION          "EO Difference: Checks if ProjectedEOWYPE > ExtendedOperations.Navajo_EOWYTargetPE (rather than fixed 6065) but AdditionalPeakVolume() still uses fixed 6065 EOWYTargetPE.<br><br>CF: I created this rule for use calculating the extended spring peak under EO.<br><br>Execution Constraint: Mar-Jul<br><br>Description: If March, if its max peak release level (4), &  the ProjectedEOWYPE exceeds the EOWYTargetPE we must extend the spring peak release into March. The volume  needed relaesed for the new extended peak hydrograph in March through May is the additional volume to reach EOWY PE + April and May volume from Max hydrograph (peakreleaselevel = 4). <br><br>In April and May, set the days and extended bench release equal to that calculated in March.<br><br>If June, if no peak release (0), &  the ProjectedEOWYPE exceeds the EOWYTargetPE we must extend the spring peak release into June & July. Set July to equal June. <br><br>Slots Set: $ &quot;NavajoResults.TotalSpringPeakExtensionDays&quot; & $ &quot;NavajoResults.ExtendedSpringFlow&quot; $ &quot;NavajoResults.ExtendedSpringFlowIndex&quot;";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" >= @"24:00:00 March Max DayOfMonth, Current Year" AND @"t" <= @"24:00:00 July Max DayOfMonth, Current Year";
    NOTES                "";
    BEGIN

      IF_STATEMENT (@"t" == @"24:00:00 March Max DayOfMonth, Current Year" AND $ "NavajoResults.PeakReleaseLevel" [] == 4.00000000 AND $ "NavajoResults.ProjectedEOWYPE" [] > $ "ExtendedOperations.Navajo_EOWYTargetPE" []) THEN
            $ "NavajoResults.TotalSpringPeakExtensionDays" [] := "Floor"( GET @INDEX 1.00000000 FROM "ExtendedSpringPeakDaysAndRate"( ( "AdditionalPeakVolume_EO"(  ) + $ "NavajoData.SpringPeakReleaseData" [4.00000000, 5.00000000] COMMENTED_BY "April & May releases for Peak Release pattern 4.   <br>" + $ "NavajoData.SpringPeakReleaseData" [4.00000000, 6.00000000] ) COMMENTED_BY "Additional volume to reach EOWY PE + April and May<br>Volume from Max hydrograph is the total volume we<br>need to release with the new extended peak hydrograph<br>in March through May <br>" ), 1.00000000 "day" ) COMMENTED_BY "Returns the total days needed.  This could be greater than available days at the <br>given rate, if the rate is the max of 5000 cfs.  Check for this in the subsequent rule. <br>";

            $ "NavajoResults.ExtendedSpringFlow" [] := GET @INDEX 0.00000000 FROM "ExtendedSpringPeakDaysAndRate"( "AdditionalPeakVolume_EO"(  ) + $ "NavajoData.SpringPeakReleaseData" [4.00000000, 5.00000000] + $ "NavajoData.SpringPeakReleaseData" [4.00000000, 6.00000000] );

            $ "NavajoResults.ExtendedSpringFlowIndex" [] := GET @INDEX 2.00000000 FROM "ExtendedSpringPeakDaysAndRate"( "AdditionalPeakVolume_EO"(  ) + $ "NavajoData.SpringPeakReleaseData" [4.00000000, 5.00000000] + $ "NavajoData.SpringPeakReleaseData" [4.00000000, 6.00000000] );

      END_IF_STATEMENT;

      IF_STATEMENT (( @"t" == @"24:00:00 April Max DayOfMonth, Current Year" OR @"t" == @"24:00:00 May Max DayOfMonth, Current Year" ) COMMENTED_BY "In April and May, set the days and extended bench release equal to that calculated in March.<br>Since we have 'perfect' knowledge of the inflow and anticipated release, there should be little<br>difference in the calculations from March to April/May.  However, the method of determining <br>the additional volume necessary to release would need to be changed if the calculation <br>were to be perfromed in April and/or May." AND NOT IsNaN $ "NavajoResults.TotalSpringPeakExtensionDays" [@"24:00:00 March Max DayOfMonth, Current Year"]) THEN
            $ "NavajoResults.TotalSpringPeakExtensionDays" [] := $ "NavajoResults.TotalSpringPeakExtensionDays" [@"24:00:00 March Max DayOfMonth, Current Year"];

            $ "NavajoResults.ExtendedSpringFlow" [] := $ "NavajoResults.ExtendedSpringFlow" [@"24:00:00 March Max DayOfMonth, Current Year"];

            $ "NavajoResults.ExtendedSpringFlowIndex" [] := $ "NavajoResults.ExtendedSpringFlowIndex" [@"24:00:00 March Max DayOfMonth, Current Year"];

      END_IF_STATEMENT;

      IF_STATEMENT (@"t" == @"24:00:00 June Max DayOfMonth, Current Year" AND $ "NavajoResults.PeakReleaseLevel" [] > 0.00000000 AND $ "NavajoResults.ProjectedEOWYPE" [] > $ "ExtendedOperations.Navajo_EOWYTargetPE" []) THEN
            IF_STATEMENT (( "AdditionalPeakVolume_EO"(  ) > ( $ "NavajoData.SpringPeakRelease" [] * 1.00000000 "day" ) COMMENTED_BY "1 day at 5000 cfs" ) COMMENTED_BY "Only want to extend 5000 cfs if the necessary additional volume to <br>meet the EOWY target elevation is greater than the volume released<br>for one day at 5000 cfs <br>") THEN
            $ "NavajoResults.TotalSpringPeakExtensionDays" [] := "Floor"( "ExtraJuneJulyDaysAtPeak"( "AdditionalPeakVolume_EO"(  ) ), 1.00000000 "day" ) COMMENTED_BY "The total days necessary to release additional volume.  Could be more<br>than the available days";

            $ "NavajoResults.ExtendedSpringFlow" [] := $ "NavajoData.SpringPeakRelease" [] COMMENTED_BY "Always equal to 5000 cfs, since we are not trying to extend different benches";

      END_IF_STATEMENT;

      END_IF_STATEMENT;

      IF_STATEMENT (@"t" == @"24:00:00 July Max DayOfMonth, Current Year" AND NOT IsNaN $ "NavajoResults.TotalSpringPeakExtensionDays" [@"24:00:00 June Max DayOfMonth, Current Year"]) THEN
            $ "NavajoResults.TotalSpringPeakExtensionDays" [] := $ "NavajoResults.TotalSpringPeakExtensionDays" [@"24:00:00 June Max DayOfMonth, Current Year"];

            $ "NavajoResults.ExtendedSpringFlow" [] := $ "NavajoResults.ExtendedSpringFlow" [@"24:00:00 June Max DayOfMonth, Current Year"];

      END_IF_STATEMENT;

    END
    UUID "{80bcdb64-4913-425c-8c59-865be65239ff}";;

    RULE                 "Spring Peak Release for Flow Recommendations";
    DESCRIPTION          "Execution Constraint: IsSpringPeakMonth(), TRUE in Apr-June<br><br>Description: If there is a spring peak release then increase the current monthly release by the spring release volume amount, MonthlySpringReleaseVolume(). <br><br>Only need to increase release volume in April if it is the max hydrograph. <br><br>Slots Set: Navajo.Outflow";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "IsSpringPeakMonth"( % "Navajo", @"t" );
    NOTES                "";
    BEGIN

      IF_STATEMENT (@"t" == @"24:00:00 April 30, Current Year" AND ( $ "NavajoResults.PeakReleaseLevel" [] == 4.00000000 ) COMMENTED_BY "Only need to increase release volume in April if it is the max hydrograph <br>") THEN
            $ "Navajo.Outflow" [] := "Min"( ( ( "FlowToVolume"( $ "Navajo.Outflow" [], @"t" ) + "MonthlySpringReleaseVolume"(  ) ) / "GetDaysInMonth"( @"t" ) ), "AvailableWaterInStorage"( % "Navajo" ) ) COMMENTED_BY "Increase the current monthly release volume by the spring release volume amount <br>then change back to a flow by dividing by days in month <br>";

      ELSE
            IF_STATEMENT (@"t" > @"24:00:00 April 30, Current Year" AND ( $ "NavajoResults.PeakReleaseLevel" [] > 0.00000000 ) COMMENTED_BY "Only need to increase release volume if there is a spring peak release") THEN
            $ "Navajo.Outflow" [] := "Min"( ( "FlowToVolume"( $ "Navajo.Outflow" [], @"t" ) + "MonthlySpringReleaseVolume"(  ) ) / "GetDaysInMonth"( @"t" ), "AvailableWaterInStorage"( % "Navajo" ) );

      END_IF_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{5587fdb7-b0ec-4780-8c9a-7bc607f5b994}";;

    RULE                 "Set Projected EOWY Pool Elevation";
    DESCRIPTION          "Execution Constraint: <br><br>Description: Returns the projected September 31 (EOWY) Elevation of Navajo based on the springPeakRelease (0-4).  Calculated as current current storage + inflows from now through September - releases from now through September.<br><br>Slots Set: NavajoResults.ProjectedEOWYPE";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" >= @"24:00:00 January 31, Current Year" AND @"t" <= @"24:00:00 June 30, Current Year" AND ( IsNaN $ "ExtendedOperations.Navajo_NormalProjectedEOWYPE" [] ) COMMENTED_BY "Only allow rule to fire once each timestep";
    NOTES                "2019-08-01 - RAB: Updated to call ProjectedNavajoPE with new, third argument.<br><br>CF, 20190512: Change to useNavajoResults.PeakReleaseLevel[@t] which was calculated by the previous rule rather than redundant logic already accounted for in Set Peak Release Level<br>";
    BEGIN

      $ "ExtendedOperations.Navajo_NormalProjectedEOWYPE" [] := "ProjectedNavajoPE"( $ "ExtendedOperations.Navajo_NormalPeakReleaseLevel" [@"t"], @"24:00:00 September Max DayOfMonth, Current Year", "CalcFutureSupplementalReleaseVolume"( $ "ExtendedOperations.Navajo_NormalPeakReleaseLevel" [@"t"], @"24:00:00 September Max DayOfMonth, Current Year" ) );

    END
    UUID "{9332fe15-4ac6-49be-b1ce-6eb36a818276}";;

    RULE                 "Set Projected EOWY Pool Elevation_EO";
    DESCRIPTION          "Execution Constraint: <br><br>Description: Returns the projected September 31 (EOWY) Elevation of Navajo based on the springPeakRelease (0-4).  Calculated as current current storage + inflows from now through September - releases from now through September.<br><br>Slots Set: NavajoResults.ProjectedEOWYPE";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" >= @"24:00:00 January 31, Current Year" AND @"t" <= @"24:00:00 June 30, Current Year" AND ( IsNaN $ "NavajoResults.ProjectedEOWYPE" [] ) COMMENTED_BY "Only allow rule to fire once each timestep";
    NOTES                "2019-08-01 - RAB: Updated to call ProjectedNavajoPE with new, third argument.<br><br>CF, 20190512: Change to useNavajoResults.PeakReleaseLevel[@t] which was calculated by the previous rule rather than redundant logic already accounted for in Set Peak Release Level<br>";
    BEGIN

      $ "NavajoResults.ProjectedEOWYPE" [] := "ProjectedNavajoPE"( $ "NavajoResults.PeakReleaseLevel" [@"t"], @"24:00:00 September Max DayOfMonth, Current Year", "CalcFutureSupplementalReleaseVolume"( $ "NavajoResults.PeakReleaseLevel" [@"t"], @"24:00:00 September Max DayOfMonth, Current Year" ) );

    END
    UUID "{c16e0111-1b78-4a31-9421-18018a275824}";;

    RULE                 "Set Peak Release Level";
    DESCRIPTION          "EO Difference: Sets ExtendedOperations.Navajo_NormalPeakReleaseLevel for computing non EO operations.<br><br>Execution Constraint: Jan-July and NavajoResults.PeakReleaseLevel is NaN<br><br>Description: Navajo has 0-4 peak release patterns. DeterminePeakRelease() finds the minimum absolute difference of the  ProjectedNavajoPE() of the 0-4 peak release patterns which results in the EOWY PE closest to the desired PE and sets this as NavajoResults.PeakReleaseLevel.<br><br>Any changes are allowed from January to May of peak release hydrograph. In June if a peak <br>release has started then there will at least be some peak release so, the pattern cannot change from 1-4 to a 0, but any other changes are allowed. July is equal to June's.  <br><br>Slots Set: NavajoResults.PeakReleaseLevel";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" >= @"24:00:00 January Max DayOfMonth, Current Year" AND @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      IF_STATEMENT (@"t" == @"24:00:00 June 30, Current Year") THEN
            $ "ExtendedOperations.Navajo_NormalPeakReleaseLevel" [] := WITH NUMERIC val = "DeterminePeakRelease"(  ) DO
  IF ( val == $ "NavajoResults.PeakReleaseLevel" [@"t - 1"] )
  THEN
   val
  ELSE
   IF ( val > 0.00000000 )
   THEN
    val
   ELSE
    1.00000000
   ENDIF
  ENDIF
 ENDWITH COMMENTED_BY "In June, allow the peak release to change release patterns.  However, if a peak <br>release has started then there will at least be some peak release.  So, the <br>pattern cannot change from 1-4 to a 0, but any other changes are allowed.";

      ELSE
            IF_STATEMENT (@"t" == @"24:00:00 July Max DayOfMonth, Current Year") THEN
          DESCRIPTION          "Set equal to June's.  Only sets July so that other function and rules can use july's value<br>as this will not dictate any operations";
      $ "ExtendedOperations.Navajo_NormalPeakReleaseLevel" [] := $ "ExtendedOperations.Navajo_NormalPeakReleaseLevel" [@"t - 1"];

      ELSE
          DESCRIPTION          "So any changes are allowed from April to May.  Can go from a max hydrograph to any <br>other.  So there will be a small increase in release in April and then a ramp back down in<br>May and another ramp up period in May.";
      $ "ExtendedOperations.Navajo_NormalPeakReleaseLevel" [] := "DeterminePeakRelease"(  );

      END_IF_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{52604994-cf7a-45da-9aa7-d31d8a960582}";;

    RULE                 "Set Peak Release Level_EO";
    DESCRIPTION          "EO Difference: During normal operations the desired PE target is NavajoData.EOWYTargetPE =  6065. During EO the desired target is &quot;ExtendedOperations.Navajo_EOWYTargetPE&quot; but only in June & July. In Jan-May NavajoData.EOWYTargetPE =  6065 is used. <br><br>Execution Constraint: Jan-July and NavajoResults.PeakReleaseLevel is NaN<br><br>Description: Navajo has 0-4 peak release patterns. DeterminePeakRelease() finds the minimum absolute difference of the  ProjectedNavajoPE() of the 0-4 peak release patterns which results in the EOWY PE closest to the desired PE and sets this as NavajoResults.PeakReleaseLevel.<br><br>Any changes are allowed from January to May of peak release hydrograph. In June if a peak <br>release has started then there will at least be some peak release so the pattern cannot change from 1-4 to a 0, but any other changes are allowed. July is equal to June's.  <br><br>Slots Set: NavajoResults.PeakReleaseLevel<br><br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" >= @"24:00:00 January Max DayOfMonth, Current Year" AND @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" AND ( IsNaN $ "NavajoResults.PeakReleaseLevel" [] ) COMMENTED_BY "Only allow rule to fire once each timestep";
    NOTES                "";
    BEGIN

      IF_STATEMENT (@"t" == @"24:00:00 June 30, Current Year") THEN
            $ "NavajoResults.PeakReleaseLevel" [] := WITH NUMERIC val = "DeterminePeakRelease_EO"(  ) DO
  IF ( val == $ "NavajoResults.PeakReleaseLevel" [@"t - 1"] )
  THEN
   val
  ELSE
   IF ( val > 0.00000000 )
   THEN
    val
   ELSE
    1.00000000
   ENDIF
  ENDIF
 ENDWITH COMMENTED_BY "In June, allow the peak release to change release patterns.  However, if a peak <br>release has started then there will at least be some peak release.  So, the <br>pattern cannot change from 1-4 to a 0, but any other changes are allowed. <br>";

      ELSE
            IF_STATEMENT (@"t" == @"24:00:00 July Max DayOfMonth, Current Year") THEN
          DESCRIPTION          "Set equal to June's.  Only sets July so that other function and rules can use july's value<br>as this will not dictate any operations <br>";
      $ "NavajoResults.PeakReleaseLevel" [] := $ "NavajoResults.PeakReleaseLevel" [@"t - 1"];

      ELSE
          DESCRIPTION          "So any changes are allowed from April to May.  Can go from a max hydrograph to any <br>other.  So there will be a small increase in release in April and then a ramp back down in<br>May and another ramp up period in May.  <br>";
      $ "NavajoResults.PeakReleaseLevel" [] := "DeterminePeakRelease_EO"(  );

      END_IF_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{b5f1a4c4-4fd2-4b25-96fa-0c1eb39f7db0}";;

    RULE                 "Compute Forecasted Inflow";
    DESCRIPTION          "Set NavajoData.ForecastedInflow to  Navajo.Inflow<br><br>Currently there is no forecast error in the model, thus the forecasted inflow is the actual inflow that Navajo will receive.<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" >= @"24:00:00 January 31, Current Year" AND @"t" <= @"24:00:00 October 31, Current Year";
    NOTES                "CF: This could be removed and Navajo.Inflow used instead of NavajoData.ForecastedInflow";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            $ "NavajoData.ForecastedInflow" [date] := $ "Navajo.Inflow" [date];

      ENDFOREACH;

    END
    UUID "{75be9800-f88c-497b-a550-527dca492d71}";;

    RULE                 "Supplement Base Release";
    DESCRIPTION          "Execution Constraint: $ &quot;NavajoResults.SupplementalRelease&quot; is NaN<br><br>Description: If baseflow release was not enough to meet the target baseflow or a user was shorted calculate a  supplemental release up to the nearest SupplementalReleaseIncrement. Add the supplemental release to the outflow.  <br><br>Slots Set: $ &quot;Navajo.Outflow&quot;, $ &quot;NavajoResults.SupplementalRelease&quot;, $ &quot;NavajoResults.SupplementalReleaseFlag&quot;<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "NavajoResults.SupplementalRelease" [];
    NOTES                "2019-08-01 - RAB: Updated to use `ComputeSJBelowConfMaxShortage()` instead of performing that computation multiple times, and use temporary variable to store supplemental release value.<br><br>C:L I'm not sure why this is a max and not a sum of the shortages, couldn't they be additative?";
    BEGIN

      IF_STATEMENT ($ "SanJuanNearBluff.Gage Inflow" [] < $ "NavajoResults.CurrentTargetBaseflow" [] OR "ComputeSJBelowConfMaxShortage"(  ) COMMENTED_BY "It is possible that the flow is higher than the minimum at Bluff but a diverter might not receive <br>its full diversion.  In this case, Navajo should release to ensure the user gets its full diversion  <br>" > 0.00000000 "acre-ft/month") THEN
            WITH_STATEMENT (NUMERIC supplemental_release = "Ceiling"( "Max"( ( $ "NavajoResults.CurrentTargetBaseflow" [] - $ "SanJuanNearBluff.Gage Inflow" [] ), "ComputeSJBelowConfMaxShortage"(  ) ), $ "NavajoData.SupplementalReleaseIncrement" [] ) COMMENTED_BY "Rounds the supplemental release up to the nearest SupplementalReleaseIncrement <br>") DO
            $ "NavajoResults.SupplementalRelease" [] := supplemental_release;

            $ "Navajo.Outflow" [] := "Min"( $ "NavajoData.BaseRelease" [] + supplemental_release, "AvailableWaterInStorage"( % "Navajo" ) );

      END_WITH_STATEMENT;

            $ "NavajoResults.SupplementalReleaseFlag" [] := IF ( ( $ "NavajoResults.CurrentTargetBaseflow" [] - $ "SanJuanNearBluff.Gage Inflow" [] ) > "ComputeSJBelowConfMaxShortage"(  ) )
 THEN
  1.00000000 COMMENTED_BY "Set the flag to 1 to show the supplemental release was to meet the baseflow target at Bluff"
 ELSE
  2.00000000 COMMENTED_BY "Set the flag to 2 to show the supplemental release was to meet the all upstream diversions"
 ENDIF;

      ELSE
            $ "NavajoResults.SupplementalRelease" [] := 0.00000000 "cfs";

      END_IF_STATEMENT;

    END
    UUID "{c8c98e4c-d80f-4cec-9a1a-8610bda3782e}";;

    RULE                 "Set Base Release";
    DESCRIPTION          "Execution Constraint: None<br><br>Description: Set Navajo's release to the base release (currently 250 cfs which is the minimum release from Navajo per the ROD). Aims to meet the target baseflow of 500-1000 cfs at the downstream gages from the flow recommendations.<br><br>Slots Set: $ &quot;Navajo.Outflow&quot;";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "Navajo.Outflow" [] := "Min"( $ "NavajoData.BaseRelease" [], "AvailableWaterInStorage"( % "Navajo" ) );

    END
    UUID "{3c8be244-6822-4652-b2d4-b2648dd49b32}";;

    RULE                 "Initialize Flags";
    DESCRIPTION          "Set up rule. Zero the following slots so that NaN's do not cause issues in other rules<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year";
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN @"24:00:00 January 31, Current Year" TO @"24:00:00 December 31, Current Year") DO
            $ "NavajoResults.DamProtectionFlag" COMMENTED_BY "Zero the following slots so that NaN's do not cause issues in other rules<br>" [date] := 0.00000000;

            $ "NavajoResults.FloodControlFlag" [date] := 0.00000000;

            $ "NavajoResults.FloodControlVolume" [date] := 0.00000000 "acre-ft";

            $ "NavajoResults.VolumeReleasedForDamProtection" [date] := 0.00000000 "acre-ft";

            $ "NavajoResults.ExtremeDroughtFlag" [date] := 0.00000000;

            $ "NavajoResults.CurrentTargetBaseflow" [date] := $ "NavajoData.MinTargetBaseflow" [];

            $ "NavajoResults.SupplementalReleaseFlag" [date] := 0.00000000;

      ENDFOREACH;

    END
    UUID "{15f10ae9-aefb-428e-abb0-b4a5dedbf1bb}";;

    RULE                 "PPP_SetEOWYTargetPE";
    DESCRIPTION          "Execution Constraint: Only August<br>  <br>Description: Drought Operations are modeled at Navajo by lowering the end-of-water year target elevation from 6,065' (1,413 KAF) to 6,022' (931 KAF).  <br><br>Always execute this constraint so that the EOWY Target can be reset. Sets the EOWY Target for every timestep from @t until July<br>  <br>Slots Set: ExtendedOperations.Navajo_EOWYTargetPE<br><br><br><br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetMonthAsString"( @"t" ) == "August" OR "RunStartDate"(  ) == @"t";
    NOTES                "CF, 20190512: Assignment of $ &quot;ExtendedOperations.Navajo_EOWYTargetPE&quot; as Normal for first timesteps added to get PeakReleaseLevel to solve. ";
    BEGIN

      WITH_STATEMENT (LIST NextWYTimesteps = @"24:00:00 October Max DayOfMonth, Current Year" TO @"24:00:00 September Max DayOfMonth, Next Year") DO
            IF_STATEMENT ($ "ExtendedOperations.ExtendedOperationsFlag" [] == 1.00000000 AND $ "ExtendedOperations.PowellForecastDeficitFlag" [] == 1.00000000 AND $ "ExtendedOperations.NavajoRecoveryFlag" [] == 1.00000000) THEN
            FOREACH (DATETIME date IN NextWYTimesteps) DO
          DESCRIPTION          "EO Operations changes the EOWY Target Elevation based on Operational Flexibility Flag (low, med, high).";
      $ "ExtendedOperations.Navajo_EOWYTargetPE" [date] := $ "ExtendedOperations.Navajo_EO_EOWYTargetPE" [];

      ENDFOREACH;

      ELSE
            FOREACH (DATETIME date IN NextWYTimesteps) DO
          DESCRIPTION          "Normal Operations: No EO";
      $ "ExtendedOperations.Navajo_EOWYTargetPE" [date] := $ "NavajoData.EOWYTargetPE" [];

      ENDFOREACH;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      IF_STATEMENT ("RunStartDate"(  ) == @"t") THEN
            WITH_STATEMENT (LIST NextWYTimesteps = @"24:00:00 January Max DayOfMonth, Current Year" TO @"24:00:00 September Max DayOfMonth, Current Year") DO
            FOREACH (DATETIME date IN NextWYTimesteps) DO
          DESCRIPTION          "Normal Operations: No EO";
      $ "ExtendedOperations.Navajo_EOWYTargetPE" [date] := $ "NavajoData.EOWYTargetPE" [];

      ENDFOREACH;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{c2f70ace-01ce-4ece-bc7f-9d0fa5b9a684}";;

    RULE                 "PPP_NavajoRecovery";
    DESCRIPTION          "Execution Constraint: Only August <br>  <br>Description: <br><br><br><br>Slots Set: ExtendedOperations.NavajoRecoveryFlag<br><br>Navajo can do EO for a WY with the decision point in August, before the start of the next WY. NavajoRecoveryFlag is whether or not Navajo can do EO the next WY based on if EO was done in the current WY, if the previous flag was calculated as &quot;1&quot;, or if Navajo has recovered by achieving its original EOWY target elevation (6065) last WY. 5/30/14 LTD";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetMonthAsString"( @"t" ) == "August" AND $ "ExtendedOperations.ExtendedOperationsFlag" [] == 1.00000000;
    NOTES                "CF: Added in a IF model start year = t year assume reovered to allow the rule to compute without additional ICs. Added back in If the NavajoRecoveryFlag was calculated as &quot;1&quot; last August, then it can be 1 again this year<br><br>CF: Rule PPP_NavajoRecovery, which sets slot NavajoRecoveryFlag, is not working. NavajoRecoveryFlag is not called by any other logic.<br>If we want to rule to work it will need input of <br>Nav.PE[@&quot;24:00:00 October Max DayOfMonth, Previous Year&quot;]<br>ExtendedOperations.Navajo_EOWYTargetPE[@t] = 6065 (no EO) <br>DCP model had this input through Sept 2017 - assume that was current year<br>ExtendedOperations.NavajoRecoveryFlag[@&quot;24:00:00 August Max DayOfMonth, Previous Year&quot;] = 1 (recovered) <br><br>Alternatively we could reorder the logic to prevent checks from failing in first timestep. ";
    BEGIN

    DESCRIPTION          "Assume Navajo starts out recovered. <br>";
      IF_STATEMENT ("GetYear"( "RunStartDate"(  ) ) == "GetYear"( @"t" )) THEN
            $ "ExtendedOperations.NavajoRecoveryFlag" [] := 1.00000000;

      ELSE
          DESCRIPTION          "If Navajo did EO last water year, it may not do EO this year. <br>";
      IF_STATEMENT ($ "ExtendedOperations.Navajo_EOWYTargetPE" [@"24:00:00 October Max DayOfMonth, Previous Year"] < $ "NavajoData.EOWYTargetPE" []) THEN
            $ "ExtendedOperations.NavajoRecoveryFlag" [] := 0.00000000;

      ELSE
          DESCRIPTION          "If the NavajoRecoveryFlag was calculated as &quot;1&quot; last August, then it can be 1 again this year <br>";
      IF_STATEMENT ($ "ExtendedOperations.NavajoRecoveryFlag" [@"24:00:00 August Max DayOfMonth, Previous Year"] == 1.00000000) THEN
            $ "ExtendedOperations.NavajoRecoveryFlag" [] := 1.00000000;

      ELSE
          DESCRIPTION          "If the EOWY PE at Navajo reached the Target PE in Sept, then Navajo has recovered and may <br>do EO.   <br>";
      IF_STATEMENT ($ "Navajo.Pool Elevation" [@"24:00:00 September Max DayOfMonth, Previous Year"] >= $ "NavajoData.EOWYTargetPE" []) THEN
            $ "ExtendedOperations.NavajoRecoveryFlag" [] := 1.00000000;

      ELSE
            $ "ExtendedOperations.NavajoRecoveryFlag" [] := 0.00000000;

      END_IF_STATEMENT;

      END_IF_STATEMENT;

      END_IF_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{c44738a2-b64f-4d91-9957-3ff224fb8a1c}";;

  END
  UUID "{cbf50a67-b4ac-4cf2-a98b-bd33834295f3}";;

  POLICY_GROUP   "Taylor Park and Aspinall Rules";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Crystal Outflow";
    DESCRIPTION          "Execution Constraint: Only fires if the rule has not successfully fired yet. <br>  <br>Description: Crystal and Morrow Point Reservoirs just need to pass inflow which Blue Mesa is sending down to meet flow requirements while accounting for evaporation in order to maintain a constant storage. Blue Mesa releases do not attempt to get Crystal to its storage target if it not already there. Instead Crystal holds back/releases more water in the first timestep to meet this goal. This logic should be revisited later. UBConstrainedOutflow() prevents this from exceeding min/max constraints.  <br>  <br>Slots Set: Crystal.Outflow ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "CF,20190409: Get Crystal to target Elevation by holding back water.<br><br>CF,20190405: Created to replace old rule Set Morrow Point and Crystal Storage which did not allow for Morrow Point and Crystal to respond to Blue Mesa operations. ";
    BEGIN

      $ "Crystal.Outflow" [@"t"] := "UBConstrainedOutflow"( % "Crystal", "VolumeToFlow"( "ElevationToStorage"( % "Crystal", $ "Crystal.Pool Elevation" [@"t - 1"] ) - "ElevationToStorage"( % "Crystal", $ "BlueMesaData.StorageTargetCrystal" [] ), @"t" ) + $ "Crystal.Inflow" [@"t"] - "VolumeToFlow"( "EstimateEvaporation"( % "Crystal", $ "Crystal.Storage" [@"t - 1"], "ElevationToStorage"( % "Crystal", $ "BlueMesaData.StorageTargetCrystal" [] ), @"t", @"t" ), @"t" ) );

    END
    UUID "{85c1e608-99a9-4211-964e-7723c46bfcdf}";;

    RULE                 "Morrow Point Outflow";
    DESCRIPTION          "Execution Constraint: Only fires if the rule has not successfully fired yet. <br>  <br>Description: Crystal and Morrow Point Reservoirs just need to pass inflow which Blue Mesa is sending down to meet flow requirements while accounting for evaporation in order to maintain a constant storage. Blue Mesa also releases to get Morrow Point to its storage target if it not already there. UBConstrainedOutflow() prevents this from exceeding min/max constraints.  <br>  <br>Slots Set: MorrowPoint.Outflow ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "CF,20190405: Created to replace old rule Set Morrow Point and Crystal Storage which did not allow for Morrow Point and Crystal to respond to Blue Mesa operations. ";
    BEGIN

      $ "MorrowPoint.Outflow" [@"t"] := "UBConstrainedOutflow"( % "MorrowPoint", $ "MorrowPoint.Inflow" [@"t"] - "VolumeToFlow"( "EstimateEvaporation"( % "MorrowPoint", $ "MorrowPoint.Storage" [@"t - 1"], "ElevationToStorage"( % "MorrowPoint", $ "BlueMesaData.StorageTargetMorrowPoint" [] ) COMMENTED_BY "CF: MP should reach target by end of timestep. <br>", @"t", @"t" ) + ( "ElevationToStorage"( % "MorrowPoint", $ "BlueMesaData.StorageTargetMorrowPoint" [] ) - $ "MorrowPoint.Storage" [@"t - 1"] ) COMMENTED_BY "CF: Vol to get MP to target. <br>", @"t" ) );

    END
    UUID "{12e29c1b-8e18-4c2f-8eba-a2e38605d820}";;

    RULE                 "Blue Mesa Operations_EO";
    DESCRIPTION          "Execution Constraint: Only fires if PowellForecastDeficitFlag is set and the rule has not successfully fired yet. <br>  <br>Description: This rule uses the Function BlueMesaOutflowCalc_EO which applies a new EO rule curve as a PE target in addition to normal release considerations. Also calculate AdditionalBlueMesaRelease. <br>  <br>Slots Set: BlueMesa.Outflow, ExtendedOperations.AdditionalBlueMesaRelease<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND $ "ExtendedOperations.PowellForecastDeficitFlag" [] == 1.00000000;
    NOTES                "CF,20190405: Rule updated to apply UBConstrainedOutflow()<br><br>CF, 20171030: Rules addapted from MTOM by Conor Felletter. <br>";
    BEGIN

      WITH_STATEMENT (NUMERIC blueMesaRelease = "UBConstrainedOutflow"( % "BlueMesa", "BlueMesaOutflowCalc_EO"(  ) )) DO
            $ "ExtendedOperations.AdditionalBlueMesaRelease" [] := blueMesaRelease - $ "BlueMesa.Outflow" [];

            $ "BlueMesa.Outflow" [] := blueMesaRelease;

      END_WITH_STATEMENT;

    END
    UUID "{c3441c4f-f525-471c-bb1b-ca688afae400}";;

    RULE                 "Blue Mesa Operations";
    DESCRIPTION          "Execution Constraint: Only fires if BlueMesa.Outflow is NaN and the rule has not successfully fired yet. <br>  <br>Description: This rule uses the Function BlueMesaOutflowCalc to determine monthly releases from Blue Mesa Reservoir <br>  <br>Slots Set: BlueMesa.Outflow <br><br>DEVELOPMENT NOTES<br>CF, 20171030: Rules addapted from MTOM by Conor Felletter. <br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "BlueMesa.Outflow" [];
    NOTES                "CF,20190405: Rule updated to apply UBConstrainedOutflow()<br><br>CF, 20171030: Rules addapted from MTOM by Conor Felletter. <br>";
    BEGIN

      $ "BlueMesa.Outflow" [] := "UBConstrainedOutflow"( % "BlueMesa", "BlueMesaOutflowCalc"(  ) );

    END
    UUID "{165e5866-1020-4836-ada3-a8293710f975}";;

    RULE                 "Calculate May Release Volume";
    DESCRIPTION          "Execution Constraint: Only fires on the first day of the year or first day of the run <br>  <br>Description: Calculates the Total May release volume by summing up the daily flow requirements necessary to meet the 2012 ROD Flows for the Whitewater Gage and the Federal Reserve Water Right flows through the Black Canyon. This rule also calculates the daily outflow from Blue Mesa necessary to meet those two flow requirements. That data is written to BlueMesaData.TargetDailyOutflowFromBlueMesa and is for informative purposes only. TP 9/25/2015 <br>  <br>Slots Set: BlueMesaData.MayReleaseVolume, BlueMesaData.TargetDailyOutflowFromBlueMesa_AllDays<br><br>DEVELOPMENT NOTES<br>CF, 20180712: Added MonthlyMayWWPeakFlow. This slot, TargetDailyOutflowFromBlueMesa_AllDays, and MayReleaseVolume are for informative purposes only and these value is recalculated later by BlueMesaOutflowCalc. This will only be the outflow volume from BM if MeetDownstreamFlowTargets controls the BM release.  <br><br>CF, 20171030: Rules addapted from MTOM by Conor Felletter. <br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep" OR "GetMonth"( @"t" ) == 1.00000000 AND "GetRunCycleIndex"(  ) == 1.00000000;
    NOTES                "CF, 20171030: Rules addapted from MTOM by Conor Felletter. <br><br>SC 20101227: This rule calculates the preliminary daily flow targets for the flow through the Black Cayone that satisfies the Federal Reserve Water Right for the entire year of a model run.  The ramp up and down to the peak date are included.   This rule will set each day to either the ramp up or down value, the peak flow (as determined on the algorithm to satisfy the Water Right) or the base flow value for any day outside of this range for the Flow through the Black Canyon.  Though the model is monthly, these values are written to a daily slot on BlueMesaData that will be aggregated and converted to a monthly release from Blue Mesa Res in a subsequent rule (Blue Mesa Operations). - sc 12/27/10";
    BEGIN

      $ "BlueMesaData.MayReleaseVolume" [@"24:00:00 December 31, Current Year"] := FOR ( DATETIME date IN "GetDates"( @"24:00:00 May 1, Current Year", @"24:00:00 May 31, Current Year", "1 days" ) ) STAT_AVE
  IF ( ( date < @"Start Timestep" AND NOT "GetMonth"( date ) == 5.00000000 ) COMMENTED_BY "CF: this won't ever happen I beleive because the statement above it requires it to be May. This <br>could be simplified to just the statement contained in the ELSE" )
  THEN
   $ "BlueMesa.Outflow" ["GetEndDayOfMonth"(  )] / 1.00000000
  ELSE
   "SolveBlueMesaReleaseForDownstreamTargets"( $ "BlueMesaData.TargetDailyWhitewaterFlows" [date], "MaxDayOfMonth"( date ) COMMENTED_BY "CF: Must be month of date (May) not current month (Jan).  <br>", $ "BlueMesaData.TargetDailyBlackCanyonFlows" [date] )
  ENDIF
 ENDFOR COMMENTED_BY "CF: this averages up the values over the May period" * 31.00000000 "day";

    DESCRIPTION          "This is a more general way to run the above during all months. For now its not nessiary but if <br>change May peak date it might be.";
      FOREACH (DATETIME date IN "GetDates"( "DateMax"( @"24:00:00 January 1, Current Year", "GetStartDayOfMonth"(  ) ), @"24:00:00 December 31, Current Year", "1 days" )) DO
            $ "BlueMesaData.TargetDailyOutflowFromBlueMesa_AllDays" [date] := "Max"( "SolveBlueMesaReleaseForDownstreamTargets"( $ "BlueMesaData.TargetDailyWhitewaterFlows" [date], "MaxDayOfMonth"( date ), $ "BlueMesaData.TargetDailyBlackCanyonFlows" [date] ), 0.00000000 "cfs" );

      ENDFOREACH;

      $ "BlueMesaData.MonthlyMayWWPeakFlow" [@"24:00:00 December 31, Current Year"] := FOR ( DATETIME date IN "GetDates"( @"24:00:00 May 1, Current Year", @"24:00:00 May 31, Current Year", "1 days" ) ) STAT_AVE
  $ "BlueMesaData.TargetDailyWhitewaterFlows" [date]
 ENDFOR;

    END
    UUID "{c8350828-4419-4ec3-bedd-e7cb087f9208}";;

    RULE                 "Annual Daily Black Canyon Flow Determination";
    DESCRIPTION          "Execution Constraint: First time step or January and first cycle through the time steps<br> <br>Description: This rule calculates the preliminary daily flow targets for the flow through the Black Canyon that satisfies the Federal Reserve Water Right for the entire year of a model run. The ramp up and down to the peak date are included. This rule will set each day to either the ramp up or down value, the peak flow (as determined on the algorithm to satisfy the Water Right) or the base flow value for any day outside of this range for the Flow through the Black Canyon. Though the model is monthly, these values are written to a daily slot BlueMesaData.TargetDailyBlackCanyonFlows that will be aggregated and converted to a monthly release from Blue Mesa Res in a subsequent rule. <br> <br>Slots Set: BlueMesaData.TargetDailyBlackCanyonFlows<br><br>DEVELOPMENT NOTES<br>AUTHOR, DATE: Unknown<br><br>CF, 20171030: Rules addapted from MTOM by Conor Felletter. <br><br>SC 20101227: This rule calculates the preliminary daily flow targets for the flow through the Black Cayone that satisfies the Federal Reserve Water Right for the entire year of a model run.  The ramp up and down to the peak date are included.   This rule will set each day to either the ramp up or down value, the peak flow (as determined on the algorithm to satisfy the Water Right) or the base flow value for any day outside of this range for the Flow through the Black Canyon.  Though the model is monthly, these values are written to a daily slot on BlueMesaData that will be aggregated and converted to a monthly release from Blue Mesa Res in a subsequent rule (Blue Mesa Operations). - sc 12/27/10";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep" OR "GetMonth"( @"t" ) == 1.00000000;
    NOTES                "CF, 20171030: Rules addapted from MTOM by Conor Felletter. <br><br>SC 20101227: This rule calculates the preliminary daily flow targets for the flow through the Black Cayone that satisfies the Federal Reserve Water Right for the entire year of a model run.  The ramp up and down to the peak date are included.   This rule will set each day to either the ramp up or down value, the peak flow (as determined on the algorithm to satisfy the Water Right) or the base flow value for any day outside of this range for the Flow through the Black Canyon.  Though the model is monthly, these values are written to a daily slot on BlueMesaData that will be aggregated and converted to a monthly release from Blue Mesa Res in a subsequent rule (Blue Mesa Operations). ";
    BEGIN

    DESCRIPTION          "Black Canyon Target Peak Flow";
      WITH_STATEMENT (NUMERIC peakCanyonFlow = $ "BlueMesaData.CanyonPeakFlowTarget" [@"24:00:00 December 31, Current Year"]) DO
          DESCRIPTION          "May Base Flow Value";
      WITH_STATEMENT (NUMERIC mayCanyonBaseFlow = $ "BlueMesaData.MinimumBlackCanyonFlow" [@"24:00:00 May 31, Current Year"]) DO
          DESCRIPTION          "Number of Days of Ramp Up";
      WITH_STATEMENT (NUMERIC daysOfRampUp = ( "Ceiling"( "Ln"( peakCanyonFlow / mayCanyonBaseFlow, 0.00000000 ) / "Ln"( 1.00000000 + $ "BlueMesaData.CanyonRampUpRateToPeak" [], 0.00000000 ), 1.00000000 ) * 1.00000000 "day" ) COMMENTED_BY "CF: Flow can't increase by more than 25% on any given day during the ramp up. The natural log <br>of this ratio calculates the number of days necessary to do this, e.g baseflow*1.25^#ofdays =< <br>peakCanyonFlow. Ceiling() ensures the value is a whole number of days. ") DO
            WITH_STATEMENT (NUMERIC daysOfRampDown = "Ceiling"( "Ln"( mayCanyonBaseFlow / peakCanyonFlow, 0.00000000 ) / "Ln"( 1.00000000 - $ "BlueMesaData.CanyonRampDownRateFromPeak" [], 0.00000000 ), 1.00000000 ) COMMENTED_BY "CF: Similarly flow can't decrease by more than 15% on any given day during the ramp down. " * 1.00000000 "day") DO
            WITH_STATEMENT (DATETIME peakDate = "CompletePartialDate"( "NumberToDate"( $ "BlueMesaData.MayPeakFlowDate" [] ), @"24:00:00 December 31, Current Year" ) COMMENTED_BY "CF: this just adds the year to the value found in MayPeakFlowDate which is only the Month and <br>Day") DO
            WITH_STATEMENT (DATETIME startRampUpDate = peakDate - daysOfRampUp) DO
            WITH_STATEMENT (DATETIME endRampDownDate = peakDate + daysOfRampDown) DO
            FOREACH (DATETIME date IN "GetDates"( "DateMax"( @"24:00:00 January 1, Current Year", @"24:00:00 Current Month Min DayOfMonth, Current Year" ), @"24:00:00 December 31, Current Year", "1 days" )) DO
            WITH_STATEMENT (NUMERIC baseFlow = $ "BlueMesaData.MinimumBlackCanyonFlow" [date]) DO
            $ "BlueMesaData.TargetDailyBlackCanyonFlows" [date] := IF ( date >= @"April 1" AND date <= @"July 25" )
 THEN
  IF ( date >= startRampUpDate AND date < peakDate )
  THEN
   WITH NUMERIC nDaysUp = ( date - startRampUpDate + 1.00000000 "day" ) / 1.00000000 "day" DO
    ( baseFlow * ( 1.00000000 + $ "BlueMesaData.CanyonRampUpRateToPeak" [] ) ^ nDaysUp ) COMMENTED_BY "CF: calc what the flow will be each day during the ramp up. It can only increase by 25% each <br>day"
   ENDWITH
  ELSE
   IF ( date == peakDate )
   THEN
    peakCanyonFlow
   ELSE
    IF ( date > peakDate AND date <= endRampDownDate - 1.00000000 "day" )
    THEN
     WITH NUMERIC nDaysDown = ( date - peakDate ) / 1.00000000 "day" DO
      peakCanyonFlow * ( 1.00000000 - $ "BlueMesaData.CanyonRampDownRateFromPeak" [] ) ^ nDaysDown
     ENDWITH
    ELSE
     baseFlow
    ENDIF COMMENTED_BY "CF: ramp down"
   ENDIF
  ENDIF
 ELSE
  baseFlow
 ENDIF;

      END_WITH_STATEMENT;

      ENDFOREACH;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{5f302912-9cc6-4781-b36a-67a01e7e241d}";;

    RULE                 "Annual Daily Whitewater Flow Determination";
    DESCRIPTION          "DESCRIPTION: This rule calculates the preliminary daily flow targets for the Whitewater Gage for the entire year of a model run. They are preliminary in that the ramp up and ramp down from the peak flow target are not included yet. This rule will set each day to either the shoulder flow, the peak flow (as determined on the Spring Peak And Duration Canyon Targets slot) or the base flow value for any day outside of this range for the Whitewater Gage. Though the model is monthly, these values are written to a daily slot on BlueMesaData.TargetDailyWhitewaterFlows that will be aggregated and converted to a monthly release from Blue Mesa Res in a subsequent rule (Blue Mesa Operations). <br><br>Execution Constraint: First time step or January and first cycle through the time steps <br><br>SLOTS SET: BlueMesaData.TargetDailyWhitewaterFlows<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "CF, 20190512: Add FEIS 2.3.6.3 drought requirements<br><br>CF, 20171030: Rules addapted from MTOM by Conor Felletter. <br><br>MC, 20170705: Added BlueMesaData.WhitewaterOpsAssurance value to the peak and shoulder flows per Rick C.'s recommendation to improve probability of achieving ROD Whitewater targets. The daily flows are then averaged into the local variable MonthlyWhitewaterTarget in the function BlueMesaOutflowCalc<br><br>CF, 5/5/2017:  This rule was restructured so that new slots  Peak & ShoulderFlowDuration. The shoulder flow function was removed since shoulder/half-bank flow is now fixed by the ROD to 8,070. This value is stored in slot BlueMesaData.ShoulderFlowTarget. - CF 5/5/2017<br><br>TP/MC, 9/25/2015: This rule calculates the may peak flow target for the Whitewater Gage, the shoulder flow is set to 8,070 cfs as part of the 2012 ROD, the May Peak Flow Level which is a value between 0 adn 5 that is based on the 2012 ROD for the Aspinall Unit which is calculated with the Blue Mesa Unregulated Inflow for April through July.  The rule also determines the Black Canyon Peak flow that will meet the Federal Reserve Water Right and the April through July volume for Blue Mesa Reservoir unregulated inflow. This rule only fires on the first day of the year or first day of the run.<br>";
    BEGIN

    DESCRIPTION          "ROD peak flow Target";
      WITH_STATEMENT (NUMERIC peakFlow = $ "BlueMesaData.WhitewaterPeakFlowTarget" [@"24:00:00 December 31, Current Year"]) DO
          DESCRIPTION          "ROD Shoulder Flow Target";
      WITH_STATEMENT (NUMERIC shoulderFlow = $ "BlueMesaData.HalfBankFlow" []) DO
          DESCRIPTION          "ROD Peak Flow Hydrologic Year classification,";
      WITH_STATEMENT (NUMERIC level = $ "BlueMesaData.GunnisonHClass" [@"24:00:00 December 31, Current Year"]) DO
          DESCRIPTION          "Number of Days at Peak Flow based on the ROD Target";
      WITH_STATEMENT (NUMERIC daysOfPeak = $ "BlueMesaData.PeakFlowDuration" [@"24:00:00 December 31, Current Year"]) DO
            WITH_STATEMENT (NUMERIC daysOfShoulder = $ "BlueMesaData.ShoulderFlowDuration" [@"24:00:00 December 31, Current Year"]) DO
            WITH_STATEMENT (DATETIME peakDate = "CompletePartialDate"( "NumberToDate"( $ "BlueMesaData.MayPeakFlowDate" [] COMMENTED_BY "Currently this is always set to May 15" ), @"24:00:00 December 31, Current Year" )) DO
            WITH_STATEMENT (DATETIME startShoulderFlowDate = peakDate - daysOfShoulder / 2.00000000) DO
            WITH_STATEMENT (DATETIME endShoulderDate = startShoulderFlowDate + daysOfShoulder - 1.00000000 "day") DO
            WITH_STATEMENT (DATETIME startPeakFlowDate = peakDate - daysOfPeak / 2.00000000) DO
            WITH_STATEMENT (DATETIME endPeakFlowDate = startPeakFlowDate + daysOfPeak - 1.00000000 "day") DO
            FOREACH (DATETIME date IN "GetDates"( @"24:00:00 Current Month Min DayOfMonth, Current Year", @"24:00:00 Current Month Max DayOfMonth, Current Year", "1 Days" ) COMMENTED_BY "20190430,CF: Changed to only compute one month at a time.   <br>") DO
            WITH_STATEMENT (NUMERIC baseFlow = IF ( ( ( "GetMonth"( @"t" ) == 6.00000000 OR "GetMonth"( @"t" ) == 7.00000000 ) COMMENTED_BY "Baseflow for Dry and Mod Dry is only > 900 cfs in Jun-July so only apply to those months.  <br>" AND ( $ "BlueMesaData.GunnisonHClass" [@"24:00:00 December 31, Current Year"] IN { 0.00000000 , 1.00000000 } AND $ "BlueMesa.Storage" [@"t - 1"] < 600000.00000000 "acre-feet" ) ) COMMENTED_BY "FEIS 2.3.6.3, second bullet    <br>" )
 THEN
  900.00000000 "cfs"
 ELSE
  $ "BlueMesaData.BaseFlowTarget" [date, level]
 ENDIF) DO
            $ "BlueMesaData.TargetDailyWhitewaterFlows" [date] := IF ( date >= @"April 1" AND date <= @"July 25" )
 THEN
  IF ( date >= startShoulderFlowDate )
  THEN
   IF ( date >= startPeakFlowDate AND date <= endPeakFlowDate )
   THEN
    ( peakFlow + $ "BlueMesaData.WhitewaterOpsAssurance" [] ) COMMENTED_BY "This is the period of time to ramp up to the Peak flow, this is assuming that the ramp up will only <br>be for about one day, this can be edited if this logic needs to be more precise. "
   ELSE
    IF ( date <= endShoulderDate )
    THEN
     shoulderFlow + $ "BlueMesaData.WhitewaterOpsAssurance" []
    ELSE
     baseFlow
    ENDIF
   ENDIF
  ELSE
   baseFlow
  ENDIF
 ELSE
  baseFlow
 ENDIF;

      END_WITH_STATEMENT;

      ENDFOREACH;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{6bf3686e-4881-4f2d-b453-c107b96dca9e}";;

    RULE                 "Calculate Gunnison Flow Targets";
    DESCRIPTION          "Execution Constraint: First time step, first run cycle <br>  <br>Description: This rule calculates: <br>- The may peak flow target for the Whitewater Gage. <br>- The May Peak Flow Level/hydrologic year type which is a value between 0 (Dry) and 5 (Wet) that is based on the 2012 ROD which is calculated with the Blue Mesa Unregulated Inflow for April-July. <br>- The Black Canyon Peak flow that will meet the Federal Reserve Water Right <br>- The April through July volume for Blue Mesa Reservoir unregulated inflow.   <br><br>Slots Set: BlueMesaData.WhitewaterPeakFlowTarget, BlueMesaData.GunnisonHClass, BlueMesaData.CanyonPeakFlowTarget, BlueMesaData.BlueMesaAprilThroughJulyVolume ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "CF, 20190512: Add FEIS 2.3.6.3 drought requirements<br><br>CF, 20171030: Rules addapted from MTOM by Conor Felletter. ";
    BEGIN

      WITH_STATEMENT (NUMERIC currentForecast = "SumFlowsToVolume"( $ "BlueMesaData.UnregulatedInflow", @"24:00:00 April 30, Current Year", @"24:00:00 July 31, Current Year" ) COMMENTED_BY "CF: This is current proxy for unregulated forecast. The method uses natural flows instead and is <br>a &quot;perfect forecast.&quot; See Alan's code for FG on how to change this. Same as summing monthly <br>values from slot BlueMesaData.UnregulatedInflow.") DO
            $ "BlueMesaData.BlueMesaAprilThroughJulyVolume" [@"24:00:00 December 31, Current Year"] := currentForecast;

            WITH_STATEMENT (NUMERIC HClass = "CalcGunnisonHClass"( currentForecast )) DO
            $ "BlueMesaData.GunnisonHClass" [@"24:00:00 December 31, Current Year"] := HClass;

            $ "BlueMesaData.WhitewaterPeakFlowTarget" [@"24:00:00 December 31, Current Year"] := IF ( ( ( "GetMonth"( @"t" ) > 3.00000000 AND NOT IsNaN $ "BlueMesaData.GunnisonHClass" [@"24:00:00 December 31, Previous Year"] ) COMMENTED_BY "Have value for Mar & April Storage.  <br>" AND ( $ "BlueMesaData.GunnisonHClass" [@"24:00:00 December 31, Current Year"] == 1.00000000 AND ( $ "BlueMesaData.GunnisonHClass" [@"24:00:00 December 31, Previous Year"] IN { 0.00000000 , 1.00000000 } AND ( $ "BlueMesa.Storage" [@"24:00:00 March 31, Current Year"] < 400000.00000000 "acre-feet" OR $ "BlueMesa.Storage" [@"24:00:00 April 30, Current Year"] < 400000.00000000 "acre-feet" ) ) ) ) COMMENTED_BY "FEIS 2.3.6.3, third bullet     <br>" )
 THEN
  5000.00000000 "cfs"
 ELSE
  "CalcGunnisonWhitewaterPeakFlowTarget"( HClass, currentForecast )
 ENDIF;

            $ "BlueMesaData.CanyonPeakFlowTarget" [@"24:00:00 December 31, Current Year"] := "CalcCanyonPeakFlowTarget"( currentForecast );

          DESCRIPTION          "Currently this only sets equal to value in table no interperlation";
      $ "BlueMesaData.PeakFlowDuration" [@"24:00:00 December 31, Current Year"] := $ "BlueMesaData.GunnisonDurationTargets" [HClass, 2.00000000];

          DESCRIPTION          "Currently this only sets equal to value in table no interperlation";
      $ "BlueMesaData.ShoulderFlowDuration" [@"24:00:00 December 31, Current Year"] := IF ( ( "GetMonth"( @"t" ) > 3.00000000 AND NOT IsNaN $ "BlueMesaData.GunnisonHClass" [@"24:00:00 December 31, Previous Year"] ) COMMENTED_BY "FEIS 2.3.6.3, first bullet   <br>" AND ( $ "BlueMesaData.GunnisonHClass" [@"24:00:00 December 31, Previous Year"] == 0.00000000 AND ( $ "BlueMesaData.GunnisonHClass" [@"24:00:00 December 31, Current Year"] IN { 3.00000000 , 4.00000000 , 5.00000000 } AND ( $ "BlueMesa.Storage" [@"24:00:00 December 31, Previous Year"] < 522000.00000000 "acre-feet" AND $ "BlueMesa.Storage" [@"24:00:00 March 31, Current Year"] < 400000.00000000 "acre-feet" ) ) ) )
 THEN
  $ "BlueMesaData.GunnisonDurationTargets" [HClass - 1.00000000, 1.00000000]
 ELSE
  $ "BlueMesaData.GunnisonDurationTargets" [HClass, 1.00000000]
 ENDIF;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{8b74c275-cd72-44ae-8066-2356e78551e4}";;

    RULE                 "Taylor Park Rule Curve";
    DESCRIPTION          "This rule fires monthly and sets the storage for Taylor Park. It computes the storage based on the whichever release demand is greater - the release to meet downstream demands (between Taylor Park and Blue Mesa) or the release to meet the storage rule curve.  <br><br>DEVELOPMENT NOTES<br>CF, 20171030: Rules addapted from MTOM by Conor Felletter. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "TaylorPark.Outflow" [] OR "HasRuleFiredSuccessfully"( "ThisRule" ) COMMENTED_BY "CF: This rule isn't firing in January for some reason now so add this. <br>";
    NOTES                "";
    BEGIN

      $ "TaylorPark.Outflow" [] := "SolveOutflow"( % "TaylorPark", $ "TaylorPark.Inflow" [], "ComputeStorageAtGivenOutflow"( % "TaylorPark", "Max"( "ComputeOutflowAtRuleCurveStorage"( % "TaylorPark" ), "ComputeDemandsBelow"( % "TaylorPark" ) ) ), $ "TaylorPark.Storage" [@"t - 1"], @"t" );

    END
    UUID "{c97f4d76-f720-47ec-9a21-288d9bdf8654}";;

  END
  UUID "{5cc69f66-716e-467d-bba8-6515d3029afd}";;

  POLICY_GROUP   "Flaming Gorge Daily Operations - EO";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Calculate Daily Jensen Flows";
    DESCRIPTION          "Execution Constraint: None<br>  <br>Description: Calculates the daily Jensen flow using daily FG releases and daily Yampa flows with the assumption that FG releases are lagged one day.<br>  <br>Slots Set: DailyFlows.JensenDaily";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "CF: Moved to after EO rules.";
    BEGIN

    DESCRIPTION          "Calculates the daily Jensen flow using daily FG releases and daily Yampa flows with the <br>assumption that FG releases are lagged one day. <br>";
      FOREACH (DATETIME date IN "GetDates"( @"24:00:00 Current Month Min DayOfMonth, Current Year", @"24:00:00 Current Month Max DayOfMonth, Current Year", "1 days" )) DO
            $ "DailyFlows.JensenDaily" [date] := IF ( @"t" == "RunStartDate"(  ) )
 THEN
  $ "DailyFlows.FlamingGorgeDaily" [date]
 ELSE
  $ "DailyFlows.FlamingGorgeDaily" [date - 1.00000000 "day"]
 ENDIF + IF ( "GetMonth"( @"t" ) >= 4.00000000 AND "GetMonth"( @"t" ) <= 7.00000000 )
 THEN
  $ "DailyFlows.YampaDailyDeerlodgeDepleted" [date]
 ELSE
  $ "YampaAtDeerlodge.Gage Inflow" []
 ENDIF;

      ENDFOREACH;

    END
    UUID "{ad13d1f5-d50d-4c68-9b7d-9dbfc7f18c30}";;

    RULE                 "Fill Daily Flaming Gorge Releases for Months Outside of April-August_EO";
    DESCRIPTION          "EO Difference: Only slot values used.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "MonthIs"( { "April" , "May" , "June" , "July" , "August" } ) AND $ "ExtendedOperations.PowellForecastDeficitFlag" [] == 1.00000000;
    NOTES                "";
    BEGIN

    DESCRIPTION          "Sets the daily FG releases and daily Yampa releases to the average monthly <br>FG outflow and Yampa gaged outflow, respectively.";
      FOREACH (DATETIME date IN "GetDates"( @"24:00:00 Current Month Min DayOfMonth, Current Year", @"24:00:00 Current Month Max DayOfMonth, Current Year", "1 days" )) DO
            $ "DailyFlows.FlamingGorgeDaily" [date] := $ "FlamingGorge.Outflow" [];

            $ "DailyFlows.YampaDailyDeerlodgeDepleted" [date] := $ "YampaAtDeerlodge.Gage Outflow" [];

      ENDFOREACH;

    END
    UUID "{d400b2e0-e871-43eb-80cf-d125af0d6788}";;

    RULE                 "Sum Daily Flaming Gorge Release Schedule to Monthly_EO";
    DESCRIPTION          "EO Difference:  New logic checks if releases will bring FG below FGExOpsTrigger, if so release AbsoluteMinRelease";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "MonthIs"( { "April" , "May" , "June" , "July" , "August" } ) AND $ "ExtendedOperations.PowellForecastDeficitFlag" [] == 1.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      $ "FlamingGorge.Outflow" [] := "UBConstrainedOutflow"( % "FlamingGorge", IF ( ( $ "FlamingGorge.Storage" [@"t - 1"] - "SumFlowsToVolume"( $ "DailyFlows.FlamingGorgeDaily", @"24:00:00 Current Month Min DayOfMonth, Current Year", @"24:00:00 Current Month Max DayOfMonth, Current Year" ) - "EstimateEvaporation"( % "FlamingGorge", $ "FlamingGorge.Storage" [@"t - 1"], $ "FlamingGorge.Storage" [@"t - 1"] - "SumFlowsToVolume"( $ "DailyFlows.FlamingGorgeDaily", @"24:00:00 Current Month Min DayOfMonth, Current Year", @"24:00:00 Current Month Max DayOfMonth, Current Year" ), @"t", @"t" ) < "ElevationToStorage"( % "FlamingGorge", $ "ExtendedOperations.FGExOpsTrigger" [] ) ) COMMENTED_BY "EO <br>" )
 THEN
  $ "FlamingGorgeData.AbsoluteMinRelease" []
 ELSE
  "VolumeToFlow"( "SumFlowsToVolume"( $ "DailyFlows.FlamingGorgeDaily", @"24:00:00 Current Month Min DayOfMonth, Current Year", @"24:00:00 Current Month Max DayOfMonth, Current Year" ), @"t" ) COMMENTED_BY "Normal Ops. Sets FG outflow to the aggregated daily release volume.  <br>"
 ENDIF );

      IF_STATEMENT ("VolumeToFlow"( "SumFlowsToVolume"( $ "DailyFlows.FlamingGorgeDaily", @"24:00:00 Current Month Min DayOfMonth, Current Year", @"24:00:00 Current Month Max DayOfMonth, Current Year" ), @"t" ) > "SolveOutflow"( % "FlamingGorge", $ "FlamingGorge.Inflow" [@"t"], 1.00000000 "acre-ft", $ "FlamingGorge.Storage" [@"t - 1"], @"t" )) THEN
            FOREACH (DATETIME date IN "GetDates"( @"24:00:00 Current Month Min DayOfMonth, Current Year", @"24:00:00 Current Month Max DayOfMonth, Current Year", "1 days" )) DO
            $ "DailyFlows.FlamingGorgeDaily" [date] := "UBConstrainedOutflow"( % "FlamingGorge", "VolumeToFlow"( "SumFlowsToVolume"( $ "DailyFlows.FlamingGorgeDaily", @"24:00:00 Current Month Min DayOfMonth, Current Year", @"24:00:00 Current Month Max DayOfMonth, Current Year" ), @"t" ) );

      ENDFOREACH;

      END_IF_STATEMENT;

    END
    UUID "{868dfef3-e188-4634-be6a-a58cb52daf03}";;

    RULE                 "Min Flow in Extremely Dry Years with Low Storage_EO";
    DESCRIPTION          "EO Difference: Only slot values used.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT $ "ExtendedOperations.PowellForecastDeficitFlag" [] == 1.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "CF, 20181212: Exec Const removed, rule now fires in all timesteps. Rule moved earlier in priority than Sum Daily. Added a constraint on outflow via FGConstrainedOutflow() to MinFlow. AbsoluteMinRelease no longer needed since it was changed to MinFlow of 800 cfs based on the latest FEIS according to HP.  Rule sets the LowReleaseFlag when FG is releasing max water in FG or MinFlow in HClass = 0 and PE < MinReleaseTrigger. Fixes to allow running VIC. ";
    BEGIN

      IF_STATEMENT ($ "FlamingGorge.Pool Elevation" [] < $ "FlamingGorgeData.MinReleaseTrigger" [] AND $ "FlamingGorgeData.BaseFlowHClass" [] == 0.00000000 AND NOT "MonthIs"( { "May" , "June" , "July" } )) THEN
            $ "FlamingGorge.Outflow" [] := "UBConstrainedOutflow"( % "FlamingGorge", $ "FlamingGorgeData.MinFlow" [] );

            $ "FlamingGorgeData.LowReleaseFlag" [] := 1.00000000;

      END_IF_STATEMENT;

    END
    UUID "{356f74a8-1086-474c-bb48-ffe777f6b2de}";;

    RULE                 "Adjust Daily for August Base Flow_EO";
    DESCRIPTION          "EO Difference: Sets a new baseflow that would meet the entire Powell Forecast Deficit if PE[@t-1] was above the FGExOpsTrigger (5890'). This cannot exceed exceed BF magnitude limits.<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "MonthIs"( { "August" } ) AND $ "ExtendedOperations.PowellForecastDeficitFlag" [] == 1.00000000;
    NOTES                "";
    BEGIN

    DESCRIPTION          "Determines if July releases were at power plant or bypass capacity during <br>moderately wet and wet hydrology and ramps down in August.  <br>August ramp down is contained in the Flow Recommendations.";
      WITH_STATEMENT (NUMERIC RampRate = $ "FlamingGorgeData.BaseFlowDownrampRateNoUnits" [$ "FlamingGorgeData.BaseFlowHClass" [@"24:00:00 April Max DayOfMonth, Current Year"], 0.00000000] * 1.00000000 "cfs") DO
            WITH_STATEMENT (NUMERIC DaysToDownRamp = "RoundToNearestDay"( ( $ "DailyFlows.FlamingGorgeDaily" [@"24:00:00 July Max DayOfMonth, Current Year"] - $ "FlamingGorge.Outflow" [] ) / RampRate * 1.00000000 "day" )) DO
            IF_STATEMENT ($ "DailyFlows.FlamingGorgeDaily" [@"24:00:00 July Max DayOfMonth, Current Year"] > $ "FlamingGorge.Outflow" [] + RampRate) THEN
            FOREACH (LIST AugustFlows IN "AugustDownRamp"(  )) DO
            $ "DailyFlows.FlamingGorgeDaily" [GET @INDEX 0.00000000 FROM AugustFlows] := GET @INDEX 1.00000000 FROM AugustFlows;

      ENDFOREACH;

      ELSE
            FOREACH (DATETIME date IN "GetDates"( @"24:00:00 Current Month Min DayOfMonth, Current Year", @"24:00:00 Current Month Max DayOfMonth, Current Year", "1 days" )) DO
            $ "DailyFlows.FlamingGorgeDaily" [date] := IF ( % "FlamingGorge" & "Pool Elevation" [@"t - 1"] > $ "ExtendedOperations.FGExOpsTrigger" [] AND % "ExtendedOperations" & "PowellForecastDeficitFlag" [] == 1.00000000 )
 THEN
  "Min"( ( "Min"( "ElevationToStorage"( % "Powell", $ "ExtendedOperations.PowellProtectedElevation" [] ) COMMENTED_BY "Ensures that no matter how large the deficit FG will never consider releasing more than Powell's <br>storage below 3525' <br>", ( $ "ExtendedOperations.PowellForecastDeficit" [@"24:00:00 August 31, Current Year"] * - 1.00000000 ) COMMENTED_BY "Deficits are negative.   <br>" ) / 8.00000000 "month" ) COMMENTED_BY "Baseflow to meet entire Powell Forecast Deficit.     <br>" + "Max"( "GetFGBaseFlowMagnitude"(  ), "FGTargetHWGivenInflowOneMonth"( $ "FlamingGorgeData.MaxPE" [] ) ), $ "FlamingGorgeData.BaseFlowMagnitudeLimits" [$ "FlamingGorgeData.BaseFlowHClass" [], 1.00000000] COMMENTED_BY "Don't exceed BF magnitude limits.   <br>" )
 ELSE
  "Max"( "GetFGBaseFlowMagnitude"(  ), "FGTargetHWGivenInflowOneMonth"( $ "FlamingGorgeData.MaxPE" [] ) )
 ENDIF;

      ENDFOREACH;

      END_IF_STATEMENT;

            FOREACH (DATETIME date IN "GetDates"( @"24:00:00 Current Month Min DayOfMonth, Current Year", @"24:00:00 Current Month Max DayOfMonth, Current Year", "1 days" )) DO
            $ "DailyFlows.YampaDailyDeerlodgeDepleted" [date] := $ "YampaAtDeerlodge.Gage Outflow" [];

      ENDFOREACH;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{ff0c32b9-d015-4503-806a-59f780427c8c}";;

    RULE                 "Set Flaming Gorge Daily April to July Schedule_EO";
    DESCRIPTION          "EO Difference: Use MakeDailyFlamingGorgeReleaseDateandFlowList_EO( PowellForecastDeficitFlag[] ) for EO<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "MonthIs"( { "April" , "May" , "June" , "July" } ) AND $ "ExtendedOperations.PowellForecastDeficitFlag" [] == 1.00000000;
    NOTES                "";
    BEGIN

    DESCRIPTION          "Rule fires in Apr, May, June, July and sets the daily release schedule which is put together in the<br>function. It must fire each month to know where the reservoir was at at the end of the previous<br>month and update the remaining daily schedule as far as base flow goes. Daily releases are not<br>changed back in time and only replace the rest of the remaining daily schedule through July 31. -tv 8.17.12";
      FOREACH (LIST dateandflow IN "MakeDailyFlamingGorgeReleaseDateandFlowList_EO"( IF ( "MonthIs"( { "April" } ) )
 THEN
  @"24:00:00 April 1, Current Year"
 ELSE
  IF ( "MonthIs"( { "May" } ) )
  THEN
   @"24:00:00 May 1, Current Year"
  ELSE
   IF ( "MonthIs"( { "June" } ) )
   THEN
    @"24:00:00 June 1, Current Year"
   ELSE
    @"24:00:00 July 1, Current Year" COMMENTED_BY "July"
   ENDIF
  ENDIF
 ENDIF, $ "ExtendedOperations.PowellForecastDeficitFlag" [] )) DO
          DESCRIPTION          "Only actually set the daily slots for the current month";
      IF_STATEMENT ("GetMonth"( GET @INDEX 0.00000000 FROM dateandflow ) == "GetMonth"( @"t" )) THEN
            $ "DailyFlows.FlamingGorgeDaily" [GET @INDEX 0.00000000 FROM dateandflow] := GET @INDEX 1.00000000 FROM dateandflow;

      END_IF_STATEMENT;

      ENDFOREACH;

    END
    UUID "{bf417d0f-aa15-4fb4-83de-664db154724e}";;

    RULE                 "Release to Meet ULDE_EO";
    DESCRIPTION          "EO Difference: Sets a new baseflow that would meet the entire Powell Forecast Deficit if PE[@t-1] was above the FGExOpsTrigger (5890'). This cannot exceed exceed BF magnitude limits.<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "MonthIs"( { "March" , "April" } ) AND $ "ExtendedOperations.PowellForecastDeficitFlag" [] == 1.00000000;
    NOTES                "CF, 20190512: Constraint changed to UBConstrainedOutflow() to be more generic<br>";
    BEGIN

    DESCRIPTION          "If it is March or April, then release whatever necessary to meet the May 1 ULDE";
      $ "FlamingGorge.Outflow" [] := "UBConstrainedOutflow"( % "FlamingGorge", IF ( "MonthIs"( { "March" } ) )
 THEN
  IF ( % "FlamingGorge" & "Pool Elevation" [@"t - 1"] > $ "ExtendedOperations.FGExOpsTrigger" [] AND % "ExtendedOperations" & "PowellForecastDeficitFlag" [] == 1.00000000 )
  THEN
   "Min"( ( "Min"( "ElevationToStorage"( % "Powell", $ "ExtendedOperations.PowellProtectedElevation" [] ) COMMENTED_BY "Ensures that no matter how large the deficit FG will never consider releasing more than Powell's <br>storage below 3525'.    <br>", ( $ "ExtendedOperations.PowellForecastDeficit" [@"24:00:00 August 31, Previous Year"] * - 1.00000000 ) COMMENTED_BY "Deficits are negative.   <br>" ) / 8.00000000 "month" ) COMMENTED_BY "Baseflow to meet entire Powell Forecast Deficit.     <br>" + "GetFGBaseFlowMagnitude"(  ), $ "FlamingGorgeData.BaseFlowMagnitudeLimits" [$ "FlamingGorgeData.BaseFlowHClass" [], 1.00000000] COMMENTED_BY "Don't exceed BF magnitude limits.   <br>" )
  ELSE
   "GetFGBaseFlowMagnitudeUnconstrained"(  )
  ENDIF
 ELSE
  "GetFGBaseFlowMagnitudeUnconstrained"(  )
 ENDIF );

    END
    UUID "{c6fe8e53-7632-4fb3-b197-e1306097d15e}";;

    RULE                 "PPP_April_Classification_Adjustment";
    DESCRIPTION          "Execution Constraint: PE[t-1] > 5890' AND Is April-July AND  ExtendedOperations.PowellForecastDeficitFlag = 1<br><br>Description:  Adjust baseflow and spring H Class up for EO. Recover by adjusting H Class down if Powell is above its recovery trigger PE and FG is below its.  <br><br>Slots Set: FlamingGorgeData.BaseFlowHClass & SpringHClass";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "MonthIs"( { "April" , "May" , "June" , "July" } ) AND % "FlamingGorge" & "Pool Elevation" [@"t - 1"] > $ "ExtendedOperations.FGExOpsTrigger" [] AND $ "ExtendedOperations.PowellForecastDeficitFlag" [] == 1.00000000;
    NOTES                "";
    BEGIN

      $ "FlamingGorgeData.SpringHClass" [] := IF ( % "ExtendedOperations" & "PowellForecastDeficitFlag" [] == 1.00000000 )
 THEN
  "Min"( $ "FlamingGorgeData.SpringHClass" [] + % "ExtendedOperations" & "FGHClassAdj" [], 4.00000000 )
 ELSE
  IF ( % "FlamingGorge" & "Pool Elevation" [@"t - 4"] < % "ExtendedOperations" & "FGElevationRecoveryTrigger" [] AND % "Powell" & "Pool Elevation" [@"t - 4"] > % "ExtendedOperations" & "PowellElevationRecoveryTrigger" [] )
  THEN
   "Max"( $ "FlamingGorgeData.SpringHClass" [] - % "ExtendedOperations" & "FGHClassAdjBase" [] COMMENTED_BY "Only adjust down 1 for recovery.  <br>", 0.00000000 )
  ELSE
   $ "FlamingGorgeData.SpringHClass" []
  ENDIF
 ENDIF;

      $ "FlamingGorgeData.BaseFlowHClass" [] := IF ( % "ExtendedOperations" & "PowellForecastDeficitFlag" [] == 1.00000000 )
 THEN
  "Min"( $ "FlamingGorgeData.BaseFlowHClass" [] + % "ExtendedOperations" & "FGHClassAdjBase" [], 4.00000000 )
 ELSE
  IF ( % "FlamingGorge" & "Pool Elevation" [@"t - 4"] < % "ExtendedOperations" & "FGElevationRecoveryTrigger" [] AND % "Powell" & "Pool Elevation" [@"t - 4"] > % "ExtendedOperations" & "PowellElevationRecoveryTrigger" [] )
  THEN
   "Max"( $ "FlamingGorgeData.BaseFlowHClass" [] - % "ExtendedOperations" & "FGHClassAdjBase" [], 0.00000000 )
  ELSE
   $ "FlamingGorgeData.BaseFlowHClass" []
  ENDIF
 ENDIF;

    END
    UUID "{461cc474-5f0d-4770-b013-b76e1e394c7e}";;

    RULE                 "Spring Flow Hydrologic Classification_EO";
    DESCRIPTION          "EO Difference: Only slot values used.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetMonthAsString"( @"t" ) IN { "March" , "April" , "May" , "June" , "July" } AND $ "ExtendedOperations.PowellForecastDeficitFlag" [] == 1.00000000;
    NOTES                "";
    BEGIN

    DESCRIPTION          "Sets the spring hydrologic classification based on the May 1 forecasted April-July volume.";
      FOREACH (NUMERIC index IN { 0.00000000 , 1.00000000 , 2.00000000 , 3.00000000 , 4.00000000 }) DO
            IF_STATEMENT ($ "FlamingGorgeData.AprJulPercentExceedanceSpringFlow" [] <= $ "FlamingGorgeData.HydrologicClassPercentileLimits" [index, 1.00000000]) THEN
            IF_STATEMENT (IsNaN $ "FlamingGorgeData.SpringHClass" []) THEN
            $ "FlamingGorgeData.SpringHClass" [] := index;

      END_IF_STATEMENT;

      END_IF_STATEMENT;

      ENDFOREACH;

    DESCRIPTION          "Yampa";
      FOREACH (NUMERIC index IN { 0.00000000 , 1.00000000 , 2.00000000 , 3.00000000 , 4.00000000 }) DO
            IF_STATEMENT ($ "FlamingGorgeData.YampaAprJulPercentExceedance" [] <= $ "FlamingGorgeData.HydrologicClassPercentileLimits" [index, 1.00000000]) THEN
            IF_STATEMENT (IsNaN $ "FlamingGorgeData.YampaHClass" []) THEN
            $ "FlamingGorgeData.YampaHClass" [] := index;

      END_IF_STATEMENT;

      END_IF_STATEMENT;

      ENDFOREACH;

    END
    UUID "{6490c7a9-ba19-4cc4-82c2-5865e850ad25}";;

    RULE                 "Base Flow Operations_EO";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "MonthIs"( { "March" , "April" } ) AND $ "ExtendedOperations.PowellForecastDeficitFlag" [] == 1.00000000;
    NOTES                "CF, 20190512: Constraint changed to UBConstrainedOutflow() to be more generic<br>";
    BEGIN

      $ "FlamingGorge.Outflow" COMMENTED_BY "Sets the base flows for all months except March and April.  Base flow releases are set to stay<br>below maximum pool elevation (6039 ft), minimum flows or stay within the base flow range <br>based on the hydrologic classification." [] := "UBConstrainedOutflow"( % "FlamingGorge", IF ( % "FlamingGorge" & "Pool Elevation" [@"t - 1"] > $ "ExtendedOperations.FGExOpsTrigger" [] AND % "ExtendedOperations" & "PowellForecastDeficitFlag" [] == 1.00000000 )
 THEN
  "Min"( IF ( NOT "MonthIs"( { "January" , "February" } ) )
  THEN
   "Min"( "ElevationToStorage"( % "Powell", $ "ExtendedOperations.PowellProtectedElevation" [] ), $ "ExtendedOperations.PowellForecastDeficit" [@"24:00:00 August 31, Current Year"] * - 1.00000000 ) / 8.00000000 "month"
  ELSE
   "Min"( "ElevationToStorage"( % "Powell", $ "ExtendedOperations.PowellProtectedElevation" [] ), $ "ExtendedOperations.PowellForecastDeficit" [@"24:00:00 August 31, Previous Year"] * - 1.00000000 ) / 8.00000000 "month"
  ENDIF + "GetFGBaseFlowMagnitude"(  ), $ "FlamingGorgeData.BaseFlowMagnitudeLimits" [$ "FlamingGorgeData.BaseFlowHClass" [], 1.00000000] ) COMMENTED_BY "EO <br>"
 ELSE
  IF ( $ "FlamingGorge.Storage" [@"t - 1"] >= "ElevationToStorage"( % "FlamingGorge", $ "FlamingGorgeData.MaxPE" [] ) )
  THEN
   "Max"( ( ( $ "FlamingGorge.Storage" [@"t - 1"] - "ElevationToStorage"( % "FlamingGorge", $ "FlamingGorgeData.MaxPE" [] ) + "FlowToVolume"( $ "FlamingGorge.Inflow" [], @"t" ) ) - "EstimateEvaporation"( % "FlamingGorge", $ "FlamingGorge.Storage" [@"t - 1"], $ "FlamingGorge.Storage" [@"t - 1"], @"24:00:00 Current Month Max DayOfMonth, Current Year", @"24:00:00 Current Month Max DayOfMonth, Current Year" ) ) / 1.00000000 "month", $ "FlamingGorgeData.MinFlow" [] )
  ELSE
   "GetFGBaseFlowMagnitude"(  )
  ENDIF
 ENDIF );

    END
    UUID "{4d7a772c-034c-4341-9b50-ddc83ecebc65}";;

    RULE                 "PPP_August_Classification_Adjustment";
    DESCRIPTION          "Execution Constraint: PE[t-1] > 5890' AND Not April-July AND  ExtendedOperations.PowellForecastDeficitFlag = 1<br><br>Description: Adjust baseflow H Class up for EO. Recover by adjusting H Class down if Powell is above its recovery trigger PE and FG is below its.  <br><br>Slots Set: FlamingGorgeData.BaseFlowHClass<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT % "FlamingGorge" & "Pool Elevation" [@"t - 1"] > $ "ExtendedOperations.FGExOpsTrigger" [] AND NOT "MonthIs"( { "April" , "May" , "June" , "July" } ) AND $ "ExtendedOperations.PowellForecastDeficitFlag" [] == 1.00000000;
    NOTES                "";
    BEGIN

      $ "FlamingGorgeData.BaseFlowHClass" [] := IF ( % "ExtendedOperations" & "PowellForecastDeficitFlag" [] == 1.00000000 )
 THEN
  "Min"( $ "FlamingGorgeData.BaseFlowHClass" [] + % "ExtendedOperations" & "FGHClassAdjBase" [], 4.00000000 )
 ELSE
  IF ( % "FlamingGorge" & "Pool Elevation" [@"t - 1"] < % "ExtendedOperations" & "FGElevationRecoveryTrigger" [] AND % "Powell" & "Pool Elevation" [@"t - 1"] > % "ExtendedOperations" & "PowellElevationRecoveryTrigger" [] )
  THEN
   "Max"( $ "FlamingGorgeData.BaseFlowHClass" [] - % "ExtendedOperations" & "FGHClassAdjBase" [], 0.00000000 )
  ELSE
   $ "FlamingGorgeData.BaseFlowHClass" []
  ENDIF
 ENDIF;

    END
    UUID "{5d1bb745-72a5-46be-ab05-d1b38c19e875}";;

    RULE                 "Base Flow Hydrologic Classification_EO";
    DESCRIPTION          "EO Difference: Only slot values used.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT $ "ExtendedOperations.PowellForecastDeficitFlag" [] == 1.00000000 AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

    DESCRIPTION          "Sets the base flow classification based on ROD percent exceedance ranges.  Under ROD<br>compliance, base flows change one classification higher or lower depending upon the <br>previous month's observed unregulated inflow.     <br>";
      FOREACH (NUMERIC index IN { 0.00000000 , 1.00000000 , 2.00000000 , 3.00000000 , 4.00000000 }) DO
            IF_STATEMENT ($ "FlamingGorgeData.AprJulPercentExceedanceBaseFlow" [] <= $ "FlamingGorgeData.HydrologicClassPercentileLimits" [index, 1.00000000]) THEN
            IF_STATEMENT (IsNaN $ "FlamingGorgeData.BaseFlowHClass" []) THEN
            $ "FlamingGorgeData.BaseFlowHClass" [] := IF ( @"t" == "RunStartDate"(  ) )
 THEN
  index
 ELSE
  IF ( index > $ "FlamingGorgeData.BaseFlowHClass" [@"t - 1"] + 1.00000000 )
  THEN
   $ "FlamingGorgeData.BaseFlowHClass" [@"t - 1"] + 1.00000000
  ELSE
   IF ( index < $ "FlamingGorgeData.BaseFlowHClass" [@"t - 1"] - 1.00000000 )
   THEN
    $ "FlamingGorgeData.BaseFlowHClass" [@"t - 1"] - 1.00000000
   ELSE
    index
   ENDIF
  ENDIF
 ENDIF;

      END_IF_STATEMENT;

      END_IF_STATEMENT;

      ENDFOREACH;

    END
    UUID "{ab4f4906-ab7c-4c44-b0ad-723ffb67ffab}";;

    RULE                 "Calc Percent Exceedance_EO";
    DESCRIPTION          "EO Difference: Only slot values used.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT $ "ExtendedOperations.PowellForecastDeficitFlag" [] == 1.00000000;
    NOTES                "";
    BEGIN

      $ "FlamingGorgeData.AprJulPercentExceedanceSpringFlow" [] := 1.00000000 - "PercentRank"( "GetSlotVals"( $ "FlamingGorgeData.AprJulVolAnnual", "GetDate"( "December 31, " CONCAT "GetYearAsString"( "NumberToDate"( $ "FlamingGorgeData.HydrologicClassificationStartYear" [] ) ) ), IF ( $ "HistoricalData.UpdateHistoricRecord" [] == 1.00000000 )
 THEN
  "GetDate"( "December 31, " CONCAT ( GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetYear"( @"t" ) - 1.00000000, "." ) ) )
 ELSE
  "GetDate"( "December 31, " CONCAT "GetYearAsString"( "NumberToDate"( $ "FlamingGorgeData.HydrologicClassificationEndYear" [] ) ) )
 ENDIF ), $ "FlamingGorgeData.AprJulVolSpringFlow" [] );

      $ "FlamingGorgeData.AprJulPercentExceedanceBaseFlow" [] := 1.00000000 - "PercentRank"( "GetSlotVals"( $ "FlamingGorgeData.AprJulVolAnnual", "GetDate"( "December 31, " CONCAT "GetYearAsString"( "NumberToDate"( $ "FlamingGorgeData.HydrologicClassificationStartYear" [] ) ) ), IF ( $ "HistoricalData.UpdateHistoricRecord" [] == 1.00000000 )
 THEN
  "GetDate"( "December 31, " CONCAT ( GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetYear"( @"t" ) - 1.00000000, "." ) ) )
 ELSE
  "GetDate"( "December 31, " CONCAT "GetYearAsString"( "NumberToDate"( $ "FlamingGorgeData.HydrologicClassificationEndYear" [] ) ) )
 ENDIF ), $ "FlamingGorgeData.AprJulVolBaseFlow" [] );

      $ "FlamingGorgeData.YampaAprJulPercentExceedance" [] := 1.00000000 - "PercentRank"( IF ( "GetYear"( "NumberToDate"( $ "FlamingGorgeData.YampaHydrologicClassificationStartYear" [] ) ) < "GetYear"( "RunStartDate"(  ) ) - 1.00000000 AND $ "HistoricalData.UpdateHistoricRecord" [] == 1.00000000 )
 THEN
  IF ( "GetYear"( @"t" ) == "GetYear"( "RunStartDate"(  ) ) )
  THEN
   "GetSlotVals"( $ "FlamingGorgeData.YampaAprJulVolAnnual", "GetDate"( "December 31, " CONCAT "GetYearAsString"( "NumberToDate"( $ "FlamingGorgeData.YampaHydrologicClassificationStartYear" [] ) ) ), "GetDate"( "December 31, " CONCAT "GetYearAsString"( "NumberToDate"( $ "FlamingGorgeData.YampaHydrologicClassificationEndYear" [] ) ) ) )
  ELSE
   WITH LIST futureData = "GetSlotVals"( $ "FlamingGorgeData.YampaAprJulVolAnnual", "GetDate"( "December 31, " CONCAT "GetYearAsString"( "RunStartDate"(  ) ) ), "GetDate"( "December 31, " CONCAT ( GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetYear"( @"t" ) - 1.00000000, "." ) ) ) ) DO
    FOR ( NUMERIC i IN "GetNumbers"( 0.00000000, ( LENGTH futureData ) - 1.00000000, 1.00000000 ) ) WITH LIST result = "GetSlotVals"( $ "FlamingGorgeData.YampaAprJulVolAnnual", "GetDate"( "December 31, " CONCAT "GetYearAsString"( "NumberToDate"( $ "FlamingGorgeData.YampaHydrologicClassificationStartYear" [] ) ) ), "GetDate"( "December 31, " CONCAT "GetYearAsString"( "NumberToDate"( $ "FlamingGorgeData.YampaHydrologicClassificationEndYear" [] ) ) ) ) DO
     APPEND GET @INDEX i FROM futureData ONTO result
    ENDFOR
   ENDWITH
  ENDIF
 ELSE
  "GetSlotVals"( $ "FlamingGorgeData.YampaAprJulVolAnnual", "GetDate"( "December 31, " CONCAT "GetYearAsString"( "NumberToDate"( $ "FlamingGorgeData.YampaHydrologicClassificationStartYear" [] ) ) ), IF ( $ "HistoricalData.UpdateHistoricRecord" [] == 1.00000000 )
  THEN
   "GetDate"( "December 31, " CONCAT ( GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetYear"( @"t" ) - 1.00000000, "." ) ) )
  ELSE
   "GetDate"( "December 31, " CONCAT "GetYearAsString"( "NumberToDate"( $ "FlamingGorgeData.YampaHydrologicClassificationEndYear" [] ) ) )
  ENDIF )
 ENDIF, $ "FlamingGorgeData.YampaAprJulVol" [] );

    END
    UUID "{b0fde4ae-394e-4e2b-aef6-a659ef418fd3}";;

    RULE                 "Calc April July Volume Monthly_EO";
    DESCRIPTION          "EO Difference: Use BaseFlowA-JVolumeUpdate_EO( PowellForecastDeficitFlag[] ) for EO<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT $ "ExtendedOperations.PowellForecastDeficitFlag" [] == 1.00000000;
    NOTES                "";
    BEGIN

    DESCRIPTION          "For spring flow operations we are interested in the april - july <br>volume for the upcoming season beginning in January through April. <br> The May official forecast is used for spring operations through July. <br> This number is needed in march to determine<br>releases to meet the ULDE. ";
      $ "FlamingGorgeData.AprJulVolSpringFlow" [] := "SpringFlowA-JVolumeUpdate"(  );

    DESCRIPTION          "For base flow operations we are interested in the available observed<br>volume in the previous april - july season. Since base flow may actually <br>start in june calculate this number then. The August - December base flows <br>use the observed A-J volume.  Jan-Feb use forecast A-J and ULDE and base flow range.<br>";
      $ "FlamingGorgeData.AprJulVolBaseFlow" [] := "BaseFlowA-JVolumeUpdate_EO"( $ "ExtendedOperations.PowellForecastDeficitFlag" [] );

      $ "FlamingGorgeData.YampaAprJulVol" [] := IF ( "MonthIs"( { "April" } ) )
 THEN
  "SumFlowsToVolume"( $ "YampaAtDeerlodge.Gage Inflow", @"t", @"t + 3" )
 ELSE
  IF ( @"t" == "RunStartDate"(  ) )
  THEN
   0.00000000 "acre-ft"
  ELSE
   $ "FlamingGorgeData.YampaAprJulVol" [@"t - 1"]
  ENDIF
 ENDIF;

    END
    UUID "{221ea1cd-adc7-4727-bf46-5ac3b190ac01}";;

  END
  UUID "{c462350c-edf9-4051-b7af-7cb446757c09}";;

  POLICY_GROUP   "Flaming Gorge Daily Operations";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "FG Normal Rules Are Done";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      $ "ExtendedOperations.FlamingGorgeNormalOpsDoneFlag" [] := 1.00000000;

      $ "ExtendedOperations.FlamingGorgeNormalRelease" [] := $ "FlamingGorge.Outflow" [];

    END
    UUID "{e13df498-ffbb-4134-82ba-7a7ced9d7772}";;

    RULE                 "Fill Daily Flaming Gorge Releases for Months Outside of April-August";
    DESCRIPTION          "Execution Constraint: September-March <br>  <br>Description: Sets the daily FG releases and daily Yampa releases to the average monthly FG outflow and Yampa gaged outflow, respectively. These values are used in Calculate Daily Jensen Flows rule. <br>  <br>Slots Set: DailyFlows.FlamingGorgeDaily, DailyFlows.YampaDailyDeerlodgeDepleted";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "MonthIs"( { "April" , "May" , "June" , "July" , "August" } );
    NOTES                "";
    BEGIN

    DESCRIPTION          "Sets the daily FG releases and daily Yampa releases to the average monthly <br>FG outflow and Yampa gaged outflow, respectively.";
      FOREACH (DATETIME date IN "GetDates"( @"24:00:00 Current Month Min DayOfMonth, Current Year", @"24:00:00 Current Month Max DayOfMonth, Current Year", "1 days" )) DO
            $ "DailyFlows.FlamingGorgeDaily" [date] := $ "FlamingGorge.Outflow" [];

            $ "DailyFlows.YampaDailyDeerlodgeDepleted" [date] := $ "YampaAtDeerlodge.Gage Outflow" [];

      ENDFOREACH;

    END
    UUID "{5d74c2eb-c609-4c1b-ad51-4a4543c433eb}";;

    RULE                 "Sum Daily Flaming Gorge Release Schedule to Monthly";
    DESCRIPTION          "Execution Constraint: April-August <br>  <br>Description: Sets FG outflow to the aggregated daily release volume.<br><br>IF daily flow summation is greater than the amount of water that is in FG reassign daily flows to only release as much water as is in FG (constant value).<br><br> <br>Slots Set: FlamingGorge.Outflow";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "MonthIs"( { "April" , "May" , "June" , "July" , "August" } ) AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "CF, 20190512: Constraint changed to UBConstrainedOutflow() to be more generic. Change to reassignment of daily flows to SolveOutflow(0) since FG is now constrained by Storage = 0 not Storage = DeadCapacity<br>CF, 20181212: Added a constraint on outflow via FGConstrainedOutflow() to allow running VIC hydrology. Change to include an IF daily flow summation is greater than the amount of water that is in FG reassign daily flows to only release as much water as is in FG (constant value).   <br> ";
    BEGIN

      $ "FlamingGorge.Outflow" COMMENTED_BY "Sets FG outflow to the aggregated daily release volume." [] := "UBConstrainedOutflow"( % "FlamingGorge", "VolumeToFlow"( "SumFlowsToVolume"( $ "DailyFlows.FlamingGorgeDaily", @"24:00:00 Current Month Min DayOfMonth, Current Year", @"24:00:00 Current Month Max DayOfMonth, Current Year" ), @"t" ) );

    DESCRIPTION          "CF: If constraint applied set daily flows.  <br>";
      IF_STATEMENT ("VolumeToFlow"( "SumFlowsToVolume"( $ "DailyFlows.FlamingGorgeDaily", @"24:00:00 Current Month Min DayOfMonth, Current Year", @"24:00:00 Current Month Max DayOfMonth, Current Year" ), @"t" ) > "SolveOutflow"( % "FlamingGorge", $ "FlamingGorge.Inflow" [@"t"], 1.00000000 "acre-ft", $ "FlamingGorge.Storage" [@"t - 1"], @"t" )) THEN
            FOREACH (DATETIME date IN "GetDates"( @"24:00:00 Current Month Min DayOfMonth, Current Year", @"24:00:00 Current Month Max DayOfMonth, Current Year", "1 days" )) DO
            $ "DailyFlows.FlamingGorgeDaily" [date] := "UBConstrainedOutflow"( % "FlamingGorge", "VolumeToFlow"( "SumFlowsToVolume"( $ "DailyFlows.FlamingGorgeDaily", @"24:00:00 Current Month Min DayOfMonth, Current Year", @"24:00:00 Current Month Max DayOfMonth, Current Year" ), @"t" ) );

      ENDFOREACH;

      END_IF_STATEMENT;

    END
    UUID "{2dbebec9-5e17-42a4-9c5e-c84b55c1628f}";;

    RULE                 "Min Flow in Extremely Dry Years with Low Storage";
    DESCRIPTION          "Execution Constraint: NA <br>  <br>Description: Flaming Gorge releases 800 cfs to protect the remaining water in storage if Flaming Gorge pool elevation is below MinReleaseTrigger and there is extremely low hydrology (.98 exceedance). This is reduce this further via funcion constraint when FG can't release 800 cfs without draining the live storage. <br><br>The rule sets the LowReleaseFlag when FG is releasing max water in FG (second IF) or MinFlow in HClass = 0 and PE < MinReleaseTrigger (first IF). <br><br>Slots Set: FlamingGorge.Outflow, FlamingGorgeData.LowReleaseFlag Execution Constraint: Not May, June or July ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "CF, 20190512: SolveOutflow [DeadCapacity] assignment of LowReleaseFlag removed since FG is now constrained by Storage = 0 not Storage = DeadCapacity. Constraint changed to UBConstrainedOutflow() to be more generic<br>CF, 20181212: Exec Const removed, rule now fires in all timesteps. Rule moved earlier in priority than Sum Daily. Added a constraint on outflow via FGConstrainedOutflow() to MinFlow. AbsoluteMinRelease no longer needed since it was changed to MinFlow of 800 cfs based on the latest FEIS according to HP.  Rule sets the LowReleaseFlag when FG is releasing max water in FG or MinFlow in HClass = 0 and PE < MinReleaseTrigger. Fixes to allow running VIC. ";
    BEGIN

      IF_STATEMENT ($ "FlamingGorge.Pool Elevation" [] < $ "FlamingGorgeData.MinReleaseTrigger" [] AND $ "FlamingGorgeData.BaseFlowHClass" [] == 0.00000000 AND NOT "MonthIs"( { "May" , "June" , "July" } ) COMMENTED_BY "CF: Old Execution Constraint <br>") THEN
            $ "FlamingGorge.Outflow" [] := "UBConstrainedOutflow"( % "FlamingGorge", $ "FlamingGorgeData.MinFlow" [] );

            $ "FlamingGorgeData.LowReleaseFlag" [] := 1.00000000;

      END_IF_STATEMENT;

    END
    UUID "{d82b6c36-8320-4859-8b52-aa233670f05b}";;

    RULE                 "Adjust Daily for August Base Flow";
    DESCRIPTION          "Execution Constraint: August and rule has not fired successfully<br>  <br>Description: Sets August releases at steady base flows or downramps from high FG releases through July 31st to August base flows. Calculates the daily flow for FlamingGorgeDaily and YampaDailyDeerlodgeDepleted.   <br>  <br>Slots Set: DailyFlows.FlamingGorgeDaily, DailyFlows.YampaDailyDeerlodgeDepleted<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "MonthIs"( { "August" } ) AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

    DESCRIPTION          "Determines if July releases were at power plant or bypass capacity during <br>moderately wet and wet hydrology and ramps down in August.  <br>August ramp down is contained in the Flow Recommendations.";
      WITH_STATEMENT (NUMERIC RampRate = $ "FlamingGorgeData.BaseFlowDownrampRateNoUnits" [$ "FlamingGorgeData.BaseFlowHClass" [@"24:00:00 April Max DayOfMonth, Current Year"], 0.00000000] * 1.00000000 "cfs") DO
            WITH_STATEMENT (NUMERIC DaysToDownRamp = "RoundToNearestDay"( ( $ "DailyFlows.FlamingGorgeDaily" [@"24:00:00 July Max DayOfMonth, Current Year"] - $ "FlamingGorge.Outflow" [] ) / RampRate * 1.00000000 "day" )) DO
            IF_STATEMENT (( $ "DailyFlows.FlamingGorgeDaily" [@"24:00:00 July Max DayOfMonth, Current Year"] > $ "FlamingGorge.Outflow" [] + RampRate ) COMMENTED_BY "CF: Checking if outflow is still above baseflow at start of month.") THEN
            FOREACH (LIST AugustFlows IN "AugustDownRamp"(  )) DO
          DESCRIPTION          "CF: Set the FG daily flow to the value calculated by the function AugustDownRamp  (0)=date, <br>(1)=flow. ";
      $ "DailyFlows.FlamingGorgeDaily" [GET @INDEX 0.00000000 FROM AugustFlows] := GET @INDEX 1.00000000 FROM AugustFlows;

      ENDFOREACH;

      ELSE
            FOREACH (DATETIME date IN "GetDates"( @"24:00:00 Current Month Min DayOfMonth, Current Year", @"24:00:00 Current Month Max DayOfMonth, Current Year", "1 days" )) DO
          DESCRIPTION          "CF: If ramp down has already occured just set all days equal to baseflow.";
      $ "DailyFlows.FlamingGorgeDaily" [date] := "Max"( "GetFGBaseFlowMagnitude"(  ), "FGTargetHWGivenInflowOneMonth"( $ "FlamingGorgeData.MaxPE" [] ) );

      ENDFOREACH;

      END_IF_STATEMENT;

            FOREACH (DATETIME date IN "GetDates"( @"24:00:00 Current Month Min DayOfMonth, Current Year", @"24:00:00 Current Month Max DayOfMonth, Current Year", "1 days" )) DO
            $ "DailyFlows.YampaDailyDeerlodgeDepleted" [date] := $ "YampaAtDeerlodge.Gage Outflow" [];

      ENDFOREACH;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{524768d6-ff94-4cfa-9058-e3c9ad08fef0}";;

    RULE                 "Set Flaming Gorge Daily April to July Schedule";
    DESCRIPTION          "Execution Constraint: April-July <br>  <br>Description: Makes the daily date and flow list using function MakeDailyFlamingGorgeReleaseDateandFlowList and assigns it to the data object.<br>  <br>Slots Set: DailyFlows.FlamingGorgeDaily";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "MonthIs"( { "April" , "May" , "June" , "July" } );
    NOTES                "";
    BEGIN

    DESCRIPTION          "Rule fires in Apr, May, June, July and sets the daily release schedule which is put together in the<br>function. It must fire each month to know where the reservoir was at at the end of the previous<br>month and update the remaining daily schedule as far as base flow goes. Daily releases are not<br>changed back in time and only replace the rest of the remaining daily schedule through July 31. -tv 8.17.12";
      FOREACH (LIST dateandflow IN "MakeDailyFlamingGorgeReleaseDateandFlowList_EO"( IF ( "MonthIs"( { "April" } ) )
 THEN
  @"24:00:00 April 1, Current Year"
 ELSE
  IF ( "MonthIs"( { "May" } ) )
  THEN
   @"24:00:00 May 1, Current Year"
  ELSE
   IF ( "MonthIs"( { "June" } ) )
   THEN
    @"24:00:00 June 1, Current Year"
   ELSE
    @"24:00:00 July 1, Current Year" COMMENTED_BY "July"
   ENDIF
  ENDIF
 ENDIF, 0.00000000 COMMENTED_BY "Normal Ops <br>" ) COMMENTED_BY "CF: EO rules incorperate LTSP.  <br>") DO
          DESCRIPTION          "Only actually set the daily slots for the current month <br>";
      IF_STATEMENT ("GetMonth"( GET @INDEX 0.00000000 FROM dateandflow ) == "GetMonth"( @"t" )) THEN
            $ "DailyFlows.FlamingGorgeDaily" [GET @INDEX 0.00000000 FROM dateandflow] := GET @INDEX 1.00000000 FROM dateandflow;

      END_IF_STATEMENT;

      ENDFOREACH;

    END
    UUID "{72db59d0-4d4a-44df-9087-789fb54534a6}";;

    RULE                 "Release to Meet ULDE";
    DESCRIPTION          "Execution Constraint: March, April <br>  <br>Description: Release at whatever rate is necessary to meet the May 1 upper limit draw-down elevation (ULDE) from the EIS.  Note that if the reservoir is already below the ULDE, then the outflow will be constrained to the minimum base flow for the current year type. <br>  <br>Slots Set: FlamingGorge.Outflow ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "MonthIs"( { "March" , "April" } );
    NOTES                "CF, 20190512: Constraint changed to UBConstrainedOutflow() to be more generic<br>CF, 20181212: Added a constraint on outflow via FGConstrainedOutflow() to allow running VIC hydrology.";
    BEGIN

    DESCRIPTION          "If it is March or April, then release whatever necessary to meet the May 1 ULDE";
      $ "FlamingGorge.Outflow" [] := "UBConstrainedOutflow"( % "FlamingGorge", "GetFGBaseFlowMagnitudeUnconstrained"(  ) );

    END
    UUID "{c886d1e0-1995-4abe-b20c-817303a8fb91}";;

    RULE                 "Spring Flow Hydrologic Classification";
    DESCRIPTION          "Execution Constraint: March - July <br>            <br>Description: Use forecast of April-July volume unregulated Flaming Gorge inflow and Yampa gaged inflow to determine the hydrologic classification for the given month. <br>            <br>- In any particular month, classify based on following season forecasted April - July unregulated inflow. <br>- When running from different start dates, the hydrologic classification may change from month to month but will not change during a single run. <br>  <br>Slots Set: FlamingGorgeData.SpringHClass, FlamingGorgeData.YampaHClass";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetMonthAsString"( @"t" ) IN { "March" , "April" , "May" , "June" , "July" };
    NOTES                "";
    BEGIN

    DESCRIPTION          "Sets the spring hydrologic classification based on the May 1 forecasted April-July volume.";
      FOREACH (NUMERIC index IN { 0.00000000 , 1.00000000 , 2.00000000 , 3.00000000 , 4.00000000 }) DO
            IF_STATEMENT ($ "FlamingGorgeData.AprJulPercentExceedanceSpringFlow" [] <= $ "FlamingGorgeData.HydrologicClassPercentileLimits" [index, 1.00000000]) THEN
            IF_STATEMENT (IsNaN $ "FlamingGorgeData.SpringHClass" []) THEN
            $ "FlamingGorgeData.SpringHClass" [] := index;

      END_IF_STATEMENT;

      END_IF_STATEMENT;

      ENDFOREACH;

    DESCRIPTION          "Yampa";
      FOREACH (NUMERIC index IN { 0.00000000 , 1.00000000 , 2.00000000 , 3.00000000 , 4.00000000 }) DO
            IF_STATEMENT ($ "FlamingGorgeData.YampaAprJulPercentExceedance" [] <= $ "FlamingGorgeData.HydrologicClassPercentileLimits" [index, 1.00000000]) THEN
            IF_STATEMENT (IsNaN $ "FlamingGorgeData.YampaHClass" []) THEN
            $ "FlamingGorgeData.YampaHClass" [] := index;

      END_IF_STATEMENT;

      END_IF_STATEMENT;

      ENDFOREACH;

    END
    UUID "{61d4b8a8-a251-498c-8370-617a6d7e8e19}";;

    RULE                 "Base Flow Operations";
    DESCRIPTION          "Execution Constraint: Not March, April <br>  <br>Description: Sets the base flows for all months except March and April.  Base flow releases are set to stay below maximum pool elevation (PE), minimum flows or stay within the base flow range based on the hydrologic classification.  <br><br>Slots Set: FlamingGorge.Outflow ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "MonthIs"( { "March" , "April" } );
    NOTES                "CF, 20190512: Constraint changed to UBConstrainedOutflow() to be more generic<br><br>CF, 20181212: Added a constraint on outflow via FGConstrainedOutflow() to allow running VIC hydrology.";
    BEGIN

      $ "FlamingGorge.Outflow" COMMENTED_BY "Sets the base flows for all months except March and April.  Base flow releases are set to stay<br>below maximum pool elevation (6039 ft), minimum flows or stay within the base flow range <br>based on the hydrologic classification." [] := "UBConstrainedOutflow"( % "FlamingGorge", IF ( $ "FlamingGorge.Storage" [@"t - 1"] >= "ElevationToStorage"( % "FlamingGorge", $ "FlamingGorgeData.MaxPE" [] ) )
 THEN
  "Max"( ( ( $ "FlamingGorge.Storage" [@"t - 1"] - "ElevationToStorage"( % "FlamingGorge", $ "FlamingGorgeData.MaxPE" [] ) + "FlowToVolume"( $ "FlamingGorge.Inflow" [], @"t" ) ) - "EstimateEvaporation"( % "FlamingGorge", $ "FlamingGorge.Storage" [@"t - 1"], $ "FlamingGorge.Storage" [@"t - 1"], @"24:00:00 Current Month Max DayOfMonth, Current Year", @"24:00:00 Current Month Max DayOfMonth, Current Year" ) ) / 1.00000000 "month", $ "FlamingGorgeData.MinFlow" [] )
 ELSE
  "GetFGBaseFlowMagnitude"(  )
 ENDIF );

    END
    UUID "{6352e872-5339-4ce1-8616-bd9c191e3d7c}";;

    RULE                 "Base Flow Hydrologic Classification";
    DESCRIPTION          "Execution Constraint: June - February <br>            <br>Description: Use observed April-July volume (unregulated Flaming Gorge inflow) to determine hydrologic classification. <br>  <br>- Classification will not change from spring classification during a single run. <br>- Between runs with start dates August-December, classification will not change.<br>- In June and July treat the forecast as the observed in order to get an estimate of volume and set classification. <br>- May vary between runs with start dates Jan - July since incomplete or no observations are available. <br>  <br>Slots Set: Sets FGData.BaseFlowHClass ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

    DESCRIPTION          "Sets the base flow classification based on ROD percent exceedance ranges.  Under ROD<br>compliance, base flows change one classification higher or lower depending upon the <br>previous month?s observed unregulated inflow. ";
      FOREACH (NUMERIC index IN { 0.00000000 , 1.00000000 , 2.00000000 , 3.00000000 , 4.00000000 }) DO
            IF_STATEMENT ($ "FlamingGorgeData.AprJulPercentExceedanceBaseFlow" [] <= $ "FlamingGorgeData.HydrologicClassPercentileLimits" [index, 1.00000000]) THEN
            IF_STATEMENT (IsNaN $ "FlamingGorgeData.BaseFlowHClass" []) THEN
            $ "FlamingGorgeData.BaseFlowHClass" [] := IF ( @"t" == "RunStartDate"(  ) )
 THEN
  index
 ELSE
  IF ( index > $ "FlamingGorgeData.BaseFlowHClass" [@"t - 1"] + 1.00000000 )
  THEN
   $ "FlamingGorgeData.BaseFlowHClass" [@"t - 1"] + 1.00000000
  ELSE
   IF ( index < $ "FlamingGorgeData.BaseFlowHClass" [@"t - 1"] - 1.00000000 )
   THEN
    $ "FlamingGorgeData.BaseFlowHClass" [@"t - 1"] - 1.00000000
   ELSE
    index
   ENDIF
  ENDIF
 ENDIF;

      END_IF_STATEMENT;

      END_IF_STATEMENT;

      ENDFOREACH;

    END
    UUID "{723331da-3627-4bec-8970-421da5e4a890}";;

    RULE                 "Calc Percent Exceedance";
    DESCRIPTION          "Execution Constraint: None <br>  <br>Description:  By comparing the current years April - July volume to the historic record, the percent exceedance is determined, this dictates the hydrologic year type (refer to HydrologicClassPercentileLimits for the percent exceedance ranges that correspond to each year type).  The current years April to July volume is set by the Calc April July Volume Monthly rule.  If HistoricalData.UpdateHistoricRecord is set to 1, then the true historic record plus the modeled volumes up to the previous model year are used for computing the years percent exceedance.  If HistoricalData.UpdateHistoricRecord is set to 0, then only the true historic record is used to compute the years percent exceedance. <br>  <br>Slots Set: FlamingGorgeData.AprJulPercentExceedanceSpringFlow, FlamingGorgeData.AprJulPercentExceedanceBaseFlow, FlamingGorgeData.YampaAprJulVol <br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "FlamingGorgeData.AprJulPercentExceedanceSpringFlow" [] := 1.00000000 - "PercentRank"( "GetSlotVals"( $ "FlamingGorgeData.AprJulVolAnnual", "GetDate"( "December 31, " CONCAT "GetYearAsString"( "NumberToDate"( $ "FlamingGorgeData.HydrologicClassificationStartYear" [] ) ) ), IF ( $ "HistoricalData.UpdateHistoricRecord" [] == 1.00000000 )
 THEN
  "GetDate"( "December 31, " CONCAT ( GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetYear"( @"t" ) - 1.00000000, "." ) ) )
 ELSE
  "GetDate"( "December 31, " CONCAT "GetYearAsString"( "DateMin"( "NumberToDate"( $ "FlamingGorgeData.HydrologicClassificationEndYear" [] ), @"Start Timestep - 1" ) ) )
 ENDIF ), $ "FlamingGorgeData.AprJulVolSpringFlow" [] );

      $ "FlamingGorgeData.AprJulPercentExceedanceBaseFlow" [] := 1.00000000 - "PercentRank"( "GetSlotVals"( $ "FlamingGorgeData.AprJulVolAnnual", "GetDate"( "December 31, " CONCAT "GetYearAsString"( "NumberToDate"( $ "FlamingGorgeData.HydrologicClassificationStartYear" [] ) ) ), IF ( $ "HistoricalData.UpdateHistoricRecord" [] == 1.00000000 )
 THEN
  "GetDate"( "December 31, " CONCAT ( GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetYear"( @"t" ) - 1.00000000, "." ) ) )
 ELSE
  "GetDate"( "December 31, " CONCAT "GetYearAsString"( "DateMin"( "NumberToDate"( $ "FlamingGorgeData.HydrologicClassificationEndYear" [] ), @"Start Timestep - 1" ) ) )
 ENDIF ), $ "FlamingGorgeData.AprJulVolBaseFlow" [] );

      $ "FlamingGorgeData.YampaAprJulPercentExceedance" [] := 1.00000000 - "PercentRank"( IF ( "GetYear"( "NumberToDate"( $ "FlamingGorgeData.YampaHydrologicClassificationStartYear" [] ) ) < "GetYear"( "RunStartDate"(  ) ) - 1.00000000 AND $ "HistoricalData.UpdateHistoricRecord" [] == 1.00000000 )
 THEN
  IF ( "GetYear"( @"t" ) == "GetYear"( "RunStartDate"(  ) ) )
  THEN
   "GetSlotVals"( $ "FlamingGorgeData.YampaAprJulVolAnnual", "GetDate"( "December 31, " CONCAT "GetYearAsString"( "NumberToDate"( $ "FlamingGorgeData.YampaHydrologicClassificationStartYear" [] ) ) ), "GetDate"( "December 31, " CONCAT "GetYearAsString"( "DateMin"( "NumberToDate"( $ "FlamingGorgeData.YampaHydrologicClassificationEndYear" [] ), @"Start Timestep - 1" ) ) ) )
  ELSE
   WITH LIST futureData = "GetSlotVals"( $ "FlamingGorgeData.YampaAprJulVolAnnual", "GetDate"( "December 31, " CONCAT "GetYearAsString"( "RunStartDate"(  ) ) ), "GetDate"( "December 31, " CONCAT ( GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetYear"( @"t" ) - 1.00000000, "." ) ) ) ) DO
    FOR ( NUMERIC i IN "GetNumbers"( 0.00000000, ( LENGTH futureData ) - 1.00000000, 1.00000000 ) ) WITH LIST result = "GetSlotVals"( $ "FlamingGorgeData.YampaAprJulVolAnnual", "GetDate"( "December 31, " CONCAT "GetYearAsString"( "NumberToDate"( $ "FlamingGorgeData.YampaHydrologicClassificationStartYear" [] ) ) ), "GetDate"( "December 31, " CONCAT "GetYearAsString"( "DateMin"( "NumberToDate"( $ "FlamingGorgeData.YampaHydrologicClassificationEndYear" [] ), @"Start Timestep - 1" ) ) ) ) DO
     APPEND GET @INDEX i FROM futureData ONTO result
    ENDFOR
   ENDWITH
  ENDIF
 ELSE
  "GetSlotVals"( $ "FlamingGorgeData.YampaAprJulVolAnnual", "GetDate"( "December 31, " CONCAT "GetYearAsString"( "NumberToDate"( $ "FlamingGorgeData.YampaHydrologicClassificationStartYear" [] ) ) ), IF ( $ "HistoricalData.UpdateHistoricRecord" [] == 1.00000000 )
  THEN
   "GetDate"( "December 31, " CONCAT ( GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetYear"( @"t" ) - 1.00000000, "." ) ) )
  ELSE
   "GetDate"( "December 31, " CONCAT "GetYearAsString"( "DateMin"( "NumberToDate"( $ "FlamingGorgeData.YampaHydrologicClassificationEndYear" [] ), @"Start Timestep - 1" ) ) )
  ENDIF )
 ENDIF, $ "FlamingGorgeData.YampaAprJulVol" [] );

    END
    UUID "{28180c06-1316-401a-81f3-3fc1a20f2fc9}";;

    RULE                 "Calc April July Volume Monthly";
    DESCRIPTION          "Execution Constraint: None<br> <br>Description: Compute the current years April to July Flaming Gorge unregulated inflow volume and the April to July gaged volume at Deerlodge for the Yampa River at Deerlodge.  These volumes will determine the current years hydrologic year type when compared to the historic record.  <br><br>Slots Set: FlamingGorgeData.AprJulVolSpringFlow, FlamingGorgeData.AprJulyVolBaseFlow, FlamingGorgeData.YampaAprJulVol <br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

    DESCRIPTION          "For spring flow operations we are interested in the april - july <br>volume for the upcoming season beginning in January through April. <br> The May official forecast is used for spring operations through July. <br> This number is needed in march to determine<br>releases to meet the ULDE. ";
      $ "FlamingGorgeData.AprJulVolSpringFlow" [] := "SpringFlowA-JVolumeUpdate"(  );

    DESCRIPTION          "For base flow operations we are interested in the available observed<br>volume in the previous april - july season. Since base flow may actually <br>start in june calculate this number then. The August - December base flows <br>use the observed A-J volume.  Jan-Feb use forecast A-J and ULDE and base flow range.<br>";
      $ "FlamingGorgeData.AprJulVolBaseFlow" [] := "BaseFlowA-JVolumeUpdate_EO"( 0.00000000 COMMENTED_BY "Normal Ops <br>" );

      $ "FlamingGorgeData.YampaAprJulVol" [] := IF ( "MonthIs"( { "April" } ) )
 THEN
  "SumFlowsToVolume"( $ "YampaAtDeerlodge.Gage Inflow", @"t", @"t + 3" )
 ELSE
  IF ( @"t" == "RunStartDate"(  ) )
  THEN
   0.00000000 "acre-ft"
  ELSE
   $ "FlamingGorgeData.YampaAprJulVol" [@"t - 1"]
  ENDIF
 ENDIF;

    END
    UUID "{75d98772-478d-49ef-91e7-e137b7c7322b}";;

    RULE                 "Update Historical Record";
    DESCRIPTION          "Execution Constraint: Execute every August if HistoricalData.UpdateHistoricRecord is equal to 1 <br><br>Description: This rule adds on modeled spring volumes (unregulated for Flaming Gorge and gaged for the Yampa) to the historic record.  The slots which are set by Calculate April to July Volume Annual Slot are updated so that the previously modeled spring volumes will be used to compute the next years hydroglogic year type thresholds.  Though this rule reflects the procedure currently implemented by the operator, it can be viewed as an interpretation of the ROD.  To use a static period (unregulated inflow into Flaming Gorge found in slot HistoricalData.FlamingGorgeUnregulatedInflow), set HistoricalData.UpdateHistoricRecord to 0 to effectively shut this rule off. <br><br>Slots Set: FlamingGorgeData.YampaAprJulVolAnnual, FlamingGorgeData.AprJulVolAnnual ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "MonthIs"( { "August" } ) AND $ "HistoricalData.UpdateHistoricRecord" [] == 1.00000000;
    NOTES                "";
    BEGIN

      $ "FlamingGorgeData.YampaAprJulVolAnnual" [@"24:00:00 December Max DayOfMonth, Current Year"] := "SumFlowsToVolume"( $ "YampaAtDeerlodge.Gage Inflow", @"24:00:00 April Max DayOfMonth, Current Year", @"24:00:00 July Max DayOfMonth, Current Year" );

      $ "FlamingGorgeData.AprJulVolAnnual" [@"24:00:00 December Max DayOfMonth, Current Year"] := "CalcUnregulatedInflowVolume"( "Greendale" COMMENTED_BY "Greendale is the NF gage corresponding to <br>above Flaming Gorge", @"24:00:00 April Max DayOfMonth, Current Year", @"24:00:00 July Max DayOfMonth, Current Year" );

    END
    UUID "{46b019d3-a4d2-4e62-85f2-57e730a7f241}";;

    RULE                 "Calculate April To July Volume Annual Slot";
    DESCRIPTION          "Execution Constraint: None<br><br>Description: Using the historic monthly flows (HistoricalData data object) for the unregulated inflow into Flaming Gorge  and for the Yampa at Deerlodge, sum April to July to come up with a spring volume and store in the appropriate slot.  Note that the Yampa at Deerlodge is the summation of the Yampa at Maybell and the Little Snake at Lily and not the actual Deerlodge gage values.  The values stored in these slots are used to compute the year type thresholds. <br><br>Slots Set: FlamingGorgeData.AprJulVolAnnual[1969 - 2013], FlamingGorgeData.YampaAprJulVolAnnual[1922 - 2010] ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == "RunStartDate"(  );
    NOTES                "";
    BEGIN

    DESCRIPTION          "Flaming Gorge Unregulated Apr-Jul Inflow volume";
      FOREACH (DATETIME time IN "GetDates"( "NumberToDate"( $ "FlamingGorgeData.HydrologicClassificationStartYear" [] ), "DateMin"( "NumberToDate"( $ "FlamingGorgeData.HydrologicClassificationEndYear" [] ), @"Start Timestep - 1" ), "1 years" )) DO
            $ "FlamingGorgeData.AprJulVolAnnual" ["GetDate"( "December 31, " CONCAT "GetYearAsString"( time ) )] := "SumFlowsToVolumeSkipNaN"( $ "HistoricalData.FlamingGorgeUnregulatedInflow", "GetDate"( "April, " CONCAT "GetYearAsString"( time ) ), "GetDate"( "July, " CONCAT "GetYearAsString"( time ) ) );

      ENDFOREACH;

    DESCRIPTION          "Yampa Apr-Jul Inflow Vol";
      FOREACH (DATETIME time IN "GetDates"( "NumberToDate"( $ "FlamingGorgeData.YampaHydrologicClassificationStartYear" [] ), "DateMin"( "NumberToDate"( $ "FlamingGorgeData.YampaHydrologicClassificationEndYear" [] ), @"Start Timestep - 1" ), "1 years" )) DO
            $ "FlamingGorgeData.YampaAprJulVolAnnual" ["GetDate"( "December 31, " CONCAT "GetYearAsString"( time ) )] := "SumFlowsToVolume"( $ "HistoricalData.YampaAtDeerlodge", "GetDate"( "April, " CONCAT "GetYearAsString"( time ) ), "GetDate"( "July, " CONCAT "GetYearAsString"( time ) ) );

      ENDFOREACH;

    END
    UUID "{02c98577-09e1-43ef-a9c4-85044c40997e}";;

    RULE                 "Forecast Future Yampa Inflow";
    DESCRIPTION          "Execution Constraint: Rule only fires once during the first timestep<br>  <br>Description: The Flaming Gorge rules require outflow data for the Yampa through April 2061 to run spring operations in 2060. This rules assigns values outflow for Jan-Apr 2061 by computing the average value for each month over the model run length.<br>  <br>Slots Set: YampaAtDeerlodge.Gage Outflow<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == "RunStartDate"(  ) AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "";
    BEGIN

      FOREACH (NUMERIC index IN { 1.00000000 , 2.00000000 , 3.00000000 , 4.00000000 }) DO
            $ "YampaAtDeerlodge.Gage Outflow" ["OffsetDate"( "RunEndDate"(  ), index, "1 MONTHS" )] := WITH DATETIME currentDate = "OffsetDate"( "RunEndDate"(  ), index, "1 MONTHS" ) DO
  "MonthlyAverageFlowInModel"( $ "YampaAtDeerlodge.Gage Outflow", "GetMonthAsString"( currentDate ), "GetYear"( "RunStartDate"(  ) ), "GetYear"( "RunEndDate"(  ) ) )
 ENDWITH;

      ENDFOREACH;

    END
    UUID "{bbcf538a-68e3-4167-8f02-b6180d0d6796}";;

  END
  UUID "{41505149-a4c0-4bcc-959b-7b055e5f2593}";;

  POLICY_GROUP   "KNN";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Set Peak Yampa Flow";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 March Max DayOfMonth, Current Year";
    NOTES                "";
    BEGIN

      $ "FlamingGorgeEIS.YampaPeakDailyFlow" [@"24:00:00 December Max DayOfMonth, Current Year"] := "MaxItem"( "GetSlotVals"( $ "DailyFlows.YampaDailyDeerlodgeDepleted", "GetDate"( "NumberToDate"( $ "KNN.StartMonth" [] ) CONCAT " 1, " CONCAT GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetYear"( @"24:00:00 December Max DayOfMonth, Current Year" ), "." ) ), "GetDate"( "NumberToDate"( $ "KNN.EndMonth" [] ) CONCAT ( ( GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetDaysInMonth"( "GetDate"( "NumberToDate"( $ "KNN.EndMonth" [] ) CONCAT ", current year" ) ), "." ) ) CONCAT "," ) CONCAT GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetYear"( @"24:00:00 December Max DayOfMonth, Current Year" ), "." ) ) ) );

    END
    UUID "{37350b66-6f27-4677-9d0c-c1b35fbd78f0}";;

    RULE                 "Re-distribute Daily Demands within Month-Iterative For Second Stage Disagg";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 March Max DayOfMonth, Current Year" AND "MinItem"( "GetSlotVals"( $ "DailyFlows.YampaDailyDeerlodgeDepleted", "GetDate"( "NumberToDate"( $ "KNN.StartMonth" [] ) CONCAT " 1, " CONCAT "Current Year" ), "GetDate"( "NumberToDate"( $ "KNN.EndMonth" [] ) CONCAT ( ( GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetDaysInMonth"( "GetDate"( "NumberToDate"( $ "KNN.EndMonth" [] ) CONCAT ", current year" ) ), "." ) ) CONCAT ", Current Year" ) ) ) ) < $ "KNN.MinDailyFlowAtDeerlodge" [] AND "HasRuleFiredSuccessfully"( "Set Yampa Daily Natural - Second Stage Disagg" ) AND $ "KNN.SecondStageDisaggFlag" [@"24:00:00 December Max DayOfMonth, Current Year"] == 1.00000000;
    NOTES                "";
    BEGIN

      FOREACH (DATETIME month IN "GetDates"( "GetDate"( "NumberToDate"( $ "KNN.StartMonth" [] ) CONCAT ( ( GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetDaysInMonth"( "GetDate"( "NumberToDate"( $ "KNN.StartMonth" [] ) CONCAT ", current year" ) ), "." ) ) CONCAT ", Current Year" ) ), "GetDate"( "NumberToDate"( $ "KNN.EndMonth" [] ) CONCAT ( ( GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetDaysInMonth"( "GetDate"( "NumberToDate"( $ "KNN.EndMonth" [] ) CONCAT ", current year" ) ), "." ) ) CONCAT ", Current Year" ) ), "1 MONTHS" )) DO
          DESCRIPTION          "Check each month.  If there are any daily flows less than the min daily flow<br>then adjust the daily demands, such that the total needed volume to get the <br>daily flows above the min daily flow is distributed evenly amongst the other <br>days in the month";
      IF_STATEMENT ("MinItem"( "GetSlotVals"( $ "DailyFlows.YampaDailyDeerlodgeDepleted", "GetDate"( "GetMonthAsString"( month ) CONCAT " 1, " CONCAT "Current Year" ), "GetDate"( "GetMonthAsString"( month ) CONCAT ( ( GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetDaysInMonth"( "GetDate"( "GetMonthAsString"( month ) CONCAT ", current year" ) ), "." ) ) CONCAT ", Current Year" ) ) ) ) < $ "KNN.MinDailyFlowAtDeerlodge" []) THEN
            IF_STATEMENT (( "SumObjectsAggregatedOverTime"( "UsersAboveDeerlodge", "Total Depletion", "SUM", "ALL", TRUE, month, month ) < ( "SumFlowsToVolume"( $ "DailyFlows.YampaDailyNatural", "GetDate"( "GetMonthAsString"( month ) CONCAT " 1, " CONCAT "Current Year" ), "GetDate"( "GetMonthAsString"( month ) CONCAT ( ( GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetDaysInMonth"( "GetDate"( "GetMonthAsString"( month ) CONCAT ", current year" ) ), "." ) ) CONCAT ", Current Year" ) ) ) - $ "KNN.MinDailyFlowAtDeerlodge" [] * "GetDaysInMonth"( month ) ) COMMENTED_BY "The total monthly volume less the volume needed to maintain the daily min flow<br>is the volume that can be used by demands." ) COMMENTED_BY "If the total monthly depletion above deerlodge, is less than the available volume to<br>demands, then redistributed the demands withing the current month.  If it is greater<br>than the available volume in the current month, then the demands will have to be<br>re-dsitributed to another month.  This is taken care of in another rule of higher priority.") THEN
            FOREACH (LIST index IN "GetNewDailyFlowsIteratively"( month )) DO
            $ "DailyFlows.YampaDailyDeerlodgeDepleted" [GET @INDEX 1.00000000 FROM index] := GET @INDEX 0.00000000 FROM index;

      ENDFOREACH;

      END_IF_STATEMENT;

      END_IF_STATEMENT;

      ENDFOREACH;

    END
    UUID "{6949e398-bc01-430f-b710-93a30ed1e48b}";;

    RULE                 "Set Yampa Daily Depleted Flow at Deerlodge For Second Stage Disagg";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 March Max DayOfMonth, Current Year" AND "HasRuleFiredSuccessfully"( "Set Yampa Daily Natural - Second Stage Disagg" ) AND $ "KNN.SecondStageDisaggFlag" [@"24:00:00 December Max DayOfMonth, Current Year"] == 1.00000000;
    NOTES                "";
    BEGIN

      FOREACH (NUMERIC i IN "GetNumbers"( 0.00000000, ( LENGTH "GetCurrentYearDailyList"(  ) ) - 1.00000000, 1.00000000 )) DO
            $ "DailyFlows.YampaDailyDeerlodgeDepleted" [GET @INDEX i FROM "GetCurrentYearDailyList"(  )] := FOR ( OBJECT user IN "ListSubbasin"( "UsersAboveDeerlodge" ) ) WITH NUMERIC dailyFlow = $ "DailyFlows.YampaDailyNatural" [GET @INDEX i FROM "GetCurrentYearDailyList"(  )] DO
  dailyFlow - user & "Total Depletion" ["GetDate"( "GetMonthAsString"( GET @INDEX i FROM "GetCurrentYearDailyList"(  ) ) CONCAT ", current year" )]
 ENDFOR;

      ENDFOREACH;

    END
    UUID "{898088c0-7b32-4498-b31f-5170ace19c2c}";;

    RULE                 "Set Yampa Daily Natural - Second Stage Disagg";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 March Max DayOfMonth, Current Year" AND "MinItem"( "GetSlotVals"( $ "DailyFlows.YampaDailyDeerlodgeDepleted", @"24:00:00 April 1, Current Year", @"24:00:00 July Max DayOfMonth, Current Year" ) ) < 0.00000000 "cfs";
    NOTES                "";
    BEGIN

      FOREACH (NUMERIC i IN "GetNumbers"( 0.00000000, ( LENGTH "GetCurrentYearDailyList"(  ) ) - 1.00000000, 1.00000000 )) DO
            $ "DailyFlows.YampaDailyNatural" [GET @INDEX i FROM "GetCurrentYearDailyList"(  )] := ( GET @INDEX i FROM "GetSecondStageProportionVector"(  ) ) * "GetCurrentMonthlyNaturalInflow"( GET @INDEX i FROM "GetCurrentYearDailyList"(  ) ) / 24.00000000 "hour";

      ENDFOREACH;

      $ "KNN.SecondStageDisaggFlag" [@"24:00:00 December Max DayOfMonth, Current Year"] := 1.00000000;

    END
    UUID "{d82299b6-4423-4b57-a3d6-44bafa244a7b}";;

    RULE                 "Re-distribute Daily Demands within Month-Iterative";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 March Max DayOfMonth, Current Year" AND "MinItem"( "GetSlotVals"( $ "DailyFlows.YampaDailyDeerlodgeDepleted", "GetDate"( "NumberToDate"( $ "KNN.StartMonth" [] ) CONCAT " 1, " CONCAT "Current Year" ), "GetDate"( "NumberToDate"( $ "KNN.EndMonth" [] ) CONCAT ( ( GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetDaysInMonth"( "GetDate"( "NumberToDate"( $ "KNN.EndMonth" [] ) CONCAT ", current year" ) ), "." ) ) CONCAT ", Current Year" ) ) ) ) < $ "KNN.MinDailyFlowAtDeerlodge" [] AND $ "KNN.SecondStageDisaggFlag" [@"24:00:00 December Max DayOfMonth, Current Year"] == 0.00000000;
    NOTES                "";
    BEGIN

      FOREACH (DATETIME month IN "GetDates"( "GetDate"( "NumberToDate"( $ "KNN.StartMonth" [] ) CONCAT ( ( GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetDaysInMonth"( "GetDate"( "NumberToDate"( $ "KNN.StartMonth" [] ) CONCAT ", current year" ) ), "." ) ) CONCAT ", Current Year" ) ), "GetDate"( "NumberToDate"( $ "KNN.EndMonth" [] ) CONCAT ( ( GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetDaysInMonth"( "GetDate"( "NumberToDate"( $ "KNN.EndMonth" [] ) CONCAT ", current year" ) ), "." ) ) CONCAT ", Current Year" ) ), "1 MONTHS" )) DO
          DESCRIPTION          "Check each month.  If there are any daily flows less than the min daily flow<br>then adjust the daily demands, such that the total needed volume to get the <br>daily flows above the min daily flow is distributed evenly amongst the other <br>days in the month";
      IF_STATEMENT ("MinItem"( "GetSlotVals"( $ "DailyFlows.YampaDailyDeerlodgeDepleted", "GetDate"( "GetMonthAsString"( month ) CONCAT " 1, " CONCAT "Current Year" ), "GetDate"( "GetMonthAsString"( month ) CONCAT ( ( GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetDaysInMonth"( "GetDate"( "GetMonthAsString"( month ) CONCAT ", current year" ) ), "." ) ) CONCAT ", Current Year" ) ) ) ) < $ "KNN.MinDailyFlowAtDeerlodge" []) THEN
            IF_STATEMENT (( "SumObjectsAggregatedOverTime"( "UsersAboveDeerlodge", "Total Depletion", "SUM", "ALL", TRUE, month, month ) < ( "SumFlowsToVolume"( $ "DailyFlows.YampaDailyNatural", "GetDate"( "GetMonthAsString"( month ) CONCAT " 1, " CONCAT "Current Year" ), "GetDate"( "GetMonthAsString"( month ) CONCAT ( ( GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetDaysInMonth"( "GetDate"( "GetMonthAsString"( month ) CONCAT ", current year" ) ), "." ) ) CONCAT ", Current Year" ) ) ) - $ "KNN.MinDailyFlowAtDeerlodge" [] * "GetDaysInMonth"( month ) ) COMMENTED_BY "The total monthly volume less the volume needed to maintain the daily min flow<br>is the volume that can be used by demands." ) COMMENTED_BY "If the total monthly depletion above deerlodge, is less than the available volume to<br>demands, then redistributed the demands withing the current month.  If it is greater<br>than the available volume in the current month, then the demands will have to be<br>re-dsitributed to another month.  This is taken care of in another rule of higher priority.") THEN
            FOREACH (LIST index IN "GetNewDailyFlowsIteratively"( month )) DO
            $ "DailyFlows.YampaDailyDeerlodgeDepleted" [GET @INDEX 1.00000000 FROM index] := GET @INDEX 0.00000000 FROM index;

      ENDFOREACH;

      END_IF_STATEMENT;

      END_IF_STATEMENT;

      ENDFOREACH;

    END
    UUID "{d4ec369b-4886-4b4d-a49d-52eced607773}";;

    RULE                 "Set Yampa Daily Depleted Flow at Deerlodge";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 March Max DayOfMonth, Current Year";
    NOTES                "";
    BEGIN

      FOREACH (NUMERIC i IN "GetNumbers"( 0.00000000, ( LENGTH "GetCurrentYearDailyList"(  ) ) - 1.00000000, 1.00000000 )) DO
            $ "DailyFlows.YampaDailyDeerlodgeDepleted" [GET @INDEX i FROM "GetCurrentYearDailyList"(  )] := FOR ( OBJECT user IN "ListSubbasin"( "UsersAboveDeerlodge" ) ) WITH NUMERIC dailyFlow = $ "DailyFlows.YampaDailyNatural" [GET @INDEX i FROM "GetCurrentYearDailyList"(  )] DO
  dailyFlow - user & "Total Depletion" ["GetDate"( "GetMonthAsString"( GET @INDEX i FROM "GetCurrentYearDailyList"(  ) ) CONCAT ", current year" )]
 ENDFOR;

      ENDFOREACH;

    END
    UUID "{eca70f2f-d7ea-4e9f-8312-0e2bf9ea57b9}";;

    RULE                 "Set Yampa Daily Natural Flow from KNN - primary disagg";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 March Max DayOfMonth, Current Year";
    NOTES                "";
    BEGIN

      FOREACH (NUMERIC i IN "GetNumbers"( 0.00000000, ( LENGTH "GetProportionVector"(  ) ) - 1.00000000, 1.00000000 )) DO
            $ "DailyFlows.YampaDailyNatural" [GET @INDEX i FROM "GetCurrentYearDailyList"(  )] := "VolumeToFlow"( ( GET @INDEX i FROM "GetProportionVector"(  ) ) * "GetSpringVolume"(  ), GET @INDEX i FROM "GetCurrentYearDailyList"(  ) );

      ENDFOREACH;

    DESCRIPTION          "Initialize the flag to 0";
      $ "KNN.SecondStageDisaggFlag" [@"24:00:00 December Max DayOfMonth, Current Year"] := 0.00000000;

    END
    UUID "{833fd91a-238f-4c63-ac6e-f65503a050d6}";;

    RULE                 "Set Index Year- Ratios";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 March Max DayOfMonth, Current Year";
    NOTES                "";
    BEGIN

      $ "KNN.IndexYear" [@"24:00:00 December Max DayOfMonth, Current Year"] := WITH NUMERIC seasonalVol = "SumFlowsToVolume"( $ "LittleSnakeRiver.Inflow", @"24:00:00 April Max DayOfMonth, Current Year", @"24:00:00 July Max DayOfMonth, Current Year" ) + "SumFlowsToVolume"( $ "YampaRiver.Inflow", @"24:00:00 April Max DayOfMonth, Current Year", @"24:00:00 July Max DayOfMonth, Current Year" ) DO
  "ChooseIndexYearRatio"( ( "FlowToVolume"( $ "LittleSnakeRiver.Inflow" [@"24:00:00 April Max DayOfMonth, Current Year"], @"24:00:00 April Max DayOfMonth, Current Year" ) + "FlowToVolume"( $ "YampaRiver.Inflow" [@"24:00:00 April Max DayOfMonth, Current Year"], @"24:00:00 April Max DayOfMonth, Current Year" ) ) / seasonalVol, ( "FlowToVolume"( $ "LittleSnakeRiver.Inflow" [@"24:00:00 May Max DayOfMonth, Current Year"], @"24:00:00 May Max DayOfMonth, Current Year" ) + "FlowToVolume"( $ "YampaRiver.Inflow" [@"24:00:00 May Max DayOfMonth, Current Year"], @"24:00:00 May Max DayOfMonth, Current Year" ) ) / seasonalVol, ( "FlowToVolume"( $ "LittleSnakeRiver.Inflow" [@"24:00:00 June Max DayOfMonth, Current Year"], @"24:00:00 June Max DayOfMonth, Current Year" ) + "FlowToVolume"( $ "YampaRiver.Inflow" [@"24:00:00 June Max DayOfMonth, Current Year"], @"24:00:00 June Max DayOfMonth, Current Year" ) ) / seasonalVol, ( "FlowToVolume"( $ "LittleSnakeRiver.Inflow" [@"24:00:00 July Max DayOfMonth, Current Year"], @"24:00:00 July Max DayOfMonth, Current Year" ) + "FlowToVolume"( $ "YampaRiver.Inflow" [@"24:00:00 July Max DayOfMonth, Current Year"], @"24:00:00 July Max DayOfMonth, Current Year" ) ) / seasonalVol )
 ENDWITH;

    END
    UUID "{83d22cd6-7d28-4c8e-b546-ef470e277356}";;

    RULE                 "Set Random Number";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( @"t" == @"24:00:00 March Max DayOfMonth, Current Year" ) COMMENTED_BY "Changing the month this rule executes will change the random number generated <br>by the funciton call as the random number index is different for every month/year.<br>";
    NOTES                "";
    BEGIN

      $ "KNN.randomNum" [@"24:00:00 December Max DayOfMonth, Current Year"] := "Random"( "GetRandSeed"(  ), $ "PowellForecastData.Random Index" [], 0.00000000 );

    END
    UUID "{31633154-5b2a-439c-8bc2-f39665c4b2ad}";;

  END
  UUID "{a04ae5ba-adaa-4423-bf98-2dc37315e196}";;

  POLICY_GROUP   "Fontenelle";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "ForecastFutureFGInflow-total average";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      FOREACH (NUMERIC index IN "GetNumbers"( 1.00000000, IF ( "GetMonth"( @"24:00:00 April Max DayOfMonth, Next Year" ) - "GetMonth"( @"t + 1" ) < 0.00000000 )
 THEN
  12.00000000 - "Abs"( "GetMonth"( @"24:00:00 April Max DayOfMonth, Next Year" ) - "GetMonth"( @"t + 1" ) ) + 1.00000000
 ELSE
  "GetMonth"( @"24:00:00 April Max DayOfMonth, Next Year" ) - "GetMonth"( @"t + 1" ) + 1.00000000
 ENDIF, 1.00000000 )) DO
            $ "ForecastData.FlamingGorgeInflow" ["OffsetDate"( @"t", index, "1 MONTHS" )] := ( GET @INDEX index - 1.00000000 FROM GET @INDEX 1.00000000 FROM "ForecastFontenelleRelease"( @"t + 1", @"24:00:00 April Max DayOfMonth, Next Year" ) ) + WITH DATETIME currentDate = "OffsetDate"( @"t", index, "1 MONTHS" ) DO
  IF ( currentDate <= "RunEndDate"(  ) )
  THEN
   $ "GreenRAboveGreenRiverWY:GainsAboveGRWY.Local Inflow" ["OffsetDate"( @"t", index, "1 MONTHS" )] + $ "GreenRAboveFlamingGorge:GainsAboveGreendale.Local Inflow" ["OffsetDate"( @"t", index, "1 MONTHS" )] - "SumObjectsAggregatedOverTime"( "DemandsBetweenFontenelleAndFlamingGorge", "Total Depletion Requested", "SUM", "ALL", FALSE, "OffsetDate"( @"t", index, "1 MONTHS" ), "OffsetDate"( @"t", index, "1 MONTHS" ) )
  ELSE
   ( "MonthlyAverageFlowInModel"( $ "GreenRAboveGreenRiverWY:GainsAboveGRWY.Local Inflow", "GetMonthAsString"( currentDate ), "GetYear"( "RunStartDate"(  ) ), "GetYear"( "RunEndDate"(  ) ) ) + "MonthlyAverageFlowInModel"( $ "GreenRAboveFlamingGorge:GainsAboveGreendale.Local Inflow", "GetMonthAsString"( currentDate ), "GetYear"( "RunStartDate"(  ) ), "GetYear"( "RunEndDate"(  ) ) ) - "SumObjectsAggregatedOverTime"( "DemandsBetweenFontenelleAndFlamingGorge", "Total Depletion Requested", "SUM", "ALL", FALSE, "GetDate"( "GetMonthAsString"( currentDate ) CONCAT ", " CONCAT GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetYear"( "RunEndDate"(  ) ), "." ) ), "GetDate"( "GetMonthAsString"( currentDate ) CONCAT ", " CONCAT GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetYear"( "RunEndDate"(  ) ), "." ) ) ) COMMENTED_BY "And use the total depletion requested of the last year of the model run for the given month" ) COMMENTED_BY "If we are trying to determine the forecasted FG Inflow after the model end date,<br>then use the average monthly natural flow for the forecasted natural flow"
  ENDIF
 ENDWITH;

      ENDFOREACH;

    END
    UUID "{dc1d39e8-00fc-4e52-86cd-acf16ec7abda}";;

    RULE                 "ForecastFutureFGInflow-5 year average";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      FOREACH (NUMERIC index IN "GetNumbers"( 1.00000000, IF ( "GetMonth"( @"24:00:00 April Max DayOfMonth, Next Year" ) - "GetMonth"( @"t + 1" ) < 0.00000000 )
 THEN
  12.00000000 - "Abs"( "GetMonth"( @"24:00:00 April Max DayOfMonth, Next Year" ) - "GetMonth"( @"t + 1" ) ) + 1.00000000
 ELSE
  "GetMonth"( @"24:00:00 April Max DayOfMonth, Next Year" ) - "GetMonth"( @"t + 1" ) + 1.00000000
 ENDIF, 1.00000000 )) DO
            $ "ForecastData.FlamingGorgeInflow" ["OffsetDate"( @"t", index, "1 MONTHS" )] := ( GET @INDEX index - 1.00000000 FROM GET @INDEX 1.00000000 FROM "ForecastFontenelleRelease"( @"t + 1", @"24:00:00 April Max DayOfMonth, Next Year" ) ) + WITH DATETIME currentDate = "OffsetDate"( @"t", index, "1 MONTHS" ) DO
  IF ( currentDate <= "RunEndDate"(  ) )
  THEN
   $ "GreenRAboveGreenRiverWY:GainsAboveGRWY.Local Inflow" ["OffsetDate"( @"t", index, "1 MONTHS" )] + $ "GreenRAboveFlamingGorge:GainsAboveGreendale.Local Inflow" ["OffsetDate"( @"t", index, "1 MONTHS" )] - "SumObjectsAggregatedOverTime"( "DemandsBetweenFontenelleAndFlamingGorge", "Total Depletion Requested", "SUM", "ALL", FALSE, "OffsetDate"( @"t", index, "1 MONTHS" ), "OffsetDate"( @"t", index, "1 MONTHS" ) )
  ELSE
   ( "MonthlyAverageFlowInModel"( $ "GreenRAboveGreenRiverWY:GainsAboveGRWY.Local Inflow", "GetMonthAsString"( currentDate ), "GetYear"( "RunEndDate"(  ) ) - 4.00000000, "GetYear"( "RunEndDate"(  ) ) ) + "MonthlyAverageFlowInModel"( $ "GreenRAboveFlamingGorge:GainsAboveGreendale.Local Inflow", "GetMonthAsString"( currentDate ), "GetYear"( "RunEndDate"(  ) ) - 4.00000000, "GetYear"( "RunEndDate"(  ) ) ) - "SumObjectsAggregatedOverTime"( "DemandsBetweenFontenelleAndFlamingGorge", "Total Depletion Requested", "SUM", "ALL", FALSE, "GetDate"( "GetMonthAsString"( currentDate ) CONCAT ", " CONCAT GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetYear"( "RunEndDate"(  ) ), "." ) ), "GetDate"( "GetMonthAsString"( currentDate ) CONCAT ", " CONCAT GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetYear"( "RunEndDate"(  ) ), "." ) ) ) COMMENTED_BY "And use the total depletion requested of the last year of the model run for the given month" ) COMMENTED_BY "If we are trying to determine the forecasted FG Inflow after the model end date,<br>then use the average monthly natural flow for the forecasted natural flow"
  ENDIF
 ENDWITH;

      ENDFOREACH;

    END
    UUID "{1fd0d152-340f-4fb0-91ea-6e438cf4d2e0}";;

    RULE                 "ForecastFutureFGInflow-last year";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      FOREACH (NUMERIC index IN "GetNumbers"( 1.00000000, IF ( "GetMonth"( @"24:00:00 April Max DayOfMonth, Next Year" ) - "GetMonth"( @"t + 1" ) < 0.00000000 )
 THEN
  12.00000000 - "Abs"( "GetMonth"( @"24:00:00 April Max DayOfMonth, Next Year" ) - "GetMonth"( @"t + 1" ) ) + 1.00000000
 ELSE
  "GetMonth"( @"24:00:00 April Max DayOfMonth, Next Year" ) - "GetMonth"( @"t + 1" ) + 1.00000000
 ENDIF, 1.00000000 )) DO
            $ "ForecastData.FlamingGorgeInflow" ["OffsetDate"( @"t", index, "1 MONTHS" )] := ( GET @INDEX index - 1.00000000 FROM GET @INDEX 1.00000000 FROM "ForecastFontenelleRelease"( @"t + 1", @"24:00:00 April Max DayOfMonth, Next Year" ) ) + WITH DATETIME currentDate = "OffsetDate"( @"t", index, "1 MONTHS" ) DO
  IF ( currentDate <= "RunEndDate"(  ) )
  THEN
   $ "GreenRAboveGreenRiverWY:GainsAboveGRWY.Local Inflow" ["OffsetDate"( @"t", index, "1 MONTHS" )] + $ "GreenRAboveFlamingGorge:GainsAboveGreendale.Local Inflow" ["OffsetDate"( @"t", index, "1 MONTHS" )] - "SumObjectsAggregatedOverTime"( "DemandsBetweenFontenelleAndFlamingGorge", "Total Depletion Requested", "SUM", "ALL", FALSE, "OffsetDate"( @"t", index, "1 MONTHS" ), "OffsetDate"( @"t", index, "1 MONTHS" ) )
  ELSE
   ( "MonthlyAverageFlowInModel"( $ "GreenRAboveGreenRiverWY:GainsAboveGRWY.Local Inflow", "GetMonthAsString"( currentDate ), "GetYear"( "RunEndDate"(  ) ), "GetYear"( "RunEndDate"(  ) ) ) + "MonthlyAverageFlowInModel"( $ "GreenRAboveFlamingGorge:GainsAboveGreendale.Local Inflow", "GetMonthAsString"( currentDate ), "GetYear"( "RunEndDate"(  ) ), "GetYear"( "RunEndDate"(  ) ) ) - "SumObjectsAggregatedOverTime"( "DemandsBetweenFontenelleAndFlamingGorge", "Total Depletion Requested", "SUM", "ALL", FALSE, "GetDate"( "GetMonthAsString"( currentDate ) CONCAT ", " CONCAT GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetYear"( "RunEndDate"(  ) ), "." ) ), "GetDate"( "GetMonthAsString"( currentDate ) CONCAT ", " CONCAT GET @INDEX 0.00000000 FROM "Split"( STRINGIFY "GetYear"( "RunEndDate"(  ) ), "." ) ) ) COMMENTED_BY "And use the total depletion requested of the last year of the model run for the given month" ) COMMENTED_BY "If we are trying to determine the forecasted FG Inflow after the model end date,<br>then use the average monthly natural flow for the forecasted natural flow"
  ENDIF
 ENDWITH;

      ENDFOREACH;

    END
    UUID "{32bb0cd8-cfdb-46ad-8513-285202cfa0d0}";;

    RULE                 "Min Flow";
    DESCRIPTION          "CF, 20180620: Use higher minimum's in PeriodicMinFlow (from MTOM) representing operator preference. Provides better matching of historical releases based on my analysis <br>This rule ensurs that the minimum instream flow requirements are met. If a lower priority rule sets the flow lower than the min flow then this rule resets the flow. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( "HasAnyRuleFired"( { "Safe Channel Capacity" , "Set September-March Baseflow" , "Set January-March Initial Baseflow" , "Set August Outflow" , "Set April Outflow" , "Set Baseflow in off month" , "Set June Outflow" , "Set July Outflow" } ) AND NOT "HasRuleFiredSuccessfully"( "Min Flow" ) ) COMMENTED_BY "This is necessary for 1,2,3 rule order to prevent trumping of lower priority rules. <br>Not necessary in 3,2,1 order but does not hurt anything. ";
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "Fontenelle.Outflow" [] < $ "FontenelleData.PeriodicMinFlow" [@"t"]) THEN
            $ "Fontenelle.Outflow" [] := "Min"( $ "FontenelleData.PeriodicMinFlow" [@"t"], "AvailableWaterInStorage"( % "Fontenelle" ) );

      END_IF_STATEMENT;

    END
    UUID "{355f8a0b-478c-4f53-ae5a-9180907c858a}";;

    RULE                 "Max Elevation";
    DESCRIPTION          "This rule prevents overtopping. If a previous rule sets the outflow such that the elevation would overtop the dam, this rule will set the outflow to prevent this. The ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "HasAnyRuleFired"( { "Safe Channel Capacity" , "Set September-March Baseflow" , "Set January-March Initial Baseflow" , "Set August Outflow" , "Set April Outflow" , "Set Baseflow in off month" , "Set June Outflow" , "Set July Outflow" } ) COMMENTED_BY "This is necessary for 1,2,3 rule order to prevent trumping of lower priority rules. <br>Not necessary in 3,2,1 order but does not hurt anything. ";
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "Fontenelle.Pool Elevation" [] > $ "FontenelleData.MaxElevation" []) THEN
          DESCRIPTION          "If the Pool elevation goes higher than the max elevation then release whatever necessary to not overtop";
      $ "Fontenelle.Outflow" [] := $ "Fontenelle.Outflow" [] + "VolumeToFlow"( "ElevationToStorage"( % "Fontenelle", $ "Fontenelle.Pool Elevation" [] ) - "ElevationToStorage"( % "Fontenelle", $ "FontenelleData.MaxElevation" [] ), @"t" );

      END_IF_STATEMENT;

    END
    UUID "{f588ec1a-12f0-435e-8d51-5ab19f2af427}";;

    RULE                 "Min Elevation";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "Fontenelle.Pool Elevation" [] < $ "FontenelleData.MinElevation" []) THEN
            $ "Fontenelle.Outflow" [] := "SolveOutflow"( % "Fontenelle", $ "Fontenelle.Inflow" [], "ElevationToStorage"( % "Fontenelle", $ "FontenelleData.MinElevation" [] ), $ "Fontenelle.Storage" [@"t - 1"], @"t" );

      END_IF_STATEMENT;

    END
    UUID "{18ab2bae-85e7-4c33-ac3e-2d1942fe9bf0}";;

    RULE                 "Safe Channel Capacity";
    DESCRIPTION          "Prevents outflow from exceeding safe channel capacity unless there is a chance of overtopping, in which case, the &quot;Max Elevation&quot; rule will take precedence. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "HasAnyRuleFired"( { "Safe Channel Capacity" , "Set September-March Baseflow" , "Set January-March Initial Baseflow" , "Set August Outflow" , "Set April Outflow" , "Set Baseflow in off month" , "Set June Outflow" , "Set July Outflow" } );
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "Fontenelle.Outflow" [] > $ "FontenelleData.SafeChannelCapacity" []) THEN
            $ "Fontenelle.Outflow" [] := $ "FontenelleData.SafeChannelCapacity" [];

      END_IF_STATEMENT;

    END
    UUID "{8ddd636a-65cf-4952-8b0a-fe536b91f3f5}";;

    RULE                 "Set September-March Baseflow";
    DESCRIPTION          "Execution Constraint: September<br><br>Description: Compute the steady flow over September to March necsessary to meet Apr 1 target. Change in storage plus forecasted volume divided by 7 months.  The next months will look back at this value.<br>  <br>Slots Set: Fontenelle.Outflow<br>  <br><br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetMonthAsString"( @"t" ) IN { "September" };
    NOTES                "CF, 20180620: Flowrate calculation was rewritten so that RiverWare calculates the correct number of days  ";
    BEGIN

    INACTIVE      PRINT "September";

      $ "Fontenelle.Outflow" [] := ( ( "ElevationToStorage"( % "Fontenelle", $ "Fontenelle.Pool Elevation" [@"t - 1"] ) - "ElevationToStorage"( % "Fontenelle", $ "FontenelleData.April1Target" [] ) + "SumFlowsToVolume"( $ "Fontenelle.Inflow", @"t", @"t + 6" ) ) - "EstimateEvaporation"( % "Fontenelle", "ElevationToStorage"( % "Fontenelle", $ "Fontenelle.Pool Elevation" [@"t - 1"] ), "ElevationToStorage"( % "Fontenelle", $ "FontenelleData.April1Target" [] ), @"t - 1", @"t + 6" ) ) / ( @"24:00:00 March Max DayOfMonth, Next Year" - @"24:00:00 August Max DayOfMonth, Current Year" ) COMMENTED_BY "CF: Flowrate calculation was rewritten so that RiverWare calculates the correct number of days   <br>";

    END
    UUID "{fc40a12a-6898-4200-9dfb-4f5717c6cbb3}";;

    RULE                 "Set January-March Initial Baseflow";
    DESCRIPTION          "Execution Constraint: First January of run<br>  <br>Description: This rule looks ahead at the forecasted volumes and determines what the max steady flow for the months of September-March can be. Later in the run this will be calculated in September by 'Set September-March Baseflow' but since run is just starting must calculate flow to meet April 1 target. <br>  <br>Slots Set: Fontenelle.Outflow<br>  <br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( "GetMonthAsString"( @"t" ) IN { "January" } AND @"t" == "RunStartDate"(  ) ) COMMENTED_BY "CF: We only need to do this at a run start when the baseflow required has not been calculated <br>the previous September.    <br>";
    NOTES                "CF, 20180620: Changed rule to fire in Jan (was December) to address initialization error (wasn't calculting flow to hit April 1 target). Added run state constraint. Flowrate calculation was rewritten so that RiverWare calculates the correct number of days  <br>";
    BEGIN

    DESCRIPTION          "Compute the steady flow over Jan to March necsessary to meet Apr 1 target. <br>Change in storage plus forecasted volume divided by 4 months. <br>The next 2 months will look back at this value. <br>";
      $ "Fontenelle.Outflow" [] := ( ( "ElevationToStorage"( % "Fontenelle", $ "Fontenelle.Pool Elevation" [@"t - 1"] ) - "ElevationToStorage"( % "Fontenelle", $ "FontenelleData.April1Target" [] ) + "SumFlowsToVolume"( $ "Fontenelle.Inflow", @"t", @"t + 2" ) ) + "EstimateEvaporation"( % "Fontenelle", "ElevationToStorage"( % "Fontenelle", $ "Fontenelle.Pool Elevation" [@"t - 1"] ), "ElevationToStorage"( % "Fontenelle", $ "FontenelleData.April1Target" [] ), @"t - 1", @"t + 2" ) ) / ( @"24:00:00 March Max DayOfMonth, Current Year" - @"24:00:00 December Max DayOfMonth, Previous Year" ) COMMENTED_BY "CF: Flowrate calculation was rewritten so that RiverWare calculates the correct number of days   <br>";

    END
    UUID "{5d286f6a-c430-4c34-9a3d-6b28baf67a95}";;

    RULE                 "Set August Outflow";
    DESCRIPTION          "Sets the April and August release to the maximum possible, this also sets May since may gets set to the same as April.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetMonthAsString"( @"t" ) IN { "August" , "" } AND NOT "HasRuleFiredSuccessfully"( "Set August Outflow" );
    NOTES                "";
    BEGIN

    DESCRIPTION          "Only set value of Outflow if set to avoid error messages";
      IF_STATEMENT (NaNToZero ( $ "Fontenelle.Outflow" [] ) != 0.00000000 "cfs") THEN
          DESCRIPTION          "Set April or August Outflow to power plant capacity";
      $ "Fontenelle.Outflow" [] := "GetMaxReleaseGivenInflow"( % "Fontenelle", $ "Fontenelle.Inflow" [], @"t" );

      END_IF_STATEMENT;

    END
    UUID "{a5f35ca3-c2b8-4d1f-b127-ff5e9847eb8b}";;

    RULE                 "Set April Outflow";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetMonthAsString"( @"t" ) IN { "" , "April" } AND NOT "HasRuleFiredSuccessfully"( "Set April Outflow" );
    NOTES                "";
    BEGIN

      IF_STATEMENT (NaNToZero ( $ "Fontenelle.Outflow" [] ) != 0.00000000 "cfs") THEN
            $ "Fontenelle.Outflow" [] := "Min"( ( ( "ElevationToStorage"( % "Fontenelle", $ "Fontenelle.Pool Elevation" [@"t"] ) - "ElevationToStorage"( % "Fontenelle", $ "FontenelleData.July1Target" [] ) + "SumFlowsToVolume"( $ "Fontenelle.Inflow", @"t", @"t + 2" ) ) / 3.00000000 "month" ) COMMENTED_BY "Steady release over April, May and June to meet August1 Target", "GetMaxReleaseGivenInflow"( % "Fontenelle", $ "Fontenelle.Inflow" [], @"t" ) COMMENTED_BY "Power Plant Capacity" );

      END_IF_STATEMENT;

    END
    UUID "{c3e31c0f-ca8d-44fb-b82b-72eb4284f990}";;

    RULE                 "Set May Outflow Old";
    DESCRIPTION          "First check if the August1 target will approamately be met, if not, continue base flow operations.   Otherwise ppc";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT "GetMonthAsString"( @"t" ) IN { "May" };
    NOTES                "";
    BEGIN

      IF_STATEMENT (NaNToZero ( $ "Fontenelle.Outflow" [] ) != 0.00000000 "cfs") THEN
            IF_STATEMENT ("StorageToElevation"( % "Fontenelle", ( "ElevationToStorage"( % "Fontenelle", $ "Fontenelle.Pool Elevation" [@"t"] ) - "FlowToVolume"( "GetMaxReleaseGivenInflow"( % "Fontenelle", $ "Fontenelle.Inflow" [], @"t" ) * 2.00000000, @"t" ) + "SumFlowsToVolume"( $ "Fontenelle.Inflow", @"t", @"t + 1" ) ) ) COMMENTED_BY "If approx August 1 elevation after 2 months of power plant capacity does not <br>meet the August 1 target, continue base flow operations" < $ "FontenelleData.August1Target" []) THEN
            $ "Fontenelle.Outflow" [] := $ "Fontenelle.Outflow" [@"t - 1"];

      ELSE
          DESCRIPTION          "Set to power plant capacity";
      $ "Fontenelle.Outflow" [] := "GetMaxReleaseGivenInflow"( % "Fontenelle", $ "Fontenelle.Inflow" [], @"t" );

      END_IF_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{1f336d5a-d976-49c8-88af-a0a31c4b3ad9}";;

    RULE                 "Set Baseflow in off month";
    DESCRIPTION          "Execution Constraint: Oct-March, May<br> <br>Description: Handles the case when the model is started in October- March, or May. In these months the baseflow needs to be set to whatever the previous month's value was. <br><br>Slots Set: Fontenelle.Outflow<br><br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT ( "GetMonthAsString"( @"t" ) IN { "October" , "November" , "December" , "January" , "February" , "March" , "May" } ) COMMENTED_BY "CF: Add December since removing December calc rule.   <br>" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "CF, 20180620: Add December since removing December calc rule. ";
    BEGIN

      $ "Fontenelle.Outflow" [] := "Min"( $ "Fontenelle.Outflow" [@"t - 1"], "AvailableWaterInStorage"( % "Fontenelle" ) );

    END
    UUID "{d4867b82-8404-4afb-8239-5e1eabfe5223}";;

    RULE                 "Set June Outflow";
    DESCRIPTION          "This rule sets the June outflow such that the july 1 target elevation is met.  Alternate cases are when SolveOutflow returns a value greater the the max possible release or less than power plant capacity.  Min(MaxRelease, Max(Release to meet target, power plant capactiy)).";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetMonthAsString"( @"t" ) IN { "June" };
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "Fontenelle.Pool Elevation" [] > $ "FontenelleData.July1Target" []) THEN
            $ "Fontenelle.Outflow" [] := "FontenelleTargetFlow"( $ "FontenelleData.August1Target" [] );

      ELSE
            $ "Fontenelle.Outflow" [] := "FontenelleTargetFlow"( $ "FontenelleData.July1Target" [] );

      END_IF_STATEMENT;

    END
    UUID "{e9d67930-8d84-4ddb-b5ec-87a0859e22b1}";;

    RULE                 "Set July Outflow";
    DESCRIPTION          "Solve for the outflow which will cause the pool elevation to reach the end of timestep target. Do not let outflow go below power plant capacity or above the max possible release.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetMonthAsString"( @"t" ) IN { "July" };
    NOTES                "";
    BEGIN

      $ "Fontenelle.Outflow" [] := "FontenelleTargetFlow"( $ "FontenelleData.August1Target" [] );

    END
    UUID "{17136ba4-c64c-4c2b-939c-1a90c22ab2fd}";;

    RULE                 "Set Unset Outflow";
    DESCRIPTION          "Sets the outflow for spillCalc and power methods, registering dependencies so that higher priority rules can set values. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "Fontenelle.Outflow" [] := $ "Fontenelle.Inflow" [];

    END
    UUID "{d532d298-6118-417f-935c-29a40f8d959c}";;

  END
  UUID "{0d0d40c1-34a9-40bb-8460-a141e293f840}";;

  POLICY_GROUP   "Starvation Rules";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Starvation Rule Curve";
    DESCRIPTION          "This rule fires monthly and sets the storage for Starvation. Starvation is a virtual reservoir and represents a composite of 8 small reservoirs that are part of the Central Utah Project, located primarily on the Duschene. It computes the storage based on the whichever release demand is greater - the release to meet downstream demands or the release to meet the storage rule curve.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "Starvation.Outflow" [];
    NOTES                "";
    BEGIN

      $ "Starvation.Outflow" [] := "SolveOutflow"( % "Starvation", $ "Starvation.Inflow" [], "ComputeStorageAtGivenOutflow"( % "Starvation", "Max"( "ComputeOutflowAtRuleCurveStorage"( % "Starvation" ), "ComputeDemandsBelow"( % "Starvation" ) ) ), $ "Starvation.Storage" [@"t - 1"], @"t" );

    END
    UUID "{d9f2032b-cb61-4386-a223-fe66f5095dab}";;

  END
  UUID "{8b77f81a-693a-47a0-a1b5-38f456c1938a}";;

  POLICY_GROUP   "Normal and Other Rules";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Set PVID Fallow Amount";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year";
    NOTES                "";
    BEGIN

      $ "California ICS.PVID Fallow Amount" [@"24:00:00 December 31, Current Year"] := IF ( @"t" == @"24:00:00 January 31, 2010" )
 THEN
  150000.00000000 "acre-ft"
 ELSE
  IF ( @"t" == @"24:00:00 January 31, 2011" )
  THEN
   110000.00000000 "acre-ft"
  ELSE
   IF ( @"t" >= @"24:00:00 January 31, 2012" AND @"t" <= @"24:00:00 January 31, 2039" )
   THEN
    IF ( "IsEven"( "GetYear"( @"t" ), 1.00000000 ) )
    THEN
     IF ( $ "Mead.Pool Elevation" [@"24:00:00 December 31, Previous Year"] > $ "California ICS.PVIDFallowing" [0.00000000, 0.00000000] )
     THEN
      $ "California ICS.PVIDFallowing" [0.00000000, 1.00000000]
     ELSE
      IF ( $ "Mead.Pool Elevation" [@"24:00:00 December 31, Previous Year"] >= $ "California ICS.PVIDFallowing" [1.00000000, 0.00000000] AND $ "Mead.Pool Elevation" [@"24:00:00 December 31, Previous Year"] <= $ "California ICS.PVIDFallowing" [0.00000000, 0.00000000] )
      THEN
       $ "California ICS.PVIDFallowing" [1.00000000, 1.00000000]
      ELSE
       IF ( @"t" < @"24:00:00 January 31, 2020" )
       THEN
        $ "California ICS.PVIDFallowing" [2.00000000, 1.00000000]
       ELSE
        IF ( "SumSlot"( $ "California ICS.PVID Fallow Amount", @"24:00:00 December 31, Previous Year - 7 Year", @"24:00:00 December 31, Previous Year" ) - 8.00000000 * $ "California ICS.PVIDFallowing" [2.00000000, 1.00000000] <= 0.00000000 "acre-ft" AND "SumSlot"( $ "California ICS.PVID Fallow Amount", @"24:00:00 December 31, Previous Year - 7 Year", @"24:00:00 December 31, Previous Year" ) - 8.00000000 * $ "California ICS.PVIDFallowing" [2.00000000, 1.00000000] >= - 1.00000000 "acre-ft" )
        THEN
         $ "California ICS.PVIDFallowing" [3.00000000, 1.00000000]
        ELSE
         $ "California ICS.PVIDFallowing" [2.00000000, 1.00000000]
        ENDIF COMMENTED_BY "check to see if PVID has been fallowing 110 kaf for 8 consecutive years by substracting the last 8yr fallowing amount from 880 kaf (110 kaf * 8). due to significant digits, the SumSlot function results in slightly less than 880 kaf, which is why the <=0 and >=-1 was necessary"
       ENDIF COMMENTED_BY "Mead is less than 1105 fallow 110 kaf unless 8 consecutive years of 110 kaf, then fallow 100 kaf"
      ENDIF COMMENTED_BY "if Mead is between 1105 and 1140 fallow 50 kaf"
     ENDIF COMMENTED_BY "if Mead is greater than 1140 fallow 26 kaf<br>"
    ELSE
     $ "California ICS.PVID Fallow Amount" [@"24:00:00 December 31, Previous Year"] COMMENTED_BY "it's an odd year so fallow same amount as last year"
    ENDIF COMMENTED_BY "if current year is even (fallowing amount is set for 2-yr period beginning 2012), determine fallowing amount based on Mead elevation"
   ELSE
    0.00000000 "acre-ft" COMMENTED_BY "it's after 2039 so the fallowing program has ended"
   ENDIF COMMENTED_BY "last year of fallowing program is 2039<br>"
  ENDIF
 ENDIF;

    END
    UUID "{f20f2a1e-62a8-454a-8325-22985d1cd75a}";;

    RULE                 "Set MWD Normal Schedule";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year";
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"t + 11") DO
            $ "MWDDiversion:MWDDiversion.Diversion Requested" [date] := "Max"( IF ( "NotShortageYear"(  ) )
 THEN
  $ "MWDDiversion:MWDDiversion.Diversion Schedule" [date]
 ELSE
  $ "MWDSchedule.Input Diversion Shortage Schedule" [date]
 ENDIF + "PVID Fallow Amount"( date, "MWD" ), 0.00000000 "acre-ft/month" );

            $ "MWDSchedule.Diversion Schedule" [date] := "Max"( IF ( "NotShortageYear"(  ) )
 THEN
  $ "MWDDiversion:MWDDiversion.Diversion Schedule" [date]
 ELSE
  $ "MWDSchedule.Input Diversion Shortage Schedule" [date]
 ENDIF + "PVID Fallow Amount"( date, "MWD" ), 0.00000000 "acre-ft/month" );

            $ "MWDDiversion:MWDDiversion.Depletion Requested" [date] := "Max"( IF ( "NotShortageYear"(  ) )
 THEN
  $ "MWDDiversion:MWDDiversion.Depletion Schedule" [date]
 ELSE
  $ "MWDSchedule.Input Depletion Shortage Schedule" [date]
 ENDIF + "PVID Fallow Amount"( date, "MWD" ), 0.00000000 "acre-ft/month" );

            $ "MWDSchedule.Depletion Schedule" [date] := "Max"( IF ( "NotShortageYear"(  ) )
 THEN
  $ "MWDDiversion:MWDDiversion.Depletion Schedule" [date]
 ELSE
  $ "MWDSchedule.Input Depletion Shortage Schedule" [date]
 ENDIF + "PVID Fallow Amount"( date, "MWD" ), 0.00000000 "acre-ft/month" );

            $ "MWDSchedule.Input Diversion Schedule" [date] := "Max"( IF ( "NotShortageYear"(  ) )
 THEN
  $ "MWDDiversion:MWDDiversion.Diversion Schedule" [date]
 ELSE
  $ "MWDSchedule.Input Diversion Shortage Schedule" [date]
 ENDIF, 0.00000000 "acre-ft/month" );

            $ "MWDSchedule.Input Depletion Schedule" [date] := "Max"( IF ( "NotShortageYear"(  ) )
 THEN
  $ "MWDDiversion:MWDDiversion.Depletion Schedule" [date]
 ELSE
  $ "MWDSchedule.Input Depletion Shortage Schedule" [date]
 ENDIF, 0.00000000 "acre-ft/month" );

            $ "MWDSchedule.SurplusScheduleFlag" [date] := 0.00000000;

            $ "MWDSchedule.ShortageScheduleFlag" [date] := 0.00000000;

            $ "MWDSchedule.UsingShortageScheduleFlag" [date] := IF ( "NotShortageYear"(  ) )
 THEN
  0.00000000
 ELSE
  1.00000000
 ENDIF;

      ENDFOREACH;

    END
    UUID "{e2e96570-35ee-4349-873f-a60a2eecb5a5}";;

    RULE                 "Set PVID Normal Schedule";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year";
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"t + 11") DO
            $ "PVIDSchedule.Diversion Schedule" [date] := $ "PVIDSchedule.Total Diversion Schedule" [date];

            $ "PVIDSchedule.Depletion Schedule" [date] := $ "PVIDSchedule.Total Depletion Schedule" [date];

      ENDFOREACH;

    END
    UUID "{a09e0d4e-df3a-4dd7-8df0-30c94424990f}";;

    RULE                 "Set CAP Normal Schedule";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year";
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"t + 11") DO
            $ "CAPSchedule.SurplusScheduleFlag" [date] := 0.00000000;

            $ "CAPSchedule.ShortageScheduleFlag" [date] := 0.00000000;

      ENDFOREACH;

    END
    UUID "{f4c7c03b-0620-4eda-92d3-e34e1b92a017}";;

    RULE                 "Set PVID Fallow Amount to 0";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

    DESCRIPTION          "Fallow amount is embedded in MWD and PVID schedules so no logic is<br>necessary to represent fallowing.";
      $ "MWD ICS.PVID Fallow Amount" [@"24:00:00 December 31, Current Year"] := 0.00000000 "acre-ft";

    END
    UUID "{34e4d640-972d-46dd-8ef6-28cb120b4323}";;

    RULE                 "Set Mexico Normal Schedule";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year";
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"t + 11") DO
            $ "MexicoSchedule.SurplusScheduleFlag" [date] := 0.00000000;

            $ "MexicoSchedule.ShortageScheduleFlag" [date] := 0.00000000;

      ENDFOREACH;

    END
    UUID "{88be5bc2-5c78-4129-a1aa-64647185d3de}";;

    RULE                 "Set Mexico Over Delivery Schedule Drop 2";
    DESCRIPTION          "Rule computes overdelivery to Mexico minus the overdelivery recovery by Brock Reservoir (Drop 2).  Reservoir did not come online until 2010, therefore for any year prior to 2010, no adjustment is made to the raw overdelivery value.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year";
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"t + 11") DO
            IF_STATEMENT (@"t" >= @"24:00:00 January 31, 2010") THEN
            $ "OverDeliveryToMexico:OverDeliveryToMexico.Diversion Requested" [date] := "VolumeToFlow"( IF ( @"t" == "RunStartDate"(  ) )
 THEN
  $ "MexicoSchedule.OverDeliveryFirstYear" []
 ELSE
  $ "MexicoSchedule.OverDelivery" []
 ENDIF - $ "MexicoSchedule.Drop2Recovery" [], date ) * $ "Surplus.MonthlyPercents" ["GetMonthAsString"( date ), "Mexico"];

            $ "OverDeliveryToMexico:OverDeliveryToMexico.Depletion Requested" [date] := "VolumeToFlow"( IF ( @"t" == "RunStartDate"(  ) )
 THEN
  $ "MexicoSchedule.OverDeliveryFirstYear" []
 ELSE
  $ "MexicoSchedule.OverDelivery" []
 ENDIF - $ "MexicoSchedule.Drop2Recovery" [], date ) * $ "Surplus.MonthlyPercents" ["GetMonthAsString"( date ), "Mexico"];

      ELSE
            $ "OverDeliveryToMexico:OverDeliveryToMexico.Diversion Requested" [date] := "VolumeToFlow"( IF ( @"t" == "RunStartDate"(  ) )
 THEN
  $ "MexicoSchedule.OverDeliveryFirstYear" []
 ELSE
  $ "MexicoSchedule.OverDelivery" []
 ENDIF, date ) * $ "Surplus.MonthlyPercents" ["GetMonthAsString"( date ), "Mexico"];

            $ "OverDeliveryToMexico:OverDeliveryToMexico.Depletion Requested" [date] := "VolumeToFlow"( IF ( @"t" == "RunStartDate"(  ) )
 THEN
  $ "MexicoSchedule.OverDeliveryFirstYear" []
 ELSE
  $ "MexicoSchedule.OverDelivery" []
 ENDIF, date ) * $ "Surplus.MonthlyPercents" ["GetMonthAsString"( date ), "Mexico"];

      END_IF_STATEMENT;

      ENDFOREACH;

    END
    UUID "{048cc460-3396-40e0-a470-b339da7da3f9}";;

    RULE                 "Set Coachella Normal Schedule";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year";
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"t + 11") DO
            $ "CoachellaSchedule.ShortageScheduleFlag" [date] := 0.00000000;

            $ "CoachellaSchedule.SurplusScheduleFlag" [date] := 0.00000000;

      ENDFOREACH;

    END
    UUID "{7a615b8b-79f5-4a05-b9f9-675f8c5a0751}";;

    RULE                 "Set IID Normal Schedule";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year";
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"t + 11") DO
            $ "IIDSchedule.SurplusScheduleFlag" [date] := 0.00000000;

            $ "IIDSchedule.ShortageScheduleFlag" [date] := 0.00000000;

      ENDFOREACH;

    END
    UUID "{69b1be1d-4f2a-489e-8b51-15cbc8dae503}";;

    RULE                 "CRIT System Conservation";
    DESCRIPTION          "Execution Constraint: January, rule has not yet fired successfully, and CRIT System Conservation exists for the given year<br>  <br>Description: Reduce CRIT's Arizona demands in any year where CRIT System Conservation exists.  CRIT System Conservation is an input to the model manually entered into slot on AZ ICS data object.<br>  <br>Slots Set: ColoradoRiverIndianReservation:CRIR AZ.Depletion Requested, ColoradoRiverIndianReservation:CRIR AZ.Diversion Requested ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" ) AND $ "Arizona ICS.CRITSystemConservation" [@"24:00:00 December Max DayOfMonth, Current Year"] > 0.00000000 "acre-ft";
    NOTES                "";
    BEGIN

      WITH_STATEMENT (NUMERIC annual_vol = $ "Arizona ICS.CRITSystemConservation" [@"24:00:00 December Max DayOfMonth, Current Year"]) DO
            WITH_STATEMENT (NUMERIC annual_depletion = "SumFlowsToVolume"( $ "ColoradoRiverIndianReservation:CRIR AZ.Depletion Requested", @"24:00:00 January Max DayOfMonth, Current Year", @"24:00:00 December Max DayOfMonth, Current Year" )) DO
            FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            WITH_STATEMENT (NUMERIC monthly_vol = annual_vol * ( "FlowToVolume"( $ "ColoradoRiverIndianReservation:CRIR AZ.Depletion Requested" [date], date ) / annual_depletion )) DO
            $ "ColoradoRiverIndianReservation:CRIR AZ.Depletion Requested" [date] := $ "ColoradoRiverIndianReservation:CRIR AZ.Depletion Requested" [date] - "VolumeToFlow"( monthly_vol, date );

            $ "ColoradoRiverIndianReservation:CRIR AZ.Diversion Requested" [date] := $ "ColoradoRiverIndianReservation:CRIR AZ.Diversion Requested" [date] - $ "ColoradoRiverIndianReservation:CRIR AZ.Diversion Requested" [date] COMMENTED_BY "compute the reduction in diversion space <br>" / $ "ColoradoRiverIndianReservation:CRIR AZ.Depletion Requested" [date] * "VolumeToFlow"( monthly_vol, date );

      END_WITH_STATEMENT;

      ENDFOREACH;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{a4327884-76ae-4ac9-ade0-7f9213ef8705}";;

    RULE                 "Set Arizona Priority 2, 3 and 4 Normal Schedules";
    DESCRIPTION          "This rule fires once a year and sets the Arizona 2nd, 3rd and 4th (excluding CAP) priority users to their Normal schedules. The Normal schedule for these users may be adjusted during a Shortage. View subbasins Other Arizona Priority 4 Users, Arizona Priority 2 and 3 Users to see specifically which users are included. ";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year";
    NOTES                "";
    BEGIN

      FOREACH (DATETIME date IN @"t" TO @"24:00:00 December 31, Current Year") DO
            FOREACH (OBJECT diversion IN "OtherArizonaPriority4UsersWaterUser"(  )) DO
            diversion CONCAT ".Depletion Requested" [date] := "ArizonaPriority4Schedules.Depletion_" CONCAT "GetSlotNameForScheduleWaterUser"( STRINGIFY diversion ) [date];

            diversion CONCAT ".Diversion Requested" [date] := "ArizonaPriority4Schedules.Diversion_" CONCAT "GetSlotNameForScheduleWaterUser"( STRINGIFY diversion ) [date];

      ENDFOREACH;

      ENDFOREACH;

    END
    UUID "{e60e131a-c3e5-4c3c-a280-9c0e0f03dc6a}";;

    RULE                 "Set Normal Year Flag";
    DESCRIPTION          "This rule sets a flag to 1 if the year is determined to be Normal, i.e. not a Shortage or Surplus. This flag is used to determine whether or not proposed ICS activity may occur.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January 31, Current Year" AND "NotSurplusOrShortageYear"(  );
    NOTES                "";
    BEGIN

      $ "Mead Bank.Normal Year" [@"24:00:00 December 31, Current Year"] := 1.00000000;

    END
    UUID "{4915097e-4b28-4fde-ac6f-29483a5829f9}";;

    RULE                 "Set Required DCP and BWSCP Contributions";
    DESCRIPTION          "EXECUTION CONSTRAINT: <br>Only in January, and only executes once.<br><br>DESCRIPTION:<br>This rule looks to prev. Dec. Mead pool elevaiton in Jan of current year to determine if any states should be making DCP contributions and if Mexico should be making BWSCP savings contributions and sets the corresponding slot on the DCP data object.  <br><br>SLOTS SET:<br>All of the slots for all users (states and Mexico) making DCP and BWSCP Savings Contributions. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND NOT "HasRuleFiredSuccessfully"( "ThisRule" );
    NOTES                "2019-05-24 - RAB - Updated to loop through each user calling a single function that now holds the computation logic. <br><br>May 2019 - moved from DCP model to official model";
    BEGIN

      FOREACH (SLOT user IN "DCPSlots"(  )) DO
            user [@"24:00:00 December Max DayOfMonth, Current Year"] := "DetermineDCPContribution"( user );

      ENDFOREACH;

    END
    UUID "{386afd3c-90b9-43ec-a333-6e46941cd9bf}";;

    RULE                 "Set Surplus Condtions Flag";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year";
  NAMES_COLOR  "#5500ff";
    NOTES                "";
    BEGIN

      $ "SummaryOutputData.LBSurplusConditions" [@"24:00:00 December Max DayOfMonth, Current Year"] := IF ( $ "Surplus Triggers.7 State Plan Level 2" [@"24:00:00 December 31, Previous Year"] == 1200.00000000 "ft" )
 THEN
  IF ( $ "Surplus.SurplusRelease" [] > 0.00000000 "acre-ft" )
  THEN
   1.00000000
  ELSE
   0.00000000
  ENDIF
 ELSE
  IF ( $ "Mead.Pool Elevation" [@"24:00:00 December 31, Previous Year"] >= $ "Surplus Triggers.7 State Plan Level 3" [@"24:00:00 December 31, Previous Year"] OR $ "Surplus.SurplusRelease" [] > 0.00000000 "acre-ft" )
  THEN
   1.00000000
  ELSE
   0.00000000
  ENDIF
 ENDIF
 ELSEIF_COND ( $ "Surplus Triggers.7 State Plan Level 3" [@"24:00:00 December 31, Previous Year"] == 1200.00000000 "ft" )
 ELSEIF_CLAUSE ( IF ( $ "Mead.Pool Elevation" [@"24:00:00 December 31, Previous Year"] >= $ "Surplus Triggers.7 State Plan Level 2" [@"24:00:00 December 31, Previous Year"] OR $ "Surplus.SurplusRelease" [] > 0.00000000 "acre-ft" )
 THEN
  1.00000000
 ELSE
  0.00000000
 ENDIF )
 END_ELSEIF;

    END
    UUID "{48e90a04-890e-4433-bbda-2ca1d267cd48}";;

    RULE                 "Set Shortage Condtions Flag";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year";
    NOTES                "";
    BEGIN

      $ "SummaryOutputData.LBShortageConditions" [@"24:00:00 December Max DayOfMonth, Current Year"] := IF ( "IsShortageFromInput"(  ) )
 THEN
  1.00000000
 ELSE
  0.00000000
 ENDIF;

    END
    UUID "{e3698b66-82ca-43be-990a-59d060c4cd64}";;

  END
  UUID "{6dce44b6-d12b-4491-bb06-49cd1fb42b1a}";;

  POLICY_GROUP   "Upper Colorado Priority Deliveries";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Short Users Above Grand Valley";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Short Users Above Grand Valley" );
    NOTES                "";
    BEGIN

      IF_STATEMENT ("Floor"( $ "SeniorAgUsesBelowCameo.Total Depletion Shortage" [], 1.00000000 "acre-ft/month" ) > 0.00000000 "acre-ft/month" AND "Floor"( "ActualDepletionAboveGrandValley"(  ), 1.00000000 "acre-ft" ) > 0.00000000 "acre-ft") THEN
            FOREACH (OBJECT user IN "ListSubbasin"( "Users Above Grand Valley" )) DO
            IF_STATEMENT (user & "Depletion Requested" [] > 0.00000000 "acre-ft/month") THEN
            user & "Depletion Requested" [] := ( user & "Depletion Requested" [] - user & "Depletion Shortage" [] ) - "GetShortageAboveGrandValley"(  ) * ( ( user & "Depletion Requested" [] - user & "Depletion Shortage" [] ) / "ActualDepletionAboveGrandValley"(  ) );

            user & "Diversion Requested" [] := ( ( user & "Depletion Requested" [] - user & "Depletion Shortage" [] ) - "GetShortageAboveGrandValley"(  ) * ( ( user & "Depletion Requested" [] - user & "Depletion Shortage" [] ) / "ActualDepletionAboveGrandValley"(  ) ) ) * ( user & "Diversion Requested" [] / user & "Depletion Requested" [] );

      END_IF_STATEMENT;

      ENDFOREACH;

      END_IF_STATEMENT;

    END
    UUID "{6c6f56f6-8a03-4670-814b-c82995240253}";;

    RULE                 "Short Users Above Shoshone";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Short Users Above Shoshone" );
    NOTES                "";
    BEGIN

      IF_STATEMENT ("Floor"( $ "EnergyUsesShoshonePowerPlant.Total Diversion Requested" [] - $ "EnergyUsesShoshonePowerPlant.Total Diversion" [], 1.00000000 "acre-ft/month" ) > 0.00000000 "acre-ft/month" AND "Floor"( "ActualDepletionAboveShoshone"(  ), 1.00000000 "acre-ft" ) > 0.00000000 "acre-ft") THEN
            FOREACH (OBJECT user IN "ListSubbasin"( "Users Above Shoshone" )) DO
            IF_STATEMENT (user & "Depletion Requested" [] > 0.00000000 "acre-ft/month") THEN
            user & "Depletion Requested" [] := ( user & "Depletion Requested" [] - user & "Depletion Shortage" [] ) - "GetShortageAboveShoshone"(  ) * ( ( user & "Depletion Requested" [] - user & "Depletion Shortage" [] ) / "ActualDepletionAboveShoshone"(  ) );

            user & "Diversion Requested" [] := ( ( user & "Depletion Requested" [] - user & "Depletion Shortage" [] ) - "GetShortageAboveShoshone"(  ) * ( ( user & "Depletion Requested" [] - user & "Depletion Shortage" [] ) / "ActualDepletionAboveShoshone"(  ) ) ) * ( user & "Diversion Requested" [] / user & "Depletion Requested" [] );

      END_IF_STATEMENT;

      ENDFOREACH;

      END_IF_STATEMENT;

    END
    UUID "{49238da9-b802-4cbe-9a5b-dbd2b6fe093c}";;

  END
  UUID "{acda0071-4f10-40c1-8057-60698dc6825a}";;

  POLICY_GROUP   "Limit Demands";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Limit New Mexico to Apportionment";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND NOT "HasRuleFiredSuccessfully"( "Limit New Mexico to Apportionment" );
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "Computed State Depletions.New Mexico Annual Normal" [@"24:00:00 December Max DayOfMonth, Current Year"] + $ "NavajoData.ScheduledNavajoEvaporation" [@"24:00:00 December Max DayOfMonth, Current Year"] > $ "Computed State Depletions.NewMexicoApportionment" []) THEN
            FOREACH (DATETIME month IN @"t" TO @"t + 11") DO
          DESCRIPTION          "Will limit NM to apportionment by reducing NIIPExports:Exports <br>";
      $ "NavajoIndianIrrigationProjectNIIPandExports:Exports.Depletion Requested" [month] := "ComputeNMReductionPercentage"(  ) * $ "NavajoIndianIrrigationProjectNIIPandExports:Exports.Depletion Schedule" [month];

            $ "NavajoIndianIrrigationProjectNIIPandExports:Exports.Diversion Requested" [month] := "ComputeNMReductionPercentage"(  ) * $ "NavajoIndianIrrigationProjectNIIPandExports:Exports.Diversion Schedule" [month];

      ENDFOREACH;

      END_IF_STATEMENT;

    END
    UUID "{00228182-3c0e-4ff3-af0d-b7f6c35fa4dd}";;

    RULE                 "Limit Arizona Upper Basin to Apportionment";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"24:00:00 January Max DayOfMonth, Current Year" AND NOT "HasRuleFiredSuccessfully"( "Limit Arizona Upper Basin to Apportionment" );
    NOTES                "";
    BEGIN

      IF_STATEMENT ("Floor"( $ "Computed State Depletions.Arizona Upper Basin Annual Normal" [@"24:00:00 December Max DayOfMonth, Current Year"], 1.00000000 "acre-ft" ) > $ "Computed State Depletions.ArizonaUBApportionment" []) THEN
            FOREACH (DATETIME month IN @"t" TO @"t + 11") DO
          DESCRIPTION          "Will limit AZ to apportionment by reducing ArizonaMiscUses:AZUBNavajoClaims<br>";
      $ "ArizonaMiscUses:AZUBNavajoClaims.Depletion Requested" [month] := "ComputeAZUBReductionPercentage"(  ) * $ "ArizonaMiscUses:AZUBNavajoClaims.Depletion Schedule" [month];

            $ "ArizonaMiscUses:AZUBNavajoClaims.Diversion Requested" [month] := "ComputeAZUBReductionPercentage"(  ) * $ "ArizonaMiscUses:AZUBNavajoClaims.Diversion Schedule" [month];

      ENDFOREACH;

      END_IF_STATEMENT;

    END
    UUID "{52e55147-2e5c-45d6-a9fa-731b73ae6b6e}";;

  END
  UUID "{c24a580f-5e44-44c2-8ff1-f70a9aca8ca2}";;

  POLICY_GROUP   "Powell Forecasting";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "PPP_Set_Adjusted_Operations_Flag";
    DESCRIPTION          "CF: Determine if we are going to extended CRSP operations and set the &quot;PowellForecastDeficitFlag&quot; accordingly. <br>If &quot;ExtendedOperationsFlag&quot; is not enabled (0, input by user) or we are not during InDCPTimeSpan then no extended operations ( PowellForecastDeficitFlag = 0). <br>If  &quot;PowellForecastDeficit&quot; is IsNaN then use the previous months value. <br>Else if &quot;PowellForecastDeficit&quot; is negative than enable extended operations ( PowellForecastDeficitFlag = 1). <br> ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      % "ExtendedOperations" & "PowellForecastDeficitFlag" [] := IF ( % "ExtendedOperations" & "ExtendedOperationsFlag" [] == 0.00000000 OR NOT "InDCPTimeSpan"(  ) )
 THEN
  0.00000000
 ELSE
  IF ( IsNaN % "ExtendedOperations" & "PowellForecastDeficit" [] )
  THEN
   % "ExtendedOperations" & "PowellForecastDeficitFlag" [@"t - 1"]
  ELSE
   IF ( % "ExtendedOperations" & "PowellForecastDeficit" [] < 0.00000000 "acre-ft" )
   THEN
    1.00000000
   ELSE
    0.00000000
   ENDIF
  ENDIF
 ENDIF;

    END
    UUID "{ddf19a30-1e5d-4524-8cdb-c0f68b5efee7}";;

    RULE                 "FG_April_Forecast";
    DESCRIPTION          "Estimate additional volume available for Spring Peak Flow augmentation using a simplified FG storage prediction based upon regression. Positive volumes calculated by this rule are additional volumes to be released over April-July. Negative volumes indicate that additional FG releases are not necessary/possible. <br><br>Slot used by MakeDailyFlamingGorgeReleaseDateandFlowList_EO() ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetMonthAsString"( @"t" ) == "April";
    NOTES                "";
    BEGIN

      % "ExtendedOperations" & "FGForecastDVRelease" [] := "MinItem"( { "ElevationToStorage"( % "Powell", $ "ExtendedOperations.PowellProtectedElevation" [] ) , $ "ExtendedOperations.PowellForecastDeficit" [@"24:00:00 April 30, Current Year"] * - 1.00000000 , ( % "FlamingGorge" & "Storage" [@"t - 1"] + "PredictedFGInflow"( @"t", @"t + 3" ) * 0.07000000 - 40000.00000000 "acre-ft" - "ElevationToStorage"( % "FlamingGorge", 5890.00000000 "ft" ) ) COMMENTED_BY "Simplified FG storage prediction based upon regression<br>Estimates additional volume available for Spring Peak Flow augmentation<br>Positive volumes calculated by this rule are additional volumes to be released over April-July<br>Negative volumes indicate that additional FG releases are not necessary/possible <br>" } );

    END
    UUID "{258d5bae-0447-448f-ae77-44b8ed001ca7}";;

    RULE                 "PPP_April_Forecast";
    DESCRIPTION          "UB DO Modeling Assumptions: Estimate the inflow into Powell through the following April. Regression equations were developed through analyses of the April and August 24-Month Studies from 1994-2013. The estimation is intended to mimic forecasts by correlating errors and observed magnitudes of inflow. <br><br>CF: Reduce this value if FG is below its FGElevationRecoveryTrigger @ t-4. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetMonthAsString"( @"t" ) == "April";
    NOTES                "";
    BEGIN

      % "ExtendedOperations" & "PowellForecastDeficit" [] := % "Powell" & "Storage" [@"t - 1"] + ( "Max"( ( "SumFlowsToVolumeSkipNaN"( % "TotVal" & "Powell", @"t", @"t + 11" ) - % "ExtendedOperations" & "Apr_AnticipatedDepletions" [] ) * % "ExtendedOperations" & "AprilRegressionCoefficients" [% "ExtendedOperations" & "ForecastExceedanceFlag" [], 0.00000000] + "SetRandomDeviation_EO"(  ) * % "ExtendedOperations" & "AprilRegressionCoefficients" [% "ExtendedOperations" & "ForecastExceedanceFlag" [], 1.00000000] + % "ExtendedOperations" & "AprilRegressionCoefficients" [% "ExtendedOperations" & "ForecastExceedanceFlag" [], 2.00000000] - IF ( % "FlamingGorge" & "Pool Elevation" [@"t - 4"] < % "ExtendedOperations" & "FGElevationRecoveryTrigger" [] )
 THEN
  300000.00000000 "acre-ft"
 ELSE
  0.00000000 "acre-ft"
 ENDIF, 0.00000000 "acre-ft" ) - ( "EstimateEvaporation"( % "Powell", $ "Powell.Storage" [@"t - 1"], "ElevationToStorage"( % "Powell", % "ExtendedOperations" & "PowellProtectedElevation" [] ), @"t", @"t + 11" ) + % "ExtendedOperations" & "PowellReleaseThroughApril" [] ) ) - "ElevationToStorage"( % "Powell", % "ExtendedOperations" & "PowellProtectedElevation" [] );

    END
    UUID "{9e8c6c70-4276-410a-af20-4c680c113fb0}";;

    RULE                 "PPP_August_Forecast";
    DESCRIPTION          "UB DO Modeling Assumptions: Estimate the inflow into Powell through the following April. Regression equations were developed through analyses of the April and August 24-Month Studies from 1994-2013. The estimation is intended to mimic forecasts by correlating errors and observed magnitudes of inflow. <br><br>CF: Reduce this value if FG is below its FGElevationRecoveryTrigger @ t-4. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetMonthAsString"( @"t" ) == "August";
    NOTES                "";
    BEGIN

      % "ExtendedOperations" & "PowellForecastDeficit" [] := % "Powell" & "Storage" [@"t - 1"] + ( "Max"( ( "SumFlowsToVolumeSkipNaN"( % "TotVal" & "Powell", @"t", @"t + 7" ) - % "ExtendedOperations" & "Aug_AnticipatedDepletions" [] ) * % "ExtendedOperations" & "AugustRegressionCoefficients" [% "ExtendedOperations" & "ForecastExceedanceFlag" [], 0.00000000] + "SetRandomDeviation_EO"(  ) * % "ExtendedOperations" & "AugustRegressionCoefficients" [% "ExtendedOperations" & "ForecastExceedanceFlag" [], 1.00000000] + % "ExtendedOperations" & "AugustRegressionCoefficients" [% "ExtendedOperations" & "ForecastExceedanceFlag" [], 2.00000000] - IF ( % "FlamingGorge" & "Pool Elevation" [@"t - 4"] < % "ExtendedOperations" & "FGElevationRecoveryTrigger" [] )
 THEN
  300000.00000000 "acre-ft"
 ELSE
  0.00000000 "acre-ft"
 ENDIF, 0.00000000 "acre-ft" ) - ( "EstimateEvaporation"( % "Powell", $ "Powell.Storage" [@"t - 1"], "ElevationToStorage"( % "Powell", % "ExtendedOperations" & "PowellProtectedElevation" [] ), @"t", @"t + 7" ) + % "ExtendedOperations" & "PowellReleaseThroughApril" [] ) ) - "ElevationToStorage"( % "Powell", % "ExtendedOperations" & "PowellProtectedElevation" [] );

    END
    UUID "{6c629f0d-77d0-44ee-9d77-1d6083f9eeb0}";;

    RULE                 "PPP_ReleaseThroughNextApril";
    DESCRIPTION          "UB DO Modeling Assumptions: Estimate Powell's release through the next April (PowellReleaseThroughApril) as Powell's forecast release through September (existing CRSS ForecastPowellRelease function) + a constant that is determined from the following table<br><br>Condition<br>In mid-elevation release tier, and Meads previous EOCY elevation > 1,025 ft.<br>3.58 MAF<br>In mid-elevation release tier, and Meads previous EOCY elevation < 1,025 ft.<br>4.00 MAF<br>In lower elevation balancing tier, and Powell EOWY storage forecast > Mead EOWY storage forecast<br>4.15 MAF<br>In lower elevation balancing tier, and Powell EOWY storage forecast < Mead EOWY storage forecast<br>3.28 MAF<br>All other condtions<br>4.00 MAF";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT "GetMonthAsString"( @"t" ) == "April" OR "GetMonthAsString"( @"t" ) == "August";
    NOTES                "";
    BEGIN

      % "ExtendedOperations" & "PowellReleaseThroughApril" [] := "ForecastPowellRelease"(  ) + IF ( "InMidElevationReleaseTier"(  ) )
 THEN
  IF ( % "Mead" & "Pool Elevation" [@"24:00:00 December 31, Previous Year"] < 1025.00000000 "ft" )
  THEN
   4000000.00000000 "acre-ft"
  ELSE
   3580000.00000000 "acre-ft"
  ENDIF
 ELSE
  IF ( "InLowerElevationBalancingTier"(  ) )
  THEN
   IF ( % "EqualizationData" & "ForecastEOWYSPowell" [@"t - 1"] > % "EqualizationData" & "ForecastEOWYSMead" [@"t - 1"] )
   THEN
    4150000.00000000 "acre-ft"
   ELSE
    3280000.00000000 "acre-ft"
   ENDIF
  ELSE
   4000000.00000000 "acre-ft"
  ENDIF
 ENDIF;

    END
    UUID "{7b763dc4-b175-4e60-9e19-0dca16b09a29}";;

    RULE                 "Powell Runoff Forecast";
    DESCRIPTION          "This rule was added to compute and store the forecasts for inflows into Lake Powell.  These computations<br>are done for Mead's inflow forecast, so we should clean that up eventually.<br><br>It assumes that the forecast error has been computed previously by the Powell Forecast Error rule <br>and stored on the data/slot  MeadFloodControlData.PowellForecastError";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" <= @"24:00:00 July Max DayOfMonth, Current Year" AND @"t" >= @"24:00:00 January Max DayOfMonth, Current Year";
    NOTES                "CF,20190502: Moved from Group Powell Rules, Priority 27 to Group Powell Forecasting for DCP";
    BEGIN

      $ "PowellForecastData.Natural Inflow with Error" [] := $ "Qsum.Powell" [] - $ "MeadFloodControlData.PowellForecastError" [] * 1000000.00000000 "acre-feet";

      $ "PowellForecastData.Unreg Inflow with Error" [] := $ "Qsum.Powell" [] - $ "MeadFloodControlData.PowellForecastError" [] * 1000000.00000000 "acre-feet" - "UBDepletionsRange"( @"t", @"24:00:00 July Max DayOfMonth, Current Year" );

      $ "PowellForecastData.Reg Inflow with Error" [] := $ "Qsum.Powell" [] - $ "MeadFloodControlData.PowellForecastError" [] * 1000000.00000000 "acre-feet" - ( ( "UBDepletionsRange"( @"t", @"24:00:00 July Max DayOfMonth, Current Year" ) + "UBEffectiveStorage"(  ) ) * "Min"( 1.00000000, ( $ "Qsum.Powell" [] - $ "PowellForecastData.forecastError" [] COMMENTED_BY "same as MeadFloodControlData.PowellForecastError * 1 MAF" ) COMMENTED_BY "Natural Inflow w/error" / $ "HistoricalNaturalFlow.AboveLeesFerry_AvgHistMonth2JulyQSum" [] COMMENTED_BY "The historical avg. natural flow above Lees Ferry for the current month through July (Qsum)" ) );

    END
    UUID "{2d75343a-52c0-491d-9ef8-9c527f50d2ed}";;

    RULE                 "Powell Forecast Error";
    DESCRIPTION          "Brad Vickers, Wave Engineering Inc.<br>January, 1999<br><br>This rule checks to see if the PowellForecastError slot on the MeadFloodControlData object has been set, if it has not and the month is not June (because June has some special limits) then<br>the forecast error for Powell is computed with the ComputeForecastError function.  The first part of the IF statement in the rule limits June's computed forecast error to one half of <br>May's forecast error. This check was performed in the originall CRSS.  Ideally I believe there should be limits on every month to ensure that the forecast error is within the range of historical <br>forecast error.  This becomes a problem with the random component of how the forecast error is derived.  See the comments on the ComputeForecastError function for further information on<br>how the forecast error is computed. <br><br>NOTE the print statement in this rule.  this calls the resetRanDev function which rewinds the file of random numbers to the hydrology start date that is input<br>by the user on the MeadFloodControlData.HydrologyStartYear table slot.  This function is only called at the first of the model run.  It is used with a print statement because it has to be in a rule <br>rather than a function and there are no slots set with it.<br>";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT IsNaN $ "MeadFloodControlData.PowellForecastError" [];
    NOTES                "CF,20190502: Moved from Group Powell Rules, Priority 28 to Group Powell Forecasting for DCP";
    BEGIN

      $ "MeadFloodControlData.PowellForecastError" [] := "ComputePowellForecastError"(  );

      $ "PowellForecastData.forecastError" [] := "ComputePowellForecastError"(  ) * 1000000.00000000 "acre-feet";

      $ "PowellForecastData.random" [] := "SetRandomDeviation"(  );

    END
    UUID "{ea9b513d-621d-4ef8-8ac4-79537b587f36}";;

  END
  UUID "{855a02b4-356d-48dd-91ec-84ef87864df6}";;

  POLICY_GROUP   "Set Operational Dates";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Set ICS Put and Take Dates";
    DESCRIPTION          "EXECUTION CONSTRAINT: <br>Only first timstep of run.<br><br>DESCRIPTION:<br>Sets all of the different years that mainly affect ICS creation and delivery logic. <br><br>SLOTS SET:<br>- `Mead Bank.LastYearForPuts[]`<br>- `Mead Bank.Last Year For Takes[]`<br>- `MWD ICS.MWDICSStep1PutEndDate[]`<br>- `MWD ICS.MWDICSStep1TakeEndDate[]`<br>- `MexicoSchedule.Minute323Expires[]`<br>- `DCP.EndDCP[]`";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == "RunStartDate"(  );
  NAMES_COLOR  "#5500ff";
    NOTES                "2019-01-14 - RAB: Replaced all assignments with calls to RunEndDate()<br>2019-05-24 - RAB - Added in assignment to `DCP.EndDCP[]`<br>~2012 - RAB - Created";
    BEGIN

      WITH_STATEMENT (DATETIME end_plus_10 = "OffsetDate"( "RunEndDate"(  ), 10.00000000, "1 years" )) DO
            FOREACH (DATETIME year IN "GetDates"( @"24:00:00 December Max DayOfMonth, Current Year", "RunEndDate"(  ), "1 years" )) DO
            $ "Mead Bank.LastYearForPuts" [year] := "DateToNumber"( "RunEndDate"(  ) );

            $ "Mead Bank.LastYearForTakes" [year] := "DateToNumber"( end_plus_10 );

            $ "MWD ICS.MWDICSStep1PutEndDate" [year] := "DateToNumber"( "RunEndDate"(  ) );

            $ "MWD ICS.MWDICSStep1TakeEndDate" [year] := "DateToNumber"( end_plus_10 );

            $ "MexicoSchedule.Minute323Expires" [year] := "DateToNumber"( "RunEndDate"(  ) );

            $ "DCP.EndDCP" [year] := "DateToNumber"( @"24:00:00 January 1, 2010" );

            $ "DCP.LastYearForRecovery" [year] := "DateToNumber"( end_plus_10 );

      ENDFOREACH;

      END_WITH_STATEMENT;

    DESCRIPTION          "end date here should be the same as the DCP.EndDCP[] date.  <br>";
      FOREACH (DATETIME month IN "GetDates"( "RunStartDate"(  ), "RunEndDate"(  ), "1 months" )) DO
            $ "ExtendedOperations.ExtendedOperationsFlag" [month] := 0.00000000;

      ENDFOREACH;

    END
    UUID "{8a02e3ed-8960-43af-a319-9dfa803bcbd7}";;

  END
  UUID "{516055fb-4559-4aa3-a1a7-55dee34962a2}";;

  REPORT_GROUP "Flaming Gorge Rules Report Group";
  DESCRIPTION  "";
  NOTES  "";
  BEGIN
    REPORT_ITEM      "Calculate April To July Volume Annual Slot";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations";
    UUID "{c953d15b-e5b7-433a-9d81-1e3e3106f935}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Update Historical Record";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations";
    UUID "{8213b341-3f9e-4c97-b105-e7a925967f84}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Calc April July Volume Monthly";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations";
    UUID "{c03b41ee-558f-4b05-a711-e437df9cc392}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Calc Percent Exceedance";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations";
    UUID "{21dd7760-02e0-4a6c-87fa-9cb75b1351d0}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Base Flow Hydrologic Classification";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations";
    UUID "{703417ec-c65f-4fe1-b2ed-a19c15ddde83}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Base Flow Operations";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations";
    UUID "{3024551d-27b1-425a-8cb4-1f65826dd722}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Spring Flow Hydrologic Classification";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations";
    UUID "{d15e308b-620e-4fd5-9fef-419f165b9700}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Release to Meet ULDE";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations";
    UUID "{66feb3df-636c-41c2-9fb5-59152456e29f}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Set Flaming Gorge Daily April to July Schedule";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations";
    UUID "{268d6166-7dff-492c-902d-f363c59da733}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Adjust Daily for August Base Flow";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations";
    UUID "{d8977472-37e2-4183-968b-4679a1cd9f36}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Min Flow in Extremely Dry Years with Low Storage";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations";
    UUID "{a1861b17-0485-40a7-9dec-3ea13b6e1a39}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Sum Daily Flaming Gorge Release Schedule to Monthly";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations";
    UUID "{4e004177-6e08-40fa-8643-4a30f60a967a}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Fill Daily Flaming Gorge Releases for Months Outside of April-August";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations";
    UUID "{21927dac-d8c5-4783-87a7-8ae5620e7ac5}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Calculate Daily Jensen Flows";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations";
    UUID "{74a79115-252d-4181-a57c-b31a47f128d9}";
    REPORT_ITEM_END;

  END
  UUID "{f8d7a38e-c8ac-4e8c-ad7e-f2d69211d769}";;

  REPORT_GROUP "Flaming Gorge Function Report Group";
  DESCRIPTION  "";
  NOTES  "";
  BEGIN
    REPORT_ITEM      "MakeDailyFlamingGorgeReleaseDateandFlowList";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{3f0c63cb-354a-4d00-839a-c60372dde222}";
    REPORT_ITEM_END;

    REPORT_ITEM      "FindYampaPeakDateForYear";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{bd2336af-d9ed-4f65-aa85-8a366424c452}";
    REPORT_ITEM_END;

    REPORT_ITEM      "FindYampa10kcfsBypassDateForYear";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{2d44ab06-a66e-4b88-ab21-0bd738897d0d}";
    REPORT_ITEM_END;

    REPORT_ITEM      "FindYampa14kcfsPPCDateForYear";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{e336b2b8-ceb5-43a9-9a0d-a2caffad29c2}";
    REPORT_ITEM_END;

    REPORT_ITEM      "CountDaysAboveThreshold";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{9e7f4a36-a1d7-405b-a4bc-987d04f037b6}";
    REPORT_ITEM_END;

    REPORT_ITEM      "CountDaysBelowThreshold";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{a00ac6f1-0d86-419f-bd8b-95d142094f43}";
    REPORT_ITEM_END;

    REPORT_ITEM      "AugustDownRamp";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{1a31a194-b978-4bfb-bd8b-50bb15a4d916}";
    REPORT_ITEM_END;

    REPORT_ITEM      "SpringFlowA-JVolumeUpdate";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{1064d499-f942-4cd7-bec1-78c56cbc445f}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BaseFlowA-JVolumeUpdate";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{5aa1657d-73b6-4eab-8665-d47f2adb59d3}";
    REPORT_ITEM_END;

    REPORT_ITEM      "GetFGBaseFlowMagnitude";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{de57e1d5-576f-4345-8237-fd423561ffa1}";
    REPORT_ITEM_END;

    REPORT_ITEM      "GetFGBaseFlowMagnitudeUnconstrained";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{814ab617-afaf-49b9-bf2c-166fbe1cbc15}";
    REPORT_ITEM_END;

    REPORT_ITEM      "DaysToDownramp";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{7c4e39cf-3694-4a48-84b1-1d4217b6f964}";
    REPORT_ITEM_END;

    REPORT_ITEM      "DaysToRampUp";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{4f925637-df2b-4ca0-bf3e-e6f40b4b095c}";
    REPORT_ITEM_END;

    REPORT_ITEM      "GetNumberOfDaysAtPPC";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{f88eff95-9c85-4418-840d-583c5926dc04}";
    REPORT_ITEM_END;

    REPORT_ITEM      "GetNumberOfDaysAtPPCUnconstrained";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{8a6243f2-a408-44b8-a34b-86787cd5ac1d}";
    REPORT_ITEM_END;

    REPORT_ITEM      "GetMay1TargetElevation";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{b523ac06-1d29-423d-b0bc-bec5ab203a90}";
    REPORT_ITEM_END;

    REPORT_ITEM      "AveRampUpFlow";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{759e93b2-eb9c-4976-acd4-7ba667b9e79e}";
    REPORT_ITEM_END;

    REPORT_ITEM      "AveRampDownFlow";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{48b0f864-93ed-4a23-9320-8698176155ec}";
    REPORT_ITEM_END;

    REPORT_ITEM      "GetDaysAtBypass";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{ff525df3-b58c-4d0b-8d45-9f08eafff2fe}";
    REPORT_ITEM_END;

    REPORT_ITEM      "PredictedFGInflow";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{8439b413-8ac9-4b1a-94da-8d318d45edc3}";
    REPORT_ITEM_END;

    REPORT_ITEM      "PredictedYampaFlow";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{b5f1cec9-d090-43db-b2ae-c8e9c29723c3}";
    REPORT_ITEM_END;

    REPORT_ITEM      "ForecastComputeDemandsBelow";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{ff6f39d9-acf2-419d-8896-4787e9c64527}";
    REPORT_ITEM_END;

    REPORT_ITEM      "TargetHWGivenInflowforOneMonth";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{ba3b7c90-a158-4488-b58a-8d22f75297b4}";
    REPORT_ITEM_END;

    REPORT_ITEM      "CountSustainedDaysAboveThreshold";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{9d5931f5-5252-4df7-8a9a-d0908b3994da}";
    REPORT_ITEM_END;

    REPORT_ITEM      "GetNumberOfDaysAtBypass";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{be0614d4-c3b5-4b2d-93a8-352340768809}";
    REPORT_ITEM_END;

    REPORT_ITEM      "GetNumberOfDaysAtBypassUnconstrained";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{50c4b5a9-3792-4009-b43d-f3df71b7129f}";
    REPORT_ITEM_END;

  END
  UUID "{9072c3e9-ad7b-46ed-8d95-e7d4d9d5d621}";;

  REPORT_GROUP "Flaming Gorge Data Slots Report Group";
  DESCRIPTION  "";
  NOTES  "";
  BEGIN
    REPORT_ITEM      "FlamingGorgeData.AbsoluteMinRelease";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "FlamingGorgeData";
    UUID "{71b7f81e-4a70-438e-b700-63861c6c7bed}";
    REPORT_ITEM_END;

    REPORT_ITEM      "FlamingGorgeData.BaseFlowDownrampRateNoUnits";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "FlamingGorgeData";
    UUID "{824acea1-bcef-41eb-b43f-9f6912c1917f}";
    REPORT_ITEM_END;

    REPORT_ITEM      "FlamingGorgeData.BaseFlowMagnitudeLimits";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "FlamingGorgeData";
    UUID "{457dc775-2610-4d94-8d1e-76a113407b05}";
    REPORT_ITEM_END;

    REPORT_ITEM      "FlamingGorgeData.BypassCapacity";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "FlamingGorgeData";
    UUID "{1ee72f79-ff04-4ba5-9909-a17884d835ad}";
    REPORT_ITEM_END;

    REPORT_ITEM      "FlamingGorgeData.BypassThreshold";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "FlamingGorgeData";
    UUID "{6f44fa96-5785-4211-bf80-95264efc6622}";
    REPORT_ITEM_END;

    REPORT_ITEM      "FlamingGorgeData.DaysAtPowerPlantCapacity";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "FlamingGorgeData";
    UUID "{a6c01e88-eced-43df-ba4a-a7525b4144a6}";
    REPORT_ITEM_END;

    REPORT_ITEM      "FlamingGorgeData.HydrologicClassPercentileLimits";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "FlamingGorgeData";
    UUID "{394cd9f6-f8f9-4017-832f-bade5ca3606f}";
    REPORT_ITEM_END;

    REPORT_ITEM      "FlamingGorgeData.MaxDaysAtBypassCapacity";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "FlamingGorgeData";
    UUID "{c49cda91-5018-41fd-8326-c93f1b999b15}";
    REPORT_ITEM_END;

    REPORT_ITEM      "FlamingGorgeData.MaxPE";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "FlamingGorgeData";
    UUID "{84b41813-5f0c-43fe-910a-7fb2ad8c86af}";
    REPORT_ITEM_END;

    REPORT_ITEM      "FlamingGorgeData.May1TargetElevation";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "FlamingGorgeData";
    UUID "{41456039-5f7e-4fd6-9d9b-ec7c7dfd4453}";
    REPORT_ITEM_END;

    REPORT_ITEM      "FlamingGorgeData.MinFlow";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "FlamingGorgeData";
    UUID "{b36532a7-faf7-4385-a3eb-dd565e71eeb8}";
    REPORT_ITEM_END;

    REPORT_ITEM      "FlamingGorgeData.PowerPlantCapacity";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "FlamingGorgeData";
    UUID "{2c664586-4284-417d-b747-b917a970d1f5}";
    REPORT_ITEM_END;

    REPORT_ITEM      "FlamingGorgeData.RampUpRate";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "FlamingGorgeData";
    UUID "{b33c9b24-dec4-4bf2-94a8-75e807d4f44f}";
    REPORT_ITEM_END;

    REPORT_ITEM      "FlamingGorgeData.SpringMinimumPeak";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "FlamingGorgeData";
    UUID "{999821dd-7123-4e69-9773-888bc35a0dc0}";
    REPORT_ITEM_END;

    REPORT_ITEM      "FlamingGorgeData.YampaDaysAbove10000ForBypass";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "FlamingGorgeData";
    UUID "{df9ba693-afe1-482c-9161-f202dc917e03}";
    REPORT_ITEM_END;

    REPORT_ITEM      "FlamingGorgeData.YampaDaysAbove14000ForPPC";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "FlamingGorgeData";
    UUID "{621f5a51-8ab8-4bd1-91ee-f3bc62f25f78}";
    REPORT_ITEM_END;

  END
  UUID "{c4be9618-3900-4bad-bab5-7c8654f97ce2}";;

  REPORT_GROUP "Aspinall Rules Report Group";
  DESCRIPTION  "Used in the Aspinall Rules Report<br><br>Listed in order of execution (Lowest to highest priority)";
  NOTES  "20190418 - RAB - Adding back in; it appears the report was already created, so just adding the report groups back in, so the report can be generated.";
  BEGIN
    REPORT_ITEM      "Taylor Park Rule Curve";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Taylor Park and Aspinall Rules";
    UUID "{446e799e-f3c3-4ee3-98b1-dae34ae3e47b}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Calculate Gunnison Flow Targets";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Taylor Park and Aspinall Rules";
    UUID "{175ce52d-fb2a-404c-8eb0-234bd75cf34b}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Annual Daily Whitewater Flow Determination";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Taylor Park and Aspinall Rules";
    UUID "{df5edcd1-cf90-4b6e-8a81-b9efc3b5055c}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Annual Daily Black Canyon Flow Determination";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Taylor Park and Aspinall Rules";
    UUID "{8ac253cc-94bd-4949-9f93-8aab6389f571}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Calculate May Release Volume";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Taylor Park and Aspinall Rules";
    UUID "{5a2faf7c-d780-4da7-b3f1-88e7852f36fa}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Blue Mesa Operations";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Taylor Park and Aspinall Rules";
    UUID "{7ddb2d57-9d25-440e-8f41-68477b752cb4}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Morrow Point Outflow";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Taylor Park and Aspinall Rules";
    UUID "{4a0f04ff-451d-4d38-9405-cb6d9bd9484b}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Crystal Outflow";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Taylor Park and Aspinall Rules";
    UUID "{ef3aaa50-4701-4a72-8e78-efbc8c5331ed}";
    REPORT_ITEM_END;

  END
  UUID "{9df40529-a869-44ae-8a48-7b4bdd5e5a90}";;

  REPORT_GROUP "Aspinall Functions Report Group";
  DESCRIPTION  "Used in the Aspinall Rules Report<br><br>Includes everything in the &quot;Aspinall Functions&quot; utility group from the GFS.";
  NOTES  "20190418 - RAB - Adding back in; it appears the report was already created, so just adding the report groups back in, so the report can be generated.";
  BEGIN
    REPORT_ITEM      "ComputeCrystalRuleCurveStorage";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Aspinall Functions";
    UUID "{56050c6a-7787-497f-9504-c532d168241b}";
    REPORT_ITEM_END;

    REPORT_ITEM      "ComputeCrystalRuleCurveRelease";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Aspinall Functions";
    UUID "{60f01edf-0ca4-4f86-a450-e0916727949d}";
    REPORT_ITEM_END;

    REPORT_ITEM      "ComputeMorrowRuleCurveRelease";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Aspinall Functions";
    UUID "{d80a8f7d-790c-4b15-a2dd-68d8cbc2162a}";
    REPORT_ITEM_END;

    REPORT_ITEM      "ComputeMorrowRuleCurveStorage";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Aspinall Functions";
    UUID "{c6ad92e1-f2cc-482b-9060-a52dbd0e86ae}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaOutflowCalc";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Aspinall Functions";
    UUID "{df84d8bc-d8d3-48dd-91d4-77c9cf7de2fa}";
    REPORT_ITEM_END;

    REPORT_ITEM      "GetStartDayOfMonth";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Aspinall Functions";
    UUID "{561a154a-0f00-43d7-8d04-ab7d097fcc8a}";
    REPORT_ITEM_END;

    REPORT_ITEM      "GetEndDayOfMonth";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Aspinall Functions";
    UUID "{ad816e3e-5c30-4262-b2b6-051298052d7c}";
    REPORT_ITEM_END;

    REPORT_ITEM      "CalcCanyonPeakFlowTarget";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Aspinall Functions";
    UUID "{927f4bdf-abd5-4274-ba8d-5f4b956637b4}";
    REPORT_ITEM_END;

    REPORT_ITEM      "CalcGunnisonWhitewaterPeakFlowTarget";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Aspinall Functions";
    UUID "{880ffcb6-0ac5-4a55-98f8-f5090aa7b9f9}";
    REPORT_ITEM_END;

    REPORT_ITEM      "CalcGunnisonHClass";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Aspinall Functions";
    UUID "{93c7d8e7-da82-4fc0-927b-916582c710e1}";
    REPORT_ITEM_END;

    REPORT_ITEM      "SolveBlueMesaReleaseForDownstreamTargets";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Aspinall Functions";
    UUID "{3bed8f3a-f6b2-4568-a4d2-29864a587f17}";
    REPORT_ITEM_END;

    REPORT_ITEM      "SolveBlueMesaReleaseForCrystalReleaseTarget";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Aspinall Functions";
    UUID "{344f65d2-93d1-4195-bdc6-bdeaad05919c}";
    REPORT_ITEM_END;

    REPORT_ITEM      "MaxDayOfMonth";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Aspinall Functions";
    UUID "{11f9bc74-216c-479a-9b57-10d246a40d9f}";
    REPORT_ITEM_END;

    REPORT_ITEM      "UBConstrainedOutflow";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Aspinall Functions";
    UUID "{4cf7eb0e-d1a0-49bf-9c3d-d6365cdfd298}";
    REPORT_ITEM_END;

  END
  UUID "{01d1eddf-9847-42b0-b2af-6f7f44b0022d}";;

  REPORT_GROUP "Aspinall Slot Report Group";
  DESCRIPTION  "Used in the Aspinall rules Report<br><br>Includes everything on the BlueMesaData data object.";
  NOTES  "20190418 - RAB - Adding back in; it appears the report was already created, so just adding the report groups back in, so the report can be generated.";
  BEGIN
    REPORT_ITEM      "BlueMesaData";
    REPORT_ITEM_TYPE 2;
    REPORT_ITEM_PARENT "";
    UUID "{bf28237e-cff1-4c9c-a990-32dc9664bb1e}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.BaseFlowTarget";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{96adccb2-51e1-4dc9-b39a-b336a2018208}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.BlueMesa_MaxOutflowTable";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{d5f0e3fb-099f-435f-a29d-9eda9b35a98f}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.BlueMesaAprilThroughJulyVolume";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{ef1c379b-b29e-48e1-b446-468cec11a19c}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.BlueMesaforDemandsFlag";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{04745f30-876e-4709-8d37-57abecc979e1}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.BlueMesaGuide";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{edbc6c5d-be3c-4e9e-b6f5-ff26f27759c1}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.BlueMesaMinRelease";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{2cb9bd41-9459-4219-a201-9d1fa44fab85}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.CanyonFlowCalcData";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{14354370-fb3c-488b-8009-b5b28d3eb888}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.CanyonHalfBankFlow";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{f83d7851-f076-405e-9d66-681d54585951}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.CanyonPeakFlowTarget";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{2871d7cb-5d3e-4d92-bf40-9eaaf1cd1f65}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.CanyonRampDownRateFromPeak";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{8342a159-ec84-4126-9bc8-bd3331eebaca}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.CanyonRampUpRateToPeak";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{14278ee5-161c-4d65-b0d0-b080761c76d5}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.CrystalMaxOutflow";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{73cfb84f-2a0a-4749-99fa-452b1115d09a}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.CrystalToGJ_MayAdjustment";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{3ef09460-423f-41a8-80b8-571dd8595f30}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.DeadPoolElevation";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{d8f598e7-f87c-420f-ba24-4c5cb129bb2b}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.GunnisonDurationTargets";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{5988cdea-7784-4f45-a2ed-1bc727acc5d3}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.GunnisonHClass";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{cb3af8d5-55f6-4337-ad51-c0f1b5325cb2}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.GunnisonShoulderFlowTarget";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{abe41f53-0178-4266-bc11-49a075c79900}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.HalfBankFlow";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{35fab39f-c132-411e-ab76-6945d03702d5}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.MaximumPoolElevation";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{3624c0f8-d808-4dd2-9fe8-4660666f5031}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.MayReleaseVolume";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{6673d885-956b-40a2-b02a-0f051e939127}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.MeetBMPE_TestMonthly";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{1daa4f21-4159-4dc1-bd49-157666351a1b}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.MeetCanyonDecreeFlows";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{8ad51410-0a7c-46ae-8cc6-996fb7a1173e}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.MeetStorageTargetByDec";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{704dabbc-1588-411d-bd93-01f4662f5f28}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.MeetStorageTargetByJuly";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{77df4c31-966a-4032-abce-4f643eb35d04}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.MeetWhitewaterVolumeGoal";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{71f17c92-bfa6-4b27-aed2-967cd29ba5b6}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.MeetWWBaseFlow";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{3e4fb03c-d200-49ca-889f-20a052d4b958}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.MeetWWBaseFlow_TestMonthly";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{5ec6e573-24c9-4e17-809d-cd8ba1a55be4}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.MinimumBlackCanyonFlow";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{c9a964e0-9883-4544-9812-1045915f8d18}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.MinimumPoolElevation";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{3b30d019-a6bf-4ed4-a72a-63b0fd1a164a}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.MonthlyMayWWPeakFlow";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{6b1c8044-df42-42fe-8f1b-f179f2dd5ccb}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.NaturalInflow";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{8a245f0a-ad60-42ac-8425-f7131d15ddae}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.PeakFlowCalcData";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{492a81a5-cc23-4b02-9cc6-5c14ab865115}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.PeakFlowDuration";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{cb43c14f-c258-4bfa-9aba-e704592ab031}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.ReleaseControl";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{50c74aea-983a-475e-8c61-9b2086b60178}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.ShoulderFlowCalcData_OLD";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{5e02998f-6d38-44df-80c0-501421b846ce}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.ShoulderFlowDuration";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{c74829ec-8f96-43d9-9b9c-55f7356d824c}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.ShoulderFlowTarget";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{71c4d4fc-2d03-4a84-9b64-3988a18ecd4f}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.SpillwayElevation";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{516dcf60-6d95-4c46-817b-d4b2aca2382c}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.StorageTargetCrystal";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{a0d811ca-ff97-4a2e-ad92-08df8273cc12}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.StorageTargetMorrowPoint";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{e0fd4f56-4201-4e8c-8f46-79d7e16ce110}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.SumDemands";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{b2da5111-f823-4445-8fd3-543c6915dbac}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.TargetDailyBlackCanyonFlows";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{0b7cbf18-3893-40cc-8969-345181fe860c}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.TargetDailyOutflowFromBlueMesa_AllDays";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{9956c4b0-18fe-424d-8bac-4f1bb89a13ee}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.TargetDailyWhitewaterFlows";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{5ac32d5e-5378-462d-8dfc-7d8385ea95a0}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.UnregulatedInflow";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{b7c2b12e-4ab9-4570-881d-db815532fc93}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.WhitewaterOpsAssurance";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{dd2f7e80-5763-4c15-8012-6d63917563fd}";
    REPORT_ITEM_END;

    REPORT_ITEM      "BlueMesaData.WhitewaterPeakFlowTarget";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "BlueMesaData";
    UUID "{ad467e69-46a9-45fc-b672-434112e8e4ed}";
    REPORT_ITEM_END;

  END
  UUID "{136a26d6-6b6e-4991-9c5d-54206b6befb9}";;

  REPORT_GROUP "Flaming Gorge EO Rules Report Group";
  DESCRIPTION  "";
  NOTES  "";
  BEGIN
    REPORT_ITEM      "Calc April July Volume Monthly_EO";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations - EO";
    UUID "{f42fa663-46d9-4cfd-b42c-5335275c8755}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Calc Percent Exceedance_EO";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations - EO";
    UUID "{659b9780-f4f3-4257-95c2-fb151810fd6f}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Base Flow Hydrologic Classification_EO";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations - EO";
    UUID "{df147516-0b50-46c5-a981-6b6324d94139}";
    REPORT_ITEM_END;

    REPORT_ITEM      "PPP_August_Classification_Adjustment";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations - EO";
    UUID "{a5e47013-6d15-45fc-b68a-fa6fa36b8892}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Base Flow Operations_EO";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations - EO";
    UUID "{d2c4a942-4f6e-4f08-b051-25ed6b96fe61}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Spring Flow Hydrologic Classification_EO";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations - EO";
    UUID "{302a6d37-8a73-4303-918f-fd3081c3db80}";
    REPORT_ITEM_END;

    REPORT_ITEM      "PPP_April_Classification_Adjustment";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations - EO";
    UUID "{ebfd57bf-52f6-4639-bfdb-292967837939}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Release to Meet ULDE_EO";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations - EO";
    UUID "{ce280dc0-c1ed-4294-9e32-b06545a80c9c}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Set Flaming Gorge Daily April to July Schedule_EO";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations - EO";
    UUID "{c81429f7-f408-4661-b8d6-826250531edb}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Adjust Daily for August Base Flow_EO";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations - EO";
    UUID "{d7012bfd-5e23-4b75-bc02-fd4b904c079a}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Min Flow in Extremely Dry Years with Low Storage_EO";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations - EO";
    UUID "{6738e61e-ebcc-4223-863a-df9439bf0410}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Sum Daily Flaming Gorge Release Schedule to Monthly_EO";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations - EO";
    UUID "{2d49938e-62f5-481c-bc7d-fe9442323cd4}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Fill Daily Flaming Gorge Releases for Months Outside of April-August_EO";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations - EO";
    UUID "{18226da3-4efe-40a6-8e36-731c1be857c9}";
    REPORT_ITEM_END;

    REPORT_ITEM      "Calculate Daily Jensen Flows";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Daily Operations - EO";
    UUID "{619615fd-dc33-4baa-9018-1672df09b9b2}";
    REPORT_ITEM_END;

  END
  UUID "{3b8ed171-d4bb-4526-92bf-df869f122759}";;

  REPORT_GROUP "Flaming Gorge EO Functions Report Group";
  DESCRIPTION  "";
  NOTES  "";
  BEGIN
    REPORT_ITEM      "BaseFlowA-JVolumeUpdate_EO";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{12f4ce78-803b-4c87-b507-35ccc1fd40ed}";
    REPORT_ITEM_END;

    REPORT_ITEM      "MakeDailyFlamingGorgeReleaseDateandFlowList_EO";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Flaming Gorge Functions";
    UUID "{dcc783e4-d263-4d7c-8a8f-2ecc14901b6d}";
    REPORT_ITEM_END;

  END
  UUID "{6f9f2ac5-ab89-4c08-aee0-77199331f4bc}";;

  REPORT_GROUP "Flaming Gorge EO Slots Report Group";
  DESCRIPTION  "";
  NOTES  "";
  BEGIN
    REPORT_ITEM      "ExtendedOperations.FGElevationRecoveryTrigger";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "ExtendedOperations";
    UUID "{38af33ac-4d60-4428-bfe3-a861b77adbaf}";
    REPORT_ITEM_END;

    REPORT_ITEM      "ExtendedOperations.FGExOpsTrigger";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "ExtendedOperations";
    UUID "{96129c98-3a34-4eeb-8ef7-ef330b41eb6a}";
    REPORT_ITEM_END;

    REPORT_ITEM      "ExtendedOperations.FGForecastDVRelease";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "ExtendedOperations";
    UUID "{f55b57cb-2b2a-499f-9a2f-02745e9f4661}";
    REPORT_ITEM_END;

    REPORT_ITEM      "ExtendedOperations.FGHClassAdj";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "ExtendedOperations";
    UUID "{3fa7e369-f27b-4e9b-80fc-85ab84b5a0a5}";
    REPORT_ITEM_END;

    REPORT_ITEM      "ExtendedOperations.FGHClassAdjBase";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "ExtendedOperations";
    UUID "{4e0aaa79-f433-4783-a2dd-1547a41c2fa3}";
    REPORT_ITEM_END;

    REPORT_ITEM      "ExtendedOperations.FlamingGorgeNormalOpsDoneFlag";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "ExtendedOperations";
    UUID "{22c64433-ae1b-43a4-b8d0-e9353360039d}";
    REPORT_ITEM_END;

    REPORT_ITEM      "ExtendedOperations.FlamingGorgeNormalRelease";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "ExtendedOperations";
    UUID "{8161ede1-0fcd-4f02-9e93-c5414a00f06e}";
    REPORT_ITEM_END;

    REPORT_ITEM      "ExtendedOperations.FlamingGorgeReleaseDifference";
    REPORT_ITEM_TYPE 1;
    REPORT_ITEM_PARENT "ExtendedOperations";
    UUID "{608b0fe1-b65d-459f-9393-7e516a969c9e}";
    REPORT_ITEM_END;

  END
  UUID "{2a637b33-d397-42f1-a577-d398946f29e3}";;

  REPORT_GROUP "Powell Forecasting Rules Report Group";
  DESCRIPTION  "";
  NOTES  "";
  BEGIN
    REPORT_ITEM      "PPP_ReleaseThroughNextApril";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Powell Forecasting";
    UUID "{4b6be88d-fd07-4c4e-8f21-5aafbf4930cb}";
    REPORT_ITEM_END;

    REPORT_ITEM      "PPP_August_Forecast";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Powell Forecasting";
    UUID "{28c2907e-5459-4f76-867a-4f9f7a4cd77a}";
    REPORT_ITEM_END;

    REPORT_ITEM      "PPP_April_Forecast";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Powell Forecasting";
    UUID "{ed88d314-e29f-4406-a0b1-0608ffaef140}";
    REPORT_ITEM_END;

    REPORT_ITEM      "FG_April_Forecast";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Powell Forecasting";
    UUID "{67b1b343-54f7-4c0e-b30a-670875377633}";
    REPORT_ITEM_END;

    REPORT_ITEM      "PPP_Set_Adjusted_Operations_Flag";
    REPORT_ITEM_TYPE 0;
    REPORT_ITEM_PARENT "Powell Forecasting";
    UUID "{c036a981-e627-48a9-b720-d3d5213d93de}";
    REPORT_ITEM_END;

  END
  UUID "{bda9dda0-90c5-4dd1-9083-b1bbb056b2e6}";;

END
UUID "{56f85051-1639-4179-a250-2dc28d725597}";
